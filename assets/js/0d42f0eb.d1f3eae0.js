"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[37208],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>f});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(t),u=o,f=c["".concat(s,".").concat(u)]||c[u]||d[u]||i;return t?a.createElement(f,r(r({ref:n},m),{},{components:t})):a.createElement(f,r({ref:n},m))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},78038:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(87462),o=(t(67294),t(3905));const i={id:"read-from-various-sources",title:"Read from various Sources"},r=void 0,l={unversionedId:"zio-config/read-from-various-sources",id:"zio-config/read-from-various-sources",title:"Read from various Sources",description:"zio-config supports various sources.",source:"@site/docs/zio-config/read-from-various-sources.md",sourceDirName:"zio-config",slug:"/zio-config/read-from-various-sources",permalink:"/zio-config/read-from-various-sources",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-config/read-from-various-sources.md",tags:[],version:"current",frontMatter:{id:"read-from-various-sources",title:"Read from various Sources"},sidebar:"ecosystem-sidebar",previous:{title:"Automatic Derivation of Config",permalink:"/zio-config/automatic-derivation-of-config"},next:{title:"Automatic Validations",permalink:"/zio-config/automatic-validations"}},s={},p=[{value:"HOCON String",id:"hocon-string",level:2},{value:"HOCON File",id:"hocon-file",level:2},{value:"Json",id:"json",level:2},{value:"Yaml FIle",id:"yaml-file",level:2},{value:"Xml String",id:"xml-string",level:2},{value:"Indexed Map, Array datatype, and a some implementation notes",id:"indexed-map-array-datatype-and-a-some-implementation-notes",level:3},{value:"What does it mean to users?",id:"what-does-it-mean-to-users",level:4},{value:"Another simple example of an indexed format",id:"another-simple-example-of-an-indexed-format",level:4}],m={toc:p},c="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"zio-config supports various sources."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._, Config._, ConfigProvider._\nimport zio.config._, magnolia._\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"case class MyConfig(ldap: String, port: Int, dburl: String)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'val myConfig =\n  (string("LDAP") zip int("PORT") zip string("DB_URL")).to[MyConfig]\n\n // val automatedConfig = deriveConfig[MyConfig]; using zio-config-magnolia\n')),(0,o.kt)("h2",{id:"hocon-string"},"HOCON String"),(0,o.kt)("p",null,"To enable HOCON source, you have to bring in ",(0,o.kt)("inlineCode",{parentName:"p"},"zio-config-typesafe")," module.\nThere are many examples in examples module in zio-config."),(0,o.kt)("p",null,"Here is an quick example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.config.typesafe._\nimport zio.config.magnolia._\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'case class SimpleConfig(port: Int, url: String, region: Option[String])\n\nval automaticDescription = deriveConfig[SimpleConfig]\n\nval hoconSource =\n  ConfigProvider.fromHoconString(\n      """\n      {\n        port : 123\n        url  : bla\n        region: useast\n      }\n\n      """\n    )\n\n\nval anotherHoconSource =\n  ConfigProvider.fromHoconString(\n      """\n        port=123\n        url=bla\n        region=useast\n      """\n  )\n\nhoconSource.load(deriveConfig[SimpleConfig])\n\n// yielding SimpleConfig(123,bla,Some(useast))\n')),(0,o.kt)("h2",{id:"hocon-file"},"HOCON File"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'ConfigProvider.fromHoconFile(new java.io.File("fileapth"))\n')),(0,o.kt)("h2",{id:"json"},"Json"),(0,o.kt)("p",null,"You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"zio-config-typesafe")," module to fetch json as well"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'val jsonString =\n   """\n   {\n     "port" : "123"\n     "url"  : "bla"\n     "region": "useast"\n   }\n\n   """\n\nConfigProvider.fromHoconString(jsonString)\n')),(0,o.kt)("h2",{id:"yaml-file"},"Yaml FIle"),(0,o.kt)("p",null,"Similar to Hocon source, we have ",(0,o.kt)("inlineCode",{parentName:"p"},"ConfigProvider.fromYamlString")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.config.yaml._\n\nConfigProvider.fromYamlString\n\n")),(0,o.kt)("h2",{id:"xml-string"},"Xml String"),(0,o.kt)("p",null,"zio-config can read XML strings. Note that it's experimental with a dead simple native xml parser,\nCurrently it cannot XML comments, and has not been tested with complex data types, which will be fixed in the near future."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.config.xml.experimental._\nimport zio.Config\n\nfinal case class Configuration(aws: Aws, database: Database)\n\nobject Configuration {\n  val config: Config[Configuration] =\n    Aws.config.nested("aws").zip(Database.config.nested("database")).to[Configuration].nested("config")\n\n  final case class Aws(region: String, account: String)\n\n  object Aws {\n    val config: Config[Aws] = Config.string("region").zip(Config.string("account")).to[Aws]\n  }\n  final case class Database(port: Int, url: String)\n\n  object Database {\n    val config: Config[Database] = Config.int("port").zip(Config.string("url")).to[Database]\n  }\n}\n\nval config =\n  s"""\n     |<config>\n     |  <aws region="us-east" account="personal"></aws>\n     |  <database port="123" url="some url"></database>\n     |</config>\n     |\n     |""".stripMargin\n\nval parsed = ConfigProvider.fromYamlString(config).load(Configuration.config)\n\n')),(0,o.kt)("h3",{id:"indexed-map-array-datatype-and-a-some-implementation-notes"},"Indexed Map, Array datatype, and a some implementation notes"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"zio-config")," comes up with the idea of ",(0,o.kt)("inlineCode",{parentName:"p"},"IndexedFlat")," allowing you to define indexed configs (see examples below).\nHowever, the constructors of ",(0,o.kt)("inlineCode",{parentName:"p"},"IndexedFlat")," is not exposed to the user for the time being, since it can conflate with some ideas in ",(0,o.kt)("inlineCode",{parentName:"p"},"zio.core")," ",(0,o.kt)("inlineCode",{parentName:"p"},"Flat"),",\nand resulted in failures whenever ",(0,o.kt)("inlineCode",{parentName:"p"},"IndexedFlat")," was converted to a ",(0,o.kt)("inlineCode",{parentName:"p"},"Flat")," internally. Example: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-config/issues/1095"},"https://github.com/zio/zio-config/issues/1095")),(0,o.kt)("p",null,"Therefore, some of these ideas around ",(0,o.kt)("inlineCode",{parentName:"p"},"Indexing")," is  pushed back to ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO")," and incorporated within the ",(0,o.kt)("inlineCode",{parentName:"p"},"Flat")," structure."),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/zio/zio/pull/7823"},"https://github.com/zio/zio/pull/7823")," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/zio/zio/pull/7891"},"https://github.com/zio/zio/pull/7891")),(0,o.kt)("p",null,"These changes are to keep the backward compatibility of ZIO library itself."),(0,o.kt)("h4",{id:"what-does-it-mean-to-users"},"What does it mean to users?"),(0,o.kt)("p",null,"It implies, for sequence (or list) datatypes, you can use either ",(0,o.kt)("inlineCode",{parentName:"p"},"<nil>")," or ",(0,o.kt)("inlineCode",{parentName:"p"},'""')," to represent empty list in a flat structure.\nSee the below example where it tries to mix indexing into flat structure.\nWe recommend using ",(0,o.kt)("inlineCode",{parentName:"p"},"<nil>")," over ",(0,o.kt)("inlineCode",{parentName:"p"},'""')," whenever you are trying  to represent a real indexed format"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.config._, magnolia._\n\nfinal case class Department(name: String, block: Int)\n\nfinal case class Employee(departments: List[Department], name: String)\nfinal case class Config(employees: List[Employee])\n\nval map =\n  Map(\n    "employees[0].name" -> "jon",\n    "employees[0].departments[0].name" -> "science",\n    "employees[0].departments[0].block" -> "10",\n    "employees[0].departments[1].name" -> "maths",\n    "employees[0].departments[2].block" -> "11",\n    "employees[1].name" -> "foo",\n    "employees[1].departments" -> "<nil>",\n  )\n  \n\nConfigProvider.fromMap(map).load(derivedConfig[Config])\n\n\n')),(0,o.kt)("p",null,"Although we support indexing within Flat, formats such as Json/HOCON/XML is far better to work with indexing,\nand zio-config supports these formats making use of the above idea."),(0,o.kt)("h4",{id:"another-simple-example-of-an-indexed-format"},"Another simple example of an indexed format"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'\nimport zio.config._, magnolia._\n\nfinal case class Employee(age: Int, name: String)\n\n val map = \n   Map(\n     "department.employees[0].age" -> "10",\n     "department.employees[0].name" -> "foo",\n     "department.employees[1].age" -> "11",\n     "department.employees[1].name" -> "bar",\n     "department.employees[2].age" -> "12",\n     "department.employees[2].name" -> "baz",\n   )\n\n\nval provider = ConfigProvider.fromMap(map)\nval config = Config.listOf("employees", deriveConfig[Employee]).nested("department")\nval result = provider.load(config)\n\n')))}d.isMDXComponent=!0}}]);