"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[31857],{3905:(e,t,a)=>{a.d(t,{Zo:()=>g,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=n.createContext({}),p=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},g=function(e){var t=p(e.components);return n.createElement(m.Provider,{value:t},e.children)},d="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,m=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),d=p(a),u=r,c=d["".concat(m,".").concat(u)]||d[u]||s[u]||l;return a?n.createElement(c,o(o({ref:t},g),{},{components:a})):n.createElement(c,o({ref:t},g))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=u;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},67933:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>s,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const l={id:"formatting-log-records",title:"Formatting Log Records"},o=void 0,i={unversionedId:"zio-logging/formatting-log-records",id:"zio-logging/formatting-log-records",title:"Formatting Log Records",description:"A LogFormat represents a DSL to describe the format of text log messages.",source:"@site/docs/zio-logging/formatting-log-records.md",sourceDirName:"zio-logging",slug:"/zio-logging/formatting-log-records",permalink:"/zio-logging/formatting-log-records",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-logging/formatting-log-records.md",tags:[],version:"current",frontMatter:{id:"formatting-log-records",title:"Formatting Log Records"},sidebar:"ecosystem-sidebar",previous:{title:"Introduction",permalink:"/zio-logging/"},next:{title:"Logger Context and Annotations",permalink:"/zio-logging/logger-context-and-annotations"}},m={},p=[{value:"Log Format Configuration",id:"log-format-configuration",level:2},{value:"LogFormat and LogAppender",id:"logformat-and-logappender",level:2}],g={toc:p},d="wrapper";function s(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"LogFormat")," represents a DSL to describe the format of text log messages."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.logging.console\nimport zio.logging.LogFormat._\n\nval myLogFormat = timestamp.fixed(32) |-| level |-| label("message", quoted(line))\nval myConsoleLogger = console(myLogFormat)\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LogFormat.filter")," returns a new log format that produces the same result, if ",(0,r.kt)("inlineCode",{parentName:"p"},"LogFilter")," is satisfied."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.logging.LogFormat\nimport zio.logging.LogFilter\n\nLogFormat.label("cause", LogFormat.cause).filter(LogFilter.causeNonEmpty)\n')),(0,r.kt)("h2",{id:"log-format-configuration"},"Log Format Configuration"),(0,r.kt)("p",null,"String representation of LogFormat:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"format"),(0,r.kt)("th",{parentName:"tr",align:null},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%timestamp{date-format}",(0,r.kt)("br",null),"%timestamp"),(0,r.kt)("td",{parentName:"tr",align:null},"Timestamp, where date format is ",(0,r.kt)("inlineCode",{parentName:"td"},"java.time.format.DateTimeFormatter"),",",(0,r.kt)("br",null),"example: ",(0,r.kt)("inlineCode",{parentName:"td"},"%timestamp{yyyy-MM-dd'T'HH:mm:ssZ}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%fiberId"),(0,r.kt)("td",{parentName:"tr",align:null},"Fiber Id")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%fixed{size}{format}"),(0,r.kt)("td",{parentName:"tr",align:null},"Fixed size for format,",(0,r.kt)("br",null),"example: ",(0,r.kt)("inlineCode",{parentName:"td"},"%fixed{7}{%level}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%label{name}{format}"),(0,r.kt)("td",{parentName:"tr",align:null},"Labeled format,",(0,r.kt)("br",null),"example: ",(0,r.kt)("inlineCode",{parentName:"td"},"%label{abcSpan}{%span{abc}}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%color{LogColor}{format}"),(0,r.kt)("td",{parentName:"tr",align:null},"Colored format, log color values: ",(0,r.kt)("inlineCode",{parentName:"td"},"RED"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"BLUE"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"YELLOW"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"CYAN"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"GREEN"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"MAGENTA"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"WHITE"),", ",(0,r.kt)("br",null),"example: ",(0,r.kt)("inlineCode",{parentName:"td"},"%color{CYAN}{%timestamp}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%level"),(0,r.kt)("td",{parentName:"tr",align:null},"Log level")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%name"),(0,r.kt)("td",{parentName:"tr",align:null},"Logger name (from logger name annotation or Trace)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%line"),(0,r.kt)("td",{parentName:"tr",align:null},"Log/trace line (from Trace)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%message"),(0,r.kt)("td",{parentName:"tr",align:null},"Log message")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%cause"),(0,r.kt)("td",{parentName:"tr",align:null},"Cause")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%kvs"),(0,r.kt)("td",{parentName:"tr",align:null},"Key-values - all annotations")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%kv{key}"),(0,r.kt)("td",{parentName:"tr",align:null},"Key-value - annotation with given key")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%spans"),(0,r.kt)("td",{parentName:"tr",align:null},"All log spans")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%span{span}"),(0,r.kt)("td",{parentName:"tr",align:null},"Log spans with key")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%highlight{format}"),(0,r.kt)("td",{parentName:"tr",align:null},"Highlight given format with colors based on log Level")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%%"),(0,r.kt)("td",{parentName:"tr",align:null},"% character")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%{"),(0,r.kt)("td",{parentName:"tr",align:null},"{ character")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%}"),(0,r.kt)("td",{parentName:"tr",align:null},"} character")))),(0,r.kt)("p",null,"examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"%timestamp %level [%fiberId] %name:%line %message %cause\n\n%highlight{%timestamp{yyyy-MM-dd'T'HH:mm:ssZ} %fixed{7}{%level} [%fiberId] %name:%line %message %cause}\n\n%label{timestamp}{%fixed{32}{%timestamp}} %label{level}{%level} %label{thread}{%fiberId} %label{message}{%message} %label{cause}{%cause}\n")),(0,r.kt)("h2",{id:"logformat-and-logappender"},"LogFormat and LogAppender"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"LogFormat")," represents a DSL to describe the format of text log messages."),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"LogAppender")," is a low-level interface designed to be the bridge between, ZIO Logging and logging backends, such as\nLogback.\nThis interface is slightly higher-level than a string builder, because it allows for structured logging,\nand preserves all ZIO-specific information about runtime failures."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LogFormat")," may be created by following function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"object LogFormat {\n  def make(format: (LogAppender, Trace, FiberId, LogLevel, () => String, Cause[Any], FiberRefs, List[LogSpan], Map[String, String]) => Any): LogFormat\n}\n")),(0,r.kt)("p",null,"format function arguments can be split to two sections:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"LogAppender"),(0,r.kt)("li",{parentName:"ul"},"all others - all log inputs provided by ZIO core logging:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Trace - current trace (",(0,r.kt)("inlineCode",{parentName:"li"},"zio.Trace"),")"),(0,r.kt)("li",{parentName:"ul"},"FiberId - fiber id (",(0,r.kt)("inlineCode",{parentName:"li"},"zio.FiberId"),")"),(0,r.kt)("li",{parentName:"ul"},"LogLevel - log level (",(0,r.kt)("inlineCode",{parentName:"li"},"zio.LogLevel"),")"),(0,r.kt)("li",{parentName:"ul"},"() => String - log message"),(0,r.kt)("li",{parentName:"ul"},"Cause","[Any]"," - cause (",(0,r.kt)("inlineCode",{parentName:"li"},"zio.Cause"),")"),(0,r.kt)("li",{parentName:"ul"},"FiberRefs - fiber refs (",(0,r.kt)("inlineCode",{parentName:"li"},"zio.FiberRefs"),"), collection of ",(0,r.kt)("inlineCode",{parentName:"li"},"zio.FiberRef")," - ZIO's equivalent of Java's ThreadLocal"),(0,r.kt)("li",{parentName:"ul"},"List","[LogSpan]"," - log spans  (",(0,r.kt)("inlineCode",{parentName:"li"},"zio.LogSpan"),")"),(0,r.kt)("li",{parentName:"ul"},"Map","[String, String]"," - ZIO core log annotations values, where key is annotation key/name, and value is annotation\nvalue")))),(0,r.kt)("p",null,"essential ",(0,r.kt)("inlineCode",{parentName:"p"},"LogAppender")," functions, which are used in predefined log formats:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"def appendCause(cause: Cause[Any])")," - appends a ",(0,r.kt)("inlineCode",{parentName:"li"},"zio.Cause")," to the log, some logging backends may have special\nsupport for logging failures"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"def appendNumeric[A](numeric: A)")," - appends a numeric value to the log"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"def appendText(text: String)")," - appends unstructured text to the log"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"def appendKeyValue(key: String, value: String)")," - appends a key/value string pair to the log")),(0,r.kt)("p",null,"then it depends on the specific logging backend how these functions are implemented with respect to the backend output,\nfor example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/zio-logging/slf4j1"},"slf4j v1")," logging backend - key/value is appended to\nslf4j ",(0,r.kt)("a",{parentName:"li",href:"https://logback.qos.ch/manual/mdc.html"},"MDC context"),", Cause is transformed to Throwable and placed to slf4j\nthrowable section, all other text and numeric parts are added to slf4j log message"),(0,r.kt)("li",{parentName:"ul"},"console logging backend - in general all values are added to log line, ",(0,r.kt)("inlineCode",{parentName:"li"},"Cause.prettyPrint")," is used to log cause\ndetails")),(0,r.kt)("p",null,"example of some predefined log formats implementations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"def annotation(name: String): LogFormat =\n  LogFormat.make { (builder, _, _, _, _, _, _, _, annotations) =>\n    annotations.get(name).foreach { value =>\n      builder.appendKeyValue(name, value)\n    }\n  }\n\nval cause: LogFormat =\n  LogFormat.make { (builder, _, _, _, _, cause, _, _, _) =>\n    if (!cause.isEmpty) {\n      builder.appendCause(cause)\n    }\n  }\n\ndef text(value: => String): LogFormat =\n  LogFormat.make { (builder, _, _, _, _, _, _, _, _) =>\n    builder.appendText(value)\n  }\n")))}s.isMDXComponent=!0}}]);