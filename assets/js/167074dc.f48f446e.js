"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[87505],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=o,y=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return n?a.createElement(y,i(i({ref:t},p),{},{components:n})):a.createElement(y,i({ref:t},p))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},43311:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=n(87462),o=(n(67294),n(3905));const r={id:"body",title:"Body"},i=void 0,l={unversionedId:"zio-http/dsl/body",id:"zio-http/dsl/body",title:"Body",description:"Body is a domain to model content for Request, Response and ClientRequest. ZIO HTTP uses Netty at it's core and Netty handles content as ByteBuf. Body helps you decode and encode this content into simpler, easier to use data types while creating a Request or Response.",source:"@site/docs/zio-http/dsl/body.md",sourceDirName:"zio-http/dsl",slug:"/zio-http/dsl/body",permalink:"/zio-http/dsl/body",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/dsl/body.md",tags:[],version:"current",frontMatter:{id:"body",title:"Body"},sidebar:"ecosystem-sidebar",previous:{title:"Response",permalink:"/zio-http/dsl/response"},next:{title:"Headers",permalink:"/zio-http/dsl/headers"}},s={},d=[{value:"Server-side usage of <code>Body</code>",id:"server-side-usage-of-body",level:2},{value:"Client-side usage of <code>Body</code>",id:"client-side-usage-of-body",level:2},{value:"Creating a Body",id:"creating-a-body",level:2},{value:"Creating a Body from a <code>String</code>",id:"creating-a-body-from-a-string",level:3},{value:"Creating a Body from <code>Chunk of Bytes</code>",id:"creating-a-body-from-chunk-of-bytes",level:3},{value:"Creating a Body from a <code>Stream</code>",id:"creating-a-body-from-a-stream",level:3},{value:"Creating a Body from a <code>File</code>",id:"creating-a-body-from-a-file",level:3}],p={toc:d},c="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Body")," is a domain to model content for ",(0,o.kt)("inlineCode",{parentName:"p"},"Request"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ClientRequest"),". ZIO HTTP uses Netty at it's core and Netty handles content as ",(0,o.kt)("inlineCode",{parentName:"p"},"ByteBuf"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"Body")," helps you decode and encode this content into simpler, easier to use data types while creating a Request or Response."),(0,o.kt)("h2",{id:"server-side-usage-of-body"},"Server-side usage of ",(0,o.kt)("inlineCode",{parentName:"h2"},"Body")),(0,o.kt)("p",null,"On the server-side, ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO-HTTP")," models content in ",(0,o.kt)("inlineCode",{parentName:"p"},"Request")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"Body")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"Body.Empty")," as the default value. To add content while creating a ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," constructor:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  import zio._\n  import zio.http._\n  import zio.stream._\n\n  val res: Response = Response( body = Body.fromString("Some String"))\n')),(0,o.kt)("p",null,"To add content while creating a ",(0,o.kt)("inlineCode",{parentName:"p"},"Request")," for unit tests, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Request")," constructor:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  val req: Request = Request.post(Body.fromString("Some String"), URL(Root / "save"))\n')),(0,o.kt)("h2",{id:"client-side-usage-of-body"},"Client-side usage of ",(0,o.kt)("inlineCode",{parentName:"h2"},"Body")),(0,o.kt)("p",null,"On the client-side, ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO-HTTP")," models content in ",(0,o.kt)("inlineCode",{parentName:"p"},"ClientRequest")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"Body")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"Body.Empty")," as the default value."),(0,o.kt)("p",null,"To add content while making a request using ZIO HTTP you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Client.request")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  val actual: ZIO[Client, Throwable, Response] = \n    Client.request("https://localhost:8073/success", content = Body.fromString("Some string"))\n')),(0,o.kt)("h2",{id:"creating-a-body"},"Creating a Body"),(0,o.kt)("h3",{id:"creating-a-body-from-a-string"},"Creating a Body from a ",(0,o.kt)("inlineCode",{parentName:"h3"},"String")),(0,o.kt)("p",null,"To create an ",(0,o.kt)("inlineCode",{parentName:"p"},"Body")," that encodes a String you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"Body.fromString"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  val textHttpData: Body = Body.fromString("any string", Charsets.Http)\n')),(0,o.kt)("h3",{id:"creating-a-body-from-chunk-of-bytes"},"Creating a Body from ",(0,o.kt)("inlineCode",{parentName:"h3"},"Chunk of Bytes")),(0,o.kt)("p",null,"To create an ",(0,o.kt)("inlineCode",{parentName:"p"},"Body")," that encodes chunk of bytes you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"Body.fromChunk"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  val chunkHttpData: Body = Body.fromChunk(Chunk.fromArray("Some Sting".getBytes(Charsets.Http)))\n')),(0,o.kt)("h3",{id:"creating-a-body-from-a-stream"},"Creating a Body from a ",(0,o.kt)("inlineCode",{parentName:"h3"},"Stream")),(0,o.kt)("p",null,"To create an ",(0,o.kt)("inlineCode",{parentName:"p"},"Body")," that encodes a Stream you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"Body.fromStream"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Using a Stream of Bytes")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  val streamHttpData1: Body = Body.fromStream(ZStream.fromChunk(Chunk.fromArray("Some String".getBytes(Charsets.Http))))\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Using a Stream of String")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  val streamHttpData2: Body = Body.fromStream(ZStream("a", "b", "c"), Charsets.Http)\n')),(0,o.kt)("h3",{id:"creating-a-body-from-a-file"},"Creating a Body from a ",(0,o.kt)("inlineCode",{parentName:"h3"},"File")),(0,o.kt)("p",null,"To create an ",(0,o.kt)("inlineCode",{parentName:"p"},"Body")," that encodes a File you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"Body.fromFile"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  val fileHttpData: Body = Body.fromFile(new java.io.File(getClass.getResource("/fileName.txt").getPath))\n// java.lang.NullPointerException: Cannot invoke "java.net.URL.getPath()" because the return value of "java.lang.Class.getResource(String)" is null\n//  at repl.MdocSession$MdocApp$$anonfun$2.apply$mcV$sp(body.md:61)\n//  at repl.MdocSession$MdocApp$$anonfun$2.apply(body.md:60)\n//  at repl.MdocSession$MdocApp$$anonfun$2.apply(body.md:60)\n')))}u.isMDXComponent=!0}}]);