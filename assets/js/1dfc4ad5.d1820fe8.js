"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[63316],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,s(s({ref:t},c),{},{components:n})):r.createElement(f,s({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},87321:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=n(87462),i=(n(67294),n(3905));const a={id:"sized",title:"Sized"},s=void 0,o={unversionedId:"reference/test/services/sized",id:"reference/test/services/sized",title:"Sized",description:"The Sized service enables the Sized Generators to access the size from the ZIO Test environment:",source:"@site/docs/reference/test/services/sized.md",sourceDirName:"reference/test/services",slug:"/reference/test/services/sized",permalink:"/reference/test/services/sized",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/services/sized.md",tags:[],version:"current",frontMatter:{id:"sized",title:"Sized"},sidebar:"reference-sidebar",previous:{title:"TestConfig",permalink:"/reference/test/services/config"},next:{title:"Test Aspects",permalink:"/reference/test/aspects/"}},l={},p=[{value:"Operations",id:"operations",level:2},{value:"size",id:"size",level:3},{value:"withSize",id:"withsize",level:3}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Sized")," service enables the ",(0,i.kt)("em",{parentName:"p"},"Sized Generators")," to access the ",(0,i.kt)("em",{parentName:"p"},"size")," from the ZIO Test environment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"trait Sized extends Serializable {\n  def size: UIO[Int]\n  def withSize[R, E, A](size: Int)(zio: ZIO[R, E, A]): ZIO[R, E, A]\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Sized")," service has two APIs:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Sized.size")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Sized.withSize"))),(0,i.kt)("p",null,"Let's go through each one:"),(0,i.kt)("h2",{id:"operations"},"Operations"),(0,i.kt)("h3",{id:"size"},"size"),(0,i.kt)("p",null,"To access the default ",(0,i.kt)("em",{parentName:"p"},"size")," value from the environment, we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Sized.size")," API. In ZIO Test, it is used to enable the ",(0,i.kt)("em",{parentName:"p"},"sized generators")," access the ",(0,i.kt)("em",{parentName:"p"},"size")," from the environment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"object Sized {\n  def withSize[R, E, A](size: Int)(zio: ZIO[R, E, A]): ZIO[R, E, A] = ???\n}\n")),(0,i.kt)("p",null,"For example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Gen.sized")," generator has the following signature:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"object Gen {\n  def sized[R, A](f: Int => Gen[R, A]): Gen[R, A] = ???\n}\n")),(0,i.kt)("p",null,"It applies the ",(0,i.kt)("em",{parentName:"p"},"size")," to the given function of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Int => Gen[R, A]"),". We should note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"sized")," generator obtains the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," value from the environment internally."),(0,i.kt)("p",null,"In the following example, we are creating a sized generator, which generates integer values within the specified range. In this generator, the lower bound is bound to zero, and the upper bound is bound to the ",(0,i.kt)("em",{parentName:"p"},"size")," value, which is obtained from the ZIO environment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.test._\n\nval sizedInts: Gen[Any, Int] = \n  Gen.sized(Gen.int(0, _))\n")),(0,i.kt)("p",null,"To generate some sample values, we can use ",(0,i.kt)("inlineCode",{parentName:"p"},"Gen#runCollectN")," operator on that:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val samples: UIO[List[Int]] = \n  sizedInts.runCollectN(5).debug\n")),(0,i.kt)("h3",{id:"withsize"},"withSize"),(0,i.kt)("p",null,"To change the default ",(0,i.kt)("em",{parentName:"p"},"size")," temporarily, we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Size.withSize"),". It takes a ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," and a ZIO effect, and runs that effect bounded with the given ",(0,i.kt)("inlineCode",{parentName:"p"},"size"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"object Sized {\n  def withSize[R, E, A](size: Int)(zio: ZIO[R, E, A]): ZIO[R, E, A] = ???\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.test._\n\nval effect     : UIO[String] = ZIO.succeed("effect")\nval sizedEffect: UIO[String] = Sized.withSize(10)(effect)\n')),(0,i.kt)("p",null,"ZIO Test has a test aspect called ",(0,i.kt)("inlineCode",{parentName:"p"},"TestAspect.size")," which is a helper method for this operation. This test aspect runs each test with the given ",(0,i.kt)("em",{parentName:"p"},"size")," value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.test._\n\nobject SizedSpec extends ZIOSpecDefault {\n  def spec =\n    suite("sized") {\n      test("bounded int generator shouldn\'t cross its boundaries") {\n        check(Gen.sized(Gen.int(0, _))) { n =>\n          assertTrue(n >= 0 && n <= 200)\n        }\n      } @@ TestAspect.size(200)\n    }\n}\n')))}u.isMDXComponent=!0}}]);