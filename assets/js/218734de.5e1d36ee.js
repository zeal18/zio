"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[45935],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,p(p({ref:t},c),{},{components:n})):a.createElement(h,p({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,p=new Array(r);p[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:o,p[1]=i;for(var s=2;s<r;s++)p[s]=n[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},11076:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var a=n(87462),o=(n(67294),n(3905));const r={id:"getting-started",title:"Getting Started"},p=void 0,i={unversionedId:"zio-http/getting-started",id:"zio-http/getting-started",title:"Getting Started",description:"ZIO HTTP is a powerful library that is used to build highly performant HTTP-based services and clients using",source:"@site/docs/zio-http/getting-started.md",sourceDirName:"zio-http",slug:"/zio-http/getting-started",permalink:"/zio-http/getting-started",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/getting-started.md",tags:[],version:"current",frontMatter:{id:"getting-started",title:"Getting Started"},sidebar:"ecosystem-sidebar",previous:{title:"Setup",permalink:"/zio-http/setup"},next:{title:"ZIO Http",permalink:"/zio-http/"}},l={},s=[{value:"Http and Handler",id:"http-and-handler",level:2},{value:"Creating a &quot;<em>Hello World</em>&quot; app",id:"creating-a-hello-world-app",level:3},{value:"Routing",id:"routing",level:3},{value:"Composition",id:"composition",level:3},{value:"ZIO Integration",id:"zio-integration",level:3},{value:"Accessing the Request",id:"accessing-the-request",level:3},{value:"Testing",id:"testing",level:3},{value:"Socket",id:"socket",level:2},{value:"Creating a socket app",id:"creating-a-socket-app",level:3},{value:"Server",id:"server",level:2},{value:"Starting an HTTP App",id:"starting-an-http-app",level:3},{value:"Examples",id:"examples",level:2}],c={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"ZIO HTTP")," is a powerful library that is used to build highly performant HTTP-based services and clients using\nfunctional scala and ZIO and uses ",(0,o.kt)("a",{parentName:"p",href:"https://netty.io/"},"Netty")," as its core."),(0,o.kt)("p",null,"ZIO HTTP has powerful functional domains which help in creating, modifying, composing apps easily. Let's start with the\nHTTP domain."),(0,o.kt)("p",null,"The first step when using ZIO HTTP is creating an HTTP app."),(0,o.kt)("h2",{id:"http-and-handler"},"Http and Handler"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Handler")," describes the transformation from an incoming ",(0,o.kt)("inlineCode",{parentName:"p"},"Request")," to an outgoing ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," type. The ",(0,o.kt)("inlineCode",{parentName:"p"},"Http")," type on top\nif this\nprovides input-dependent routing to different ",(0,o.kt)("inlineCode",{parentName:"p"},"Handler")," values. There are some default handler constructors such\nas ",(0,o.kt)("inlineCode",{parentName:"p"},"Handler.text"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Handler.html"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Handler.fromFile"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Handler.fromData"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Handler.fromStream"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Handler.fromEffect"),"."),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Handler")," can always be transformed to a ",(0,o.kt)("inlineCode",{parentName:"p"},"Http")," value using the ",(0,o.kt)("inlineCode",{parentName:"p"},".toHttp")," method."),(0,o.kt)("h3",{id:"creating-a-hello-world-app"},'Creating a "',(0,o.kt)("em",{parentName:"h3"},"Hello World"),'" app'),(0,o.kt)("p",null,'Creating an HTTP app using ZIO Http is as simple as given below, this app will always respond with "Hello World!"'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nval app = Handler.text("Hello World!").toHttp\n')),(0,o.kt)("p",null,"An application can be made using any of the available operators on ",(0,o.kt)("inlineCode",{parentName:"p"},"zio.Http"),". In the above program for any Http\nrequest, the response is always ",(0,o.kt)("inlineCode",{parentName:"p"},'"Hello World!"'),"."),(0,o.kt)("h3",{id:"routing"},"Routing"),(0,o.kt)("p",null,"For handling routes, Http Domain has a ",(0,o.kt)("inlineCode",{parentName:"p"},"collect")," method that, accepts different requests and produces responses. Pattern\nmatching on the route is supported by the framework.\nThe example below shows how to create routes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nval app = Http.collect[Request] {\n  case Method.GET -> Root / "fruits" / "a" => Response.text("Apple")\n  case Method.GET -> Root / "fruits" / "b" => Response.text("Banana")\n}\n')),(0,o.kt)("p",null,"You can create typed routes as well. The below example shows how to accept count as ",(0,o.kt)("inlineCode",{parentName:"p"},"Int")," only:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala",metastring:"mdoc:silent:reset","mdoc:silent:reset":!0},'import zio.http._\n\nval app = Http.collect[Request] {\n case Method.GET -> Root / "Apple" / int(count) => Response.text(s"Apple: $count")\n}\n')),(0,o.kt)("p",null,"Pattern matching on route is supported by the framework"),(0,o.kt)("h3",{id:"composition"},"Composition"),(0,o.kt)("p",null,"Apps can be composed using operators in ",(0,o.kt)("inlineCode",{parentName:"p"},"Http"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Using the ",(0,o.kt)("inlineCode",{parentName:"li"},"++")," operator. The way it works is, if none of the routes match in ",(0,o.kt)("inlineCode",{parentName:"li"},"a"),", then the control is passed on to\nthe ",(0,o.kt)("inlineCode",{parentName:"li"},"b")," app:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nval a = Http.collect[Request] { case Method.GET -> Root / "a" => Response.ok }\nval b = Http.collect[Request] { case Method.GET -> Root / "b" => Response.ok }\n\nval app = a ++ b\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Using the ",(0,o.kt)("inlineCode",{parentName:"li"},"<>")," operator. The way it works is, if ",(0,o.kt)("inlineCode",{parentName:"li"},"a")," fails, then the control is passed on to the ",(0,o.kt)("inlineCode",{parentName:"li"},"b")," app:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\n\nval a = Handler.fail(new Error("SERVER_ERROR"))\nval b = Handler.text("OK")\n\nval app = (a <> b).toHttp\n')),(0,o.kt)("h3",{id:"zio-integration"},"ZIO Integration"),(0,o.kt)("p",null,"For creating effectful apps, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"collectZIO")," and wrap ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO")," to produce ZIO effect value."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\nimport zio._\n\nval app = Http.collectZIO[Request] {\n  case Method.GET -> Root / "hello" => ZIO.succeed(Response.text("Hello World"))\n}\n')),(0,o.kt)("h3",{id:"accessing-the-request"},"Accessing the Request"),(0,o.kt)("p",null,"To access the request use ",(0,o.kt)("inlineCode",{parentName:"p"},"@")," as it binds a matched pattern to a variable and can be used while creating a response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\nimport zio._\n\nval app = Http.collectZIO[Request] {\n  case req@Method.GET -> Root / "fruits" / "a" =>\n    ZIO.succeed(Response.text("URL:" + req.url.path.toString + " Headers: " + req.headers))\n  case req@Method.POST -> Root / "fruits" / "a" =>\n    req.body.asString.map(Response.text(_))\n}\n')),(0,o.kt)("h3",{id:"testing"},"Testing"),(0,o.kt)("p",null,"You can run ",(0,o.kt)("inlineCode",{parentName:"p"},"Http")," as a function of ",(0,o.kt)("inlineCode",{parentName:"p"},"A => ZIO[R, Option[E], B]")," to test it by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"runZIO")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.test._\nimport zio.test.Assertion.equalTo\nimport zio.http._\n\nobject Spec extends ZIOSpecDefault {\n\n  def spec = suite("http")(\n    test("should be ok") {\n      val app = Handler.ok.toHttp\n      val req = Request.get(URL(Root))\n      assertZIO(app.runZIO(req))(equalTo(Response.ok))\n    }\n  )\n}\n')),(0,o.kt)("p",null,"When we call the ",(0,o.kt)("inlineCode",{parentName:"p"},"app")," with the ",(0,o.kt)("inlineCode",{parentName:"p"},"request")," it calls the apply method of ",(0,o.kt)("inlineCode",{parentName:"p"},"Http")," via ",(0,o.kt)("inlineCode",{parentName:"p"},"zio.test")," package"),(0,o.kt)("h2",{id:"socket"},"Socket"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Socket")," is functional domain in ZIO HTTP. It provides constructors to create socket apps.\nA socket app is an app that handles WebSocket connections."),(0,o.kt)("h3",{id:"creating-a-socket-app"},"Creating a socket app"),(0,o.kt)("p",null,"Socket app can be created by using ",(0,o.kt)("inlineCode",{parentName:"p"},"Socket")," constructors. To create a socket app, you need to create a socket that\naccepts ",(0,o.kt)("inlineCode",{parentName:"p"},"WebSocketChannel")," and produces ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO"),".\nFinally, we need to convert socketApp to ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," using ",(0,o.kt)("inlineCode",{parentName:"p"},"toResponse"),", so that we can run it like any other HTTP\napp.",(0,o.kt)("br",{parentName:"p"}),"\n","The below example shows a simple socket app, we are using ",(0,o.kt)("inlineCode",{parentName:"p"},"collectZIO"),' which sends WebsSocketTextFrame "\nBAR" on receiving WebsSocketTextFrame "FOO".'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.http._\nimport zio.stream._\nimport zio._\n\nprivate val socket =\n  Handler.webSocket { channel =>\n    channel.receiveAll {\n      case ChannelEvent.Read(WebSocketFrame.Text("FOO")) =>\n        channel.send(ChannelEvent.Read(WebSocketFrame.text("BAR")))\n      case _ =>\n        ZIO.unit\n    }\n  }\n\nprivate val app = \n  Http.collectZIO[Request] {\n    case Method.GET -> Root / "greet" / name => ZIO.succeed(Response.text(s"Greetings {$name}!"))\n    case Method.GET -> Root / "ws" => socket.toResponse\n  }\n')),(0,o.kt)("h2",{id:"server"},"Server"),(0,o.kt)("p",null,"As we have seen how to create HTTP apps, the only thing left is to run an HTTP server and serve requests.\nZIO HTTP provides a way to set configurations for your server. The server can be configured according to the leak\ndetection level, request size, address etc."),(0,o.kt)("h3",{id:"starting-an-http-app"},"Starting an HTTP App"),(0,o.kt)("p",null,"To launch our app, we need to start the server on a port. The below example shows a simple HTTP app that responds with\nempty content and a ",(0,o.kt)("inlineCode",{parentName:"p"},"200")," status code, deployed on port ",(0,o.kt)("inlineCode",{parentName:"p"},"8090")," using ",(0,o.kt)("inlineCode",{parentName:"p"},"Server.start"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.http._\nimport zio._\n\nobject HelloWorld extends ZIOAppDefault {\n  val app = Handler.ok.toHttp\n\n  override def run =\n    Server.serve(app).provide(Server.defaultWithPort(8090))\n}\n")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://zio.github.io/zio-http/docs/v1.x/examples/zio-http-basic-examples/http_server"},"HTTP Server")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://zio.github.io/zio-http/docs/v1.x/examples/advanced-examples/advanced_server"},"Advanced Server")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://zio.github.io/zio-http/docs/v1.x/examples/zio-http-basic-examples/web-socket"},"WebSocket Server")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://zio.github.io/zio-http/docs/v1.x/examples/advanced-examples/stream-response"},"Streaming Response")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://zio.github.io/zio-http/docs/v1.x/examples/zio-http-basic-examples/http_client"},"HTTP Client")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://zio.github.io/zio-http/docs/v1.x/examples/advanced-examples/stream-file"},"File Streaming")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://zio.github.io/zio-http/docs/v1.x/examples/advanced-examples/authentication"},"Authentication"))))}u.isMDXComponent=!0}}]);