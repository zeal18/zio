"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[82999],{3905:(e,t,o)=>{o.d(t,{Zo:()=>m,kt:()=>f});var r=o(67294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(o),d=n,f=c["".concat(s,".").concat(d)]||c[d]||u[d]||a;return o?r.createElement(f,l(l({ref:t},m),{},{components:o})):r.createElement(f,l({ref:t},m))}));function f(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:n,l[1]=i;for(var p=2;p<a;p++)l[p]=o[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"},93816:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=o(87462),n=(o(67294),o(3905));const a={id:"zio-temporal",title:"ZIO Temporal"},l=void 0,i={unversionedId:"ecosystem/community/zio-temporal",id:"ecosystem/community/zio-temporal",title:"ZIO Temporal",description:"ZIO Temporal is a ZIO library for Temporal, a microservice workflow orchestration platform.",source:"@site/docs/ecosystem/community/zio-temporal.md",sourceDirName:"ecosystem/community",slug:"/ecosystem/community/zio-temporal",permalink:"/ecosystem/community/zio-temporal",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/ecosystem/community/zio-temporal.md",tags:[],version:"current",frontMatter:{id:"zio-temporal",title:"ZIO Temporal"},sidebar:"ecosystem-sidebar",previous:{title:"ZIO Slick Interop",permalink:"/ecosystem/community/zio-slick-interop"},next:{title:"ZIO Test Akka HTTP",permalink:"/ecosystem/community/zio-test-akka-http"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Examples",id:"examples",level:2},{value:"Want more?",id:"want-more",level:2}],m={toc:p},c="wrapper";function u(e){let{components:t,...o}=e;return(0,n.kt)(c,(0,r.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://zio-temporal.vhonta.dev/"},"ZIO Temporal")," is a ZIO library for Temporal, a microservice workflow orchestration platform."),(0,n.kt)("h2",{id:"introduction"},"Introduction"),(0,n.kt)("p",null,"ZIO Temporal is a ZIO library based on the Temporal Java-SDK. ZIO Temporal brings first-class Scala & ZIO support with additional compile-time checks that Java SDK lacks."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://temporal.io/"},"Temporal")," platform helps to eliminate complex errors or retry logic, avoid callbacks, and ensure that every workflow you start completes. Temporal delivers durable execution for your services and applications."),(0,n.kt)("h2",{id:"installation"},"Installation"),(0,n.kt)("p",null,"To use the library, we need to add the following dependency:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.vhonta" %% "zio-temporal-core" % "0.4.0"\n')),(0,n.kt)("h2",{id:"examples"},"Examples"),(0,n.kt)("p",null,'Here we have one ZIO app with two "modules". One is the worker that executes the workflow activity, and the other is the Client that sends the request to the Temporal platform. To run the sample, it\'s required to download ',(0,n.kt)("a",{parentName:"p",href:"https://docs.temporal.io/cli"},"Temporal cli")," (recommended for development)."),(0,n.kt)("p",null,"Run the Temporal server on one shell:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"temporal server start-dev --ip 0.0.0.0 --db-filename /tmp/temporal.db\n")),(0,n.kt)("p",null,"Now we can run the sample application, which is based on Temporal Java SDK docs using ",(0,n.kt)("a",{parentName:"p",href:"https://scala-cli.virtuslab.org"},"scala-cli"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'//> using scala "3.3.0"\n\n//> using lib "dev.zio::zio:2.0.16"\n//> using lib "dev.vhonta::zio-temporal-core:0.4.0"\n//> using lib "dev.zio::zio-logging:2.1.14"\n//> using lib "dev.zio::zio-logging-slf4j2-bridge:2.1.14"\n\nimport zio.*\nimport zio.temporal.*\nimport zio.temporal.worker.*\nimport zio.temporal.workflow.*\nimport zio.logging.*\n\n// This is our workflow interface\n@workflowInterface\ntrait EchoWorkflow:\n\n  @workflowMethod\n  def echo(str: String): String\n\n// Workflow implementation\nclass EchoWorkflowImpl extends EchoWorkflow:\n  private val logger = ZWorkflow.makeLogger\n\n  override def echo(str: String): String =\n    logger.info(s"Worker: Received \\"$str\\"")\n    s"ACK: $str"\n\n// Main Application\nobject Main extends ZIOAppDefault:\n  val taskQueue = "echo-queue"\n\n  // Worker implementation\n  val setupWorker = ZWorkerFactory.newWorker(taskQueue) @@\n    ZWorker.addWorkflow[EchoWorkflowImpl].fromClass\n\n  // Client implementation\n  def invokeWorkflow(msg: String) = ZIO.serviceWithZIO[ZWorkflowClient]: client =>\n    for\n      uuid <- Random.nextUUID\n      workflowID = s"echo-$uuid"\n      echoWorkflow <- client\n                        .newWorkflowStub[EchoWorkflow]\n                        .withTaskQueue(taskQueue)\n                        .withWorkflowId(workflowID)\n                        .withWorkflowRunTimeout(2.seconds)\n                        .withRetryOptions(ZRetryOptions.default.withMaximumAttempts(3))\n                        .build\n      _   <- ZIO.logInfo(s"Will submit message \\"$msg\\" with workflow ID $workflowID")\n      res <- ZWorkflowStub.execute(echoWorkflow.echo(msg))\n      _   <- ZIO.logInfo(s"Greeting received: $res")\n    yield res\n\n  // Logging configuration\n  val logFilter: LogFilter[String] = LogFilter.logLevelByName(\n    LogLevel.Info,\n    "io.grpc.netty" -> LogLevel.Warning,\n    "io.netty"      -> LogLevel.Warning,\n    "io.temporal"   -> LogLevel.Error,\n  )\n  override val bootstrap: ZLayer[ZIOAppArgs, Any, Any] =\n    Runtime.removeDefaultLoggers >>> consoleLogger(ConsoleLoggerConfig(LogFormat.colored, logFilter))\n\n  // ZIO Main Program\n  def run: ZIO[ZIOAppArgs & Scope, Any, Any] =\n    val program =\n      for\n        args           <- getArgs\n        msg             = if args.isEmpty then "testMsg" else args.mkString(" ")\n        _              <- setupWorker\n        _              <- ZWorkerFactory.setup\n        _              <- ZWorkflowServiceStubs.setup()\n        workflowResult <- invokeWorkflow(msg)\n        _              <- ZIO.logInfo(s"The workflow result: $workflowResult")\n      yield ExitCode.success\n\n    program\n      .provideSome[ZIOAppArgs & Scope](\n        ZWorkflowServiceStubsOptions.make,\n        ZWorkflowClientOptions.make,\n        ZWorkerFactoryOptions.make,\n        ZWorkflowClient.make,\n        ZWorkflowServiceStubs.make,\n        ZWorkerFactory.make,\n        slf4j.bridge.Slf4jBridge.initialize,\n      )\n')),(0,n.kt)("p",null,"Generates the output:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'\u276f scli zio-temporal.scala\ntimestamp=2023-06-28T09:27:21.171306+02:00 level=INFO thread=zio-fiber-4 message="ZWorkerFactory started"\ntimestamp=2023-06-28T09:27:21.238575+02:00 level=INFO thread=zio-fiber-4 message="Will submit message "testMsg" with workflow ID echo-82026831-91df-4138-b862-710d87b3ebb4"\ntimestamp=2023-06-28T09:27:21.5684+02:00   level=INFO thread=zio-fiber-183 message="Worker: Received "testMsg""\ntimestamp=2023-06-28T09:27:21.645988+02:00 level=INFO thread=zio-fiber-4 message="Greeting received: ACK: testMsg"\ntimestamp=2023-06-28T09:27:21.6473+02:00   level=INFO thread=zio-fiber-4 message="The workflow result: ACK: testMsg"\ntimestamp=2023-06-28T09:27:21.705634+02:00 level=INFO thread=zio-fiber-4 message="ZWorkerFactory shutdownNow initiated..."\n')),(0,n.kt)("p",null,"Results of the execution can also be seen in the ",(0,n.kt)("a",{parentName:"p",href:"http://localhost:8233"},"Temporal UI")," running locally or the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/temporalio/tctl"},"tctl")," tool:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'\u276f tctl workflow observe --workflow_id echo-81ef73da-d54d-492a-8f91-78e888dcebc8\nProgress:\n  1, 2023-04-18T20:34:00Z, WorkflowExecutionStarted\n  2, 2023-04-18T20:34:00Z, WorkflowTaskScheduled\n  3, 2023-04-18T20:34:00Z, WorkflowTaskStarted\n  4, 2023-04-18T20:34:00Z, WorkflowTaskCompleted\n  5, 2023-04-18T20:34:00Z, WorkflowExecutionCompleted\n\nResult:\n  Run Time: 1 seconds\n  Status: COMPLETED\n  Output: ["ACK: testMsg"]\n')),(0,n.kt)("h2",{id:"want-more"},"Want more?"),(0,n.kt)("p",null,"You can find more complex and end-to-end example projects in ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/vitaliihonta/zio-temporal-samples"},"zio-temporal-samples")," repo."))}u.isMDXComponent=!0}}]);