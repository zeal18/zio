"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[27054],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>x});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),d=r,x=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return t?i.createElement(x,a(a({ref:n},p),{},{components:t})):i.createElement(x,a({ref:n},p))}));function x(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:r,a[1]=s;for(var c=2;c<o;c++)a[c]=t[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},40743:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=t(87462),r=(t(67294),t(3905));const o={id:"index",title:"Introduction to ZIO Interop Monix",sidebar_label:"ZIO Interop Monix"},a=void 0,s={unversionedId:"interop-monix/index",id:"interop-monix/index",title:"Introduction to ZIO Interop Monix",description:"This library provides interoperability between Monix 3.4 and ZIO 1 and ZIO 2. Both JVM and Scala.js are supported.",source:"@site/docs/interop-monix/index.md",sourceDirName:"interop-monix",slug:"/interop-monix/",permalink:"/interop-monix/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/interop-monix/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"Introduction to ZIO Interop Monix",sidebar_label:"ZIO Interop Monix"},sidebar:"ecosystem-sidebar",previous:{title:"ZIO Interop Guava",permalink:"/zio-interop-guava/"},next:{title:"ZIO Interop Reactive Streams",permalink:"/zio-interop-reactivestreams/"}},l={},c=[{value:"Tasks",id:"tasks",level:2},{value:"Monix Scheduler",id:"monix-scheduler",level:2}],p={toc:c},u="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This library provides interoperability between ",(0,r.kt)("strong",{parentName:"p"},"Monix 3.4")," and ",(0,r.kt)("strong",{parentName:"p"},"ZIO 1 and ZIO 2"),". Both JVM and Scala.js are supported."),(0,r.kt)("h2",{id:"tasks"},"Tasks"),(0,r.kt)("p",null,"Monix tasks can be converted to ZIO tasks:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.interop.monix._\nimport monix.eval\n\nval monixTask: eval.Task[String] = ???\n\nval zioTask: Task[String] = ZIO.fromMonixTask(monixTask)\n")),(0,r.kt)("p",null,"The conversion is lazy: the Monix task will only be executed if the returned ZIO task is executed."),(0,r.kt)("p",null,"ZIO tasks can be converted to Monix tasks:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.interop.monix._\nimport monix.eval\nimport monix.execution.Scheduler.Implicits.global\n\nval zioTask: Task[String] = ???\n\nval createMonixTask: UIO[eval.Task[String]] = zioTask.toMonixTask()\n\n// illustrative, you wouldn't usually do things this way\nval monixTask: eval.Task[String] = Runtime.default.unsafeRun(createMonixTask)\nval stringResult = monixTask.runSyncUnsafe\n")),(0,r.kt)("p",null,"The conversion is lazy: the ZIO effect so converted will only be executed if the returned Monix task is executed."),(0,r.kt)("p",null,"Sometimes you need to provide a Monix task in a context where using a ZIO effect is difficult. For example, when an API requires you to provide a function that returns a Monix task. In these situations, the ",(0,r.kt)("inlineCode",{parentName:"p"},"toMonixTaskUsingRuntime")," method can be used:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.interop.monix._\nimport monix.eval\n\ndef monixBasedApi(f: String => eval.Task[Unit]): eval.Task[Unit] = ???\n\ndef zioBasedProcessor(s: String): Task[Unit] = ???\n\nval zioEffects = for {\n    zioRuntime <- ZIO.runtime[Any]\n    _ <- ZIO.fromMonixTask {\n        monixBasedApi(s =>\n            zioBasedProcessor(s).toMonixTaskUsingRuntime(zioRuntime)\n        )\n    }\n} yield ()\n")),(0,r.kt)("p",null,"Cancellation/Interruption is propagated between the effect systems. Interrupting a ZIO task based on a Monix task will cancel the underlying Monix task and vice-versa. Be aware that ZIO interruption does not return until cancellation effects have completed, whereas Monix cancellation returns as soon as the signal is sent, without waiting for the cancellation effects to complete."),(0,r.kt)("h2",{id:"monix-scheduler"},"Monix Scheduler"),(0,r.kt)("p",null,"Sometimes it is useful to have a Monix ",(0,r.kt)("inlineCode",{parentName:"p"},"Scheduler")," available for interop purposes. The ",(0,r.kt)("inlineCode",{parentName:"p"},"Runtime#monixScheduler")," method will create a scheduler that shares its execution context with the ZIO runtime:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.interop.monix._\nimport monix.execution.Scheduler\n\nZIO.runtime[Any].flatMap { runtime =>\n    implicit val monixScheduler: Scheduler = runtime.monixScheduler()\n\n    // do Monixy things\n}\n")))}m.isMDXComponent=!0}}]);