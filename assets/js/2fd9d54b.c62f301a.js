"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[80243],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>f});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(a),m=r,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return a?n.createElement(f,o(o({ref:t},u),{},{components:a})):n.createElement(f,o({ref:t},u))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},31385:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const i={id:"index",title:"Functional Data Types in ZIO Prelude",sidebar_label:"Functional Data Types"},o=void 0,l={unversionedId:"zio-prelude/functional-data-types/index",id:"zio-prelude/functional-data-types/index",title:"Functional Data Types in ZIO Prelude",description:"ZIO Prelude includes several data types to help us model our domains more accurately and solve common problems.",source:"@site/docs/zio-prelude/functional-data-types/index.md",sourceDirName:"zio-prelude/functional-data-types",slug:"/zio-prelude/functional-data-types/",permalink:"/zio-prelude/functional-data-types/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-prelude/functional-data-types/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"Functional Data Types in ZIO Prelude",sidebar_label:"Functional Data Types"},sidebar:"ecosystem-sidebar",previous:{title:"NonEmptyForEach",permalink:"/zio-prelude/functional-abstractions/parameterized-types/nonemptyforeach"},next:{title:"Equivalence",permalink:"/zio-prelude/functional-data-types/equivalence"}},s={},p=[],u={toc:p},c="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"ZIO Prelude includes several data types to help us model our domains more accurately and solve common problems."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/zio-prelude/functional-data-types/equivalence"},"Equivalence"))," - A description of an equivalence relationship between two data types."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/zio-prelude/functional-data-types/nonemptylist"},"NonEmptyList"))," - A list that is guaranteed to be non-empty to more accurately model situations where we know a collection has at least one element."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/zio-prelude/functional-data-types/these"},"These"))," - A data type that may either be a ",(0,r.kt)("inlineCode",{parentName:"li"},"Left")," with an ",(0,r.kt)("inlineCode",{parentName:"li"},"A"),", a ",(0,r.kt)("inlineCode",{parentName:"li"},"Right")," with a ",(0,r.kt)("inlineCode",{parentName:"li"},"B"),", or a ",(0,r.kt)("inlineCode",{parentName:"li"},"Both")," with an ",(0,r.kt)("inlineCode",{parentName:"li"},"A")," and a ",(0,r.kt)("inlineCode",{parentName:"li"},"B"),", useful for modeling problems such as merging streams of data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/zio-prelude/functional-data-types/validation"},"Validation"))," - A data type that may be either a success or an accumulation of one or more errors, allowing modeling multiple failures for applications such as data validation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/zio-prelude/functional-data-types/zset"},"ZSet")),' - A generalization of a set that generalizes measures of "how many" of an element exist in a set, supporting multi-sets, "fuzzy" sets, and other data structures.'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"/zio-prelude/functional-data-types/zvalidation"},"ZValidation"))," - A generalization of ",(0,r.kt)("inlineCode",{parentName:"li"},"Validation")," that allows maintaining a log of warnings in addition to accumulating errors.")))}d.isMDXComponent=!0}}]);