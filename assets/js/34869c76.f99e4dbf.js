"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[79603],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),f=a,h=u["".concat(s,".").concat(f)]||u[f]||d[f]||i;return t?r.createElement(h,o(o({ref:n},c),{},{components:t})):r.createElement(h,o({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2246:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const i={id:"files",title:"File Channel"},o=void 0,l={unversionedId:"zio-nio/files",id:"zio-nio/files",title:"File Channel",description:"An AsynchronousFileChannel provides an API for handling files in a non-blocking way.",source:"@site/docs/zio-nio/files.md",sourceDirName:"zio-nio",slug:"/zio-nio/files",permalink:"/zio-nio/files",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-nio/files.md",tags:[],version:"current",frontMatter:{id:"files",title:"File Channel"},sidebar:"ecosystem-sidebar",previous:{title:"Blocking I/O",permalink:"/zio-nio/blocking"},next:{title:"Socket Channel",permalink:"/zio-nio/sockets"}},s={},p=[{value:"Basic operations",id:"basic-operations",level:2}],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"An ",(0,a.kt)("inlineCode",{parentName:"p"},"AsynchronousFileChannel")," provides an API for handling files in a non-blocking way."),(0,a.kt)("p",null,"Required imports for presented snippets:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.nio.channels._\nimport zio.nio.file._\nimport zio.console._\n")),(0,a.kt)("h2",{id:"basic-operations"},"Basic operations"),(0,a.kt)("p",null,"Opening a file for a given path (with no additional open attributes) returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"ZManaged")," instance on which we're running the intended operations. ",(0,a.kt)("inlineCode",{parentName:"p"},"ZManaged")," makes sure that the channel gets closed afterwards:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import java.nio.file.StandardOpenOption\n\nval path = Path("file.txt")\nval channelM = AsynchronousFileChannel.open(\n  path, \n  StandardOpenOption.READ,\n  StandardOpenOption.WRITE\n).use { channel =>\n  readWriteOp(channel) *> lockOp(channel)\n}\n')),(0,a.kt)("p",null,"Reading and writing is performed as effects where raw ",(0,a.kt)("inlineCode",{parentName:"p"},"Byte")," content is wrapped in ",(0,a.kt)("inlineCode",{parentName:"p"},"Chunk"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'val readWriteOp = (channel: AsynchronousFileChannel) =>\n  for {\n    chunk <- channel.readChunk(20, 0L)\n    text  = chunk.map(_.toChar).mkString\n    _     <- putStrLn(text)\n  \n    input = Chunk.fromArray("message".toArray.map(_.toByte))\n    _     <- channel.writeChunk(input, 0L)\n  } yield ()\n')),(0,a.kt)("p",null,"Contrary to previous operations, file locks are performed with the core ",(0,a.kt)("inlineCode",{parentName:"p"},"java.nio.channels.FileLock")," class so\nthey are not in effects. Apart from basic acquire/release actions, the core API offers, among other things, partial locks and overlap checks:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"val lockOp = (channel: AsynchronousFileChannel) =>\n  for {\n    isShared     <- channel.lock().bracket(_.release.ignore)(l => IO.succeed(l.isShared))\n    _            <- putStrLn(isShared.toString)                                      // false\n\n    managed      = Managed.make(channel.lock(position = 0, size = 10, shared = false))(_.release.ignore)\n    isOverlaping <- managed.use(l => IO.succeed(l.overlaps(5, 20)))\n    _            <- putStrLn(isOverlaping.toString)                                  // true\n  } yield ()\n")),(0,a.kt)("p",null,"Also it's worth mentioning that we are treating ",(0,a.kt)("inlineCode",{parentName:"p"},"FileLock")," as a resource here.\nFor demonstration purposes we handled it in two different ways: using ",(0,a.kt)("inlineCode",{parentName:"p"},"bracket")," and creating ",(0,a.kt)("inlineCode",{parentName:"p"},"Managed")," for this."))}d.isMDXComponent=!0}}]);