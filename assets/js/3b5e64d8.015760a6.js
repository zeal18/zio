"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[16626],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>g});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(a),u=i,g=m["".concat(l,".").concat(u)]||m[u]||d[u]||r;return a?n.createElement(g,o(o({ref:t},c),{},{components:a})):n.createElement(g,o({ref:t},c))}));function g(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},48381:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));const r={id:"migration-guide",title:"Migration guide"},o="Migration from v3.x.x.x",s={unversionedId:"zio-aws/migration-guide",id:"zio-aws/migration-guide",title:"Migration guide",description:"There are some major changes compared to the ZIO 1 version (v3.x.x.x and v4.x.x.x). This section contains detailed information about what changed and how to modify existing code.",source:"@site/docs/zio-aws/migration_guide.md",sourceDirName:"zio-aws",slug:"/zio-aws/migration-guide",permalink:"/zio-aws/migration-guide",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-aws/migration_guide.md",tags:[],version:"current",frontMatter:{id:"migration-guide",title:"Migration guide"},sidebar:"ecosystem-sidebar",previous:{title:"Changelog",permalink:"/zio-aws/changelog"},next:{title:"ZIO Actors",permalink:"/zio-actors/"}},l={},p=[{value:"New package names",id:"new-package-names",level:2},{value:"New getter names",id:"new-getter-names",level:2},{value:"New service pattern",id:"new-service-pattern",level:2},{value:"Optional parameters",id:"optional-parameters",level:2},{value:"Newtypes",id:"newtypes",level:2},{value:"Aspects",id:"aspects",level:2},{value:"New built-in aspects",id:"new-built-in-aspects",level:3},{value:"Changes in defining aspects",id:"changes-in-defining-aspects",level:3},{value:"New config library",id:"new-config-library",level:2}],c={toc:p},m="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(m,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"migration-from-v3xxx"},"Migration from v3.x.x.x"),(0,i.kt)("p",null,"There are some major changes compared to the ZIO 1 version (v3.x.x.x and v4.x.x.x). This section contains detailed information about what changed and how to modify existing code."),(0,i.kt)("h2",{id:"new-package-names"},"New package names"),(0,i.kt)("p",null,"Previously the zio-aws packages had the root package ",(0,i.kt)("inlineCode",{parentName:"p"},"io.github.vigoo.zioaws"),". By moving to the ZIO organisation this changed to be simply ",(0,i.kt)("inlineCode",{parentName:"p"},"zio.aws"),". "),(0,i.kt)("p",null,"So imports for something using the EC2 and ElasticBeanstalk APIs would change from:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import io.github.vigoo.zioaws.core._\nimport io.github.vigoo.zioaws.ec2.Ec2\nimport io.github.vigoo.zioaws.ec2.model._\nimport io.github.vigoo.zioaws.elasticbeanstalk.ElasticBeanstalk\nimport io.github.vigoo.zioaws.elasticbeanstalk.model._\n")),(0,i.kt)("p",null,"to "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.aws.core._\nimport zio.aws.ec2.Ec2\nimport zio.aws.ec2.model._\nimport zio.aws.ec2.model.primitives._\nimport zio.aws.elasticbeanstalk.ElasticBeanstalk\nimport zio.aws.elasticbeanstalk.model._\nimport zio.aws.elasticbeanstalk.model.primitives._\n")),(0,i.kt)("p",null,"Some other changes to the imports may be necessary because of switching to the new service pattern of ZIO, described below."),(0,i.kt)("h2",{id:"new-getter-names"},"New getter names"),(0,i.kt)("p",null,"In previous version of zio-aws the generated models provided to ways to access fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a ZIO effect that failed if the value is ",(0,i.kt)("inlineCode",{parentName:"li"},"None")," with the name of the field (for example ",(0,i.kt)("inlineCode",{parentName:"li"},".instanceId"),")"),(0,i.kt)("li",{parentName:"ul"},"a simple value accessor returning an ",(0,i.kt)("inlineCode",{parentName:"li"},"Option")," value with the ",(0,i.kt)("inlineCode",{parentName:"li"},"Value")," suffix (for example ",(0,i.kt)("inlineCode",{parentName:"li"},".instanceIdValue"),")")),(0,i.kt)("p",null,"This has been changed to match the convention used in ",(0,i.kt)("inlineCode",{parentName:"p"},"zio-k8s")," to the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the ZIO effect for requiring that a field has value now has the ",(0,i.kt)("inlineCode",{parentName:"li"},"get")," prefix (for example ",(0,i.kt)("inlineCode",{parentName:"li"},".getInstanceId"),")"),(0,i.kt)("li",{parentName:"ul"},"the value with the field name is the simple accessor returning the optional value: (for example ",(0,i.kt)("inlineCode",{parentName:"li"},".instanceId"),")")),(0,i.kt)("p",null,"So for example the following code that prints information about EC2 instances:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'for {\n    id <- instance.instanceId\n    typ <- instance.instanceType\n    launchTime <- instance.launchTime\n    _ <- console.putStrLn(s"  instance $id:").ignore\n    _ <- console.putStrLn(s"    type: $typ").ignore\n    _ <- console.putStrLn(s"    launched at: $launchTime").ignore\n} yield ()\n')),(0,i.kt)("p",null,"would have to be changed to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'for {\n    id <- instance.getInstanceId\n    typ <- instance.getInstanceType\n    launchTime <- instance.getLaunchTime\n    _ <- Console.printLine(s"  instance $id:").ignore\n    _ <- Console.printLine(s"    type: $typ").ignore\n    _ <- Console.printLine(s"    launched at: $launchTime").ignore\n} yield ()\n')),(0,i.kt)("h2",{id:"new-service-pattern"},"New service pattern"),(0,i.kt)("p",null,"Previous versions were following the ",(0,i.kt)("em",{parentName:"p"},"ZIO module pattern 1.0"),", so all the generated AWS services consisted of a type alias using ",(0,i.kt)("inlineCode",{parentName:"p"},"Has"),", a trait called ",(0,i.kt)("inlineCode",{parentName:"p"},"Service")," and a package object with the service's name. With ZIO 2 we no longer have ",(0,i.kt)("inlineCode",{parentName:"p"},"Has")," and the recommended way to structure services was changed to the simple new service pattern, where each service is just a ",(0,i.kt)("inlineCode",{parentName:"p"},"trait")," and one or more implementation classes, constructed by layers."),(0,i.kt)("p",null,"In practice this means that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"instead of the package object with lower-case name, the accessor functions are now in the service companion object (",(0,i.kt)("inlineCode",{parentName:"li"},"ElasticBeanstalk.describeApplications")," instead of ",(0,i.kt)("inlineCode",{parentName:"li"},"elasticbeanstalk.describeApplications"),")"),(0,i.kt)("li",{parentName:"ul"},"same for the layers, for example ",(0,i.kt)("inlineCode",{parentName:"li"},"Ec2.live")," instead of ",(0,i.kt)("inlineCode",{parentName:"li"},"ec2.live")),(0,i.kt)("li",{parentName:"ul"},"the service trait has the name of the service (for example ",(0,i.kt)("inlineCode",{parentName:"li"},"Ec2"),") instead of ",(0,i.kt)("inlineCode",{parentName:"li"},"Service")," ")),(0,i.kt)("p",null,"The new service pattern is also applied to the core services like ",(0,i.kt)("inlineCode",{parentName:"p"},"AwsConfig")," and the http implementations."),(0,i.kt)("h2",{id:"optional-parameters"},"Optional parameters"),(0,i.kt)("p",null,"A very large part of the fields of AWS models are optional. These previously had the type ",(0,i.kt)("inlineCode",{parentName:"p"},"Option"),", and although for extracting data from them the library already had the generated getters, constructing these data types still required wrapping most of the parameters in ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(...)"),". To reduce this boilerplate zio-aws now uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"Optional")," type instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"Option"),", which was first used in ",(0,i.kt)("a",{parentName:"p",href:"https://coralogix.github.io/zio-k8s/docs/overview/overview_resources#model"},"zio-k8s"),". Now the two libraries share the same type which was moved to ",(0,i.kt)("a",{parentName:"p",href:"https://zio.github.io/zio-prelude/"},"zio-prelude"),"."),(0,i.kt)("p",null,"The following example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"kinesis.describeStreamConsumer(\n  DescribeStreamConsumerRequest(\n    consumerName = Some(consumerName),\n    streamARN = Some(streamDescription.streamDescriptionValue.streamARNValue)\n  )\n)\n")),(0,i.kt)("p",null,"becomes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"Kinesis.describeStreamConsumer(\n  DescribeStreamConsumerRequest(\n    consumerName = consumerName,\n    streamARN = streamDescription.streamDescription.streamARN\n  )\n)\n")),(0,i.kt)("h2",{id:"newtypes"},"Newtypes"),(0,i.kt)("p",null,"Previously zio-aws generated simple Scala type aliases for primitive types in the AWS SDKs. For example the ",(0,i.kt)("inlineCode",{parentName:"p"},"TableName")," type in ",(0,i.kt)("inlineCode",{parentName:"p"},"zio-aws-dynamodb")," was just a type alias for ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"package io.github.vigoo.zioaws.dynamodb.model\n\npackage object primitives {\n  type TableName = String\n}\n")),(0,i.kt)("p",null,"The new version uses ",(0,i.kt)("a",{parentName:"p",href:"https://zio.github.io/zio-prelude/docs/newtypes/"},"zio-prelude's newtype wrappers")," to provide better type safety:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"package zio.aws.dynamodb.model\n\npackage object primitives {\n  object TableName extends Subtype[String]\n  type TableName = TableName.Type\n}\n")),(0,i.kt)("p",null,"In practice this means that we have to explicitly wrap these primitive values, for example instead of:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'elasticbeanstalk.describeApplications(\n  DescribeApplicationsRequest(applicationNames = Some(List("my-service")))\n)\n')),(0,i.kt)("p",null,"now we have to write"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'ElasticBeanstalk.describeApplications(\n  DescribeApplicationsRequest(applicationNames = List(ApplicationName("my-service")))\n)\n')),(0,i.kt)("p",null,"and if we need to convert them to the underlying primitive type we need to call ",(0,i.kt)("inlineCode",{parentName:"p"},"unwrap"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"ResourceId.unwrap(id)\n")),(0,i.kt)("h2",{id:"aspects"},"Aspects"),(0,i.kt)("p",null,"zio-aws introduced ",(0,i.kt)("inlineCode",{parentName:"p"},"AwsCallAspect")," soon after Adam Fraser's ",(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=gcqWdNwNEPg&t=2s"},"talk")," but it was a custom implementation, defined as:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"trait AwsCallAspect[-R] { self =>\n  def apply[R1 <: R, A](\n    f: ZIO[R1, AwsError, Described[A]]\n  ): ZIO[R1, AwsError, Described[A]]\n\n  // ...\n}\n")),(0,i.kt)("p",null,"These aspects can be applied to whole zio-aws service layers to add logging, metrics, retries etc for every AWS Java SDK call."),(0,i.kt)("p",null,"The ZIO 2.0.0 version is now using ZIO's built-in aspect support as a base:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"type AwsCallAspect[-R] =\n  ZIOAspect[Nothing, R, AwsError, AwsError, Nothing, Described[_]]\n")),(0,i.kt)("h3",{id:"new-built-in-aspects"},"New built-in aspects"),(0,i.kt)("p",null,"With ZIO 2 we have logging and metrics support built-in, so zio-aws now provides ready to use aspects for logging and monitoring AWS calls:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val callLogging: AwsCallAspect[Any]\ndef callDuration(prefix: String, boundaries: MetricKeyType.Histogram.Boundaries): AwsCallAspect[Any]\n")),(0,i.kt)("h3",{id:"changes-in-defining-aspects"},"Changes in defining aspects"),(0,i.kt)("p",null,"The following example aspect uses ",(0,i.kt)("inlineCode",{parentName:"p"},"rezilience")," to add circuit breaking for an AWS service:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"def circuitBreaking(cb: CircuitBreaker[AwsError]): AwsCallAspect[Any] =\n  new AwsCallAspect[Any] {\n    override final def apply[R1 <: Any, A](\n      f: ZIO[R1, AwsError, Described[A]]\n    ): ZIO[R1, AwsError, Described[A]] =\n      cb(f).mapError(policyError =>\n        AwsError.fromThrowable(policyError.toException)\n      )\n  }\n")),(0,i.kt)("p",null,"because of the changed base type for ",(0,i.kt)("inlineCode",{parentName:"p"},"AwsCallAspect")," with the new version the same aspect is defined like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"def circuitBreaking(cb: CircuitBreaker[AwsError]): AwsCallAspect[Any] =\n  new AwsCallAspect[Any] {\n    override final def apply[R, E >: AwsError <: AwsError, A <: Described[_]](\n      f: ZIO[R, E, A]\n    )(implicit trace: Trace): ZIO[R, E, A] =\n      cb(f).mapError(policyError =>\n        AwsError.fromThrowable(policyError.toException)\n      )\n  }\n")),(0,i.kt)("p",null,"The main differences:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"requiring the implicit ",(0,i.kt)("inlineCode",{parentName:"li"},"Trace")," "),(0,i.kt)("li",{parentName:"ul"},"the constraints on the error and result types are now expressed as type bounds because the ZIO aspect is more generic")),(0,i.kt)("h2",{id:"new-config-library"},"New config library"),(0,i.kt)("p",null,"The 3.x series of zio-aws was using ",(0,i.kt)("inlineCode",{parentName:"p"},"zio-config 1.x"),". The recently released 4.x series was using ",(0,i.kt)("inlineCode",{parentName:"p"},"zio-config 2.x")," which is the ZIO 1 version of the config library's new API; The ZIO 2 version of zio-aws uses ",(0,i.kt)("inlineCode",{parentName:"p"},"zio-config 3.x")," which is the same new config API but for ZIO 2."),(0,i.kt)("p",null,"This means that coming from zio-aws 3.x requires upgrading to the new config API. For more information about the changes in zio-config, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-config/releases/tag/v2.0.0-RC1"},"see it's release notes"),"."))}d.isMDXComponent=!0}}]);