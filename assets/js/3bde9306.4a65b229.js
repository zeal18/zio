"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[45788],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(a),f=i,u=m["".concat(l,".").concat(f)]||m[f]||p[f]||r;return a?n.createElement(u,o(o({ref:t},d),{},{components:a})):n.createElement(u,o({ref:t},d))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}f.displayName="MDXCreateElement"},65848:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var n=a(87462),i=(a(67294),a(3905));const r={id:"codec-customization",title:"Codec Customization"},o="Default encoding",s={unversionedId:"zio-dynamodb/codec-customization",id:"zio-dynamodb/codec-customization",title:"Codec Customization",description:"Sealed trait members that are case classes",source:"@site/docs/zio-dynamodb/codec-customization.md",sourceDirName:"zio-dynamodb",slug:"/zio-dynamodb/codec-customization",permalink:"/zio-dynamodb/codec-customization",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-dynamodb/codec-customization.md",tags:[],version:"current",frontMatter:{id:"codec-customization",title:"Codec Customization"},sidebar:"ecosystem-sidebar",previous:{title:"Getting Started",permalink:"/zio-dynamodb/getting-started"},next:{title:"Transactions",permalink:"/zio-dynamodb/transactions"}},l={},c=[{value:"Sealed trait members that are case classes",id:"sealed-trait-members-that-are-case-classes",level:2},{value:"Sealed trait members that are case objects",id:"sealed-trait-members-that-are-case-objects",level:2},{value:"Sealed trait members that are case classes",id:"sealed-trait-members-that-are-case-classes-1",level:2},{value:"Sealed trait members that are all case objects",id:"sealed-trait-members-that-are-all-case-objects",level:2}],d={toc:c},m="wrapper";function p(e){let{components:t,...a}=e;return(0,i.kt)(m,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"default-encoding"},"Default encoding"),(0,i.kt)("h2",{id:"sealed-trait-members-that-are-case-classes"},"Sealed trait members that are case classes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"sealed trait TrafficLight\nfinal case class Green(rgb: Int) extends TrafficLight \nfinal case class Red(rgb: Int) extends TrafficLight\nfinal case class Box(trafficLightColour: TrafficLight)\n")),(0,i.kt)("p",null,"The default encoding for ",(0,i.kt)("inlineCode",{parentName:"p"},"Box(Green(42))")," is:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Map(trafficLightColour -> Map(String(Green) -> Map(String(rgb) -> Number(42))))")),(0,i.kt)("p",null,"Here an intermediate map is used to identify the member of ",(0,i.kt)("inlineCode",{parentName:"p"},"TraficLight")," using the member class name ie ",(0,i.kt)("inlineCode",{parentName:"p"},"Map(String(Green) -> Map(...))")),(0,i.kt)("h2",{id:"sealed-trait-members-that-are-case-objects"},"Sealed trait members that are case objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"sealed trait TrafficLight\ncase object GREEN extends TrafficLight \ncase object RED extends TrafficLight\nfinal case class Box(trafficLightColour: TrafficLight)\n")),(0,i.kt)("p",null,"The default encoding for ",(0,i.kt)("inlineCode",{parentName:"p"},"Box(GREEN)")," is:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Map(trafficLightColour -> Map(String(GREEN) -> Null))")),(0,i.kt)("p",null,"Here an intermediate map is used to identify the member of ",(0,i.kt)("inlineCode",{parentName:"p"},"TraficLight")," ie ",(0,i.kt)("inlineCode",{parentName:"p"},"Map(String(GREEN) -> Null)"),"\nNote that the ",(0,i.kt)("inlineCode",{parentName:"p"},"Null")," is used as in this case we do not care about the value."),(0,i.kt)("h1",{id:"customising-encodings-via-annotations"},"Customising encodings via annotations"),(0,i.kt)("p",null,"Encodings can be customised through the use of the following annotations ",(0,i.kt)("inlineCode",{parentName:"p"},"@discriminator"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"@enumOfCaseObjects")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@id"),".\nThese annotations are useful when working with a legacy DynamoDB database."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@discriminator")," encodings does not introduce another map for the purposes of identification but rather adds another\ndiscriminator field to the attribute Map."),(0,i.kt)("p",null,"Concrete examples of using the ",(0,i.kt)("inlineCode",{parentName:"p"},"@discriminator"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"@enumOfCaseObjects")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@id")," annotations can be seen below."),(0,i.kt)("h2",{id:"sealed-trait-members-that-are-case-classes-1"},"Sealed trait members that are case classes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'@discriminator("light_type")\nsealed trait TrafficLight\nfinal case class Green(rgb: Int) extends TrafficLight\n@id("red_traffic_light")\nfinal case class Red(rgb: Int) extends TrafficLight\nfinal case class Amber(@id("red_green_blue") rgb: Int) extends TrafficLight\nfinal case class Box(trafficLightColour: TrafficLight)\n')),(0,i.kt)("p",null,"encoding for an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Box(Green(42))")," would be:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Map(trafficLightColour -> Map(String(rgb) -> Number(42), String(light_type) -> String(Green)))")),(0,i.kt)("p",null,"We can specify the field name used to identify the case class through the ",(0,i.kt)("inlineCode",{parentName:"p"},"@discriminator")," annotation. The discriminator\nencoding removes the intermediate map and inserts a new field with a name specified by discriminator annotation and a\nvalue that identifies the member which defaults to the class name."),(0,i.kt)("p",null,"This can be further customised using the ",(0,i.kt)("inlineCode",{parentName:"p"},"@id")," annotation - encoding for an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Box(Red(42))")," would be:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Map(trafficLightColour -> Map(String(rgb) -> Number(42), String(light_type) -> String(red_traffic_light)))")),(0,i.kt)("p",null,"The encoding for case class field names can also be customised via ",(0,i.kt)("inlineCode",{parentName:"p"},"@id")," - encoding for an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Box(Amber(42))")," would be:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Map(trafficLightColour -> Map(String(red_green_blue) -> Number(42), String(light_type) -> String(Amber)))")),(0,i.kt)("h2",{id:"sealed-trait-members-that-are-all-case-objects"},"Sealed trait members that are all case objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'@enumOfCaseObjects\nsealed trait TrafficLight\ncase object GREEN extends TrafficLight \n@id("red_traffic_light")\ncase object RED extends TrafficLight\nfinal case class Box(trafficLightColour: TrafficLight)\n')),(0,i.kt)("p",null,"We can get a more compact and intuitive encoding of trait members that are case objects by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"@enumOfCaseObjects"),"\nannotation which encodes to just a value that is the member name. Encoding for an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Box(GREEN)")," would be:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Map(trafficLightColour -> String(GREEN))")),(0,i.kt)("p",null,"This can be further customised by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"@id")," annotation again - encoding for ",(0,i.kt)("inlineCode",{parentName:"p"},"Box(RED)")," would be"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Map(trafficLightColour -> String(red_traffic_light))")))}p.isMDXComponent=!0}}]);