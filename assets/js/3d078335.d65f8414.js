"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[57309],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(r),c=a,h=d["".concat(s,".").concat(c)]||d[c]||m[c]||i;return r?n.createElement(h,o(o({ref:t},p),{},{components:r})):n.createElement(h,o({ref:t},p))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},23105:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var n=r(87462),a=(r(67294),r(3905));const i={id:"index",title:"Introduction to ZIO SQS",sidebar_label:"ZIO SQS"},o=void 0,l={unversionedId:"zio-sqs/index",id:"zio-sqs/index",title:"Introduction to ZIO SQS",description:"This library is a ZIO-powered client for AWS SQS. It is built on top of the AWS SDK for Java 2.0 via the automatically generated wrappers from zio-aws.",source:"@site/docs/zio-sqs/index.md",sourceDirName:"zio-sqs",slug:"/zio-sqs/",permalink:"/zio-sqs/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-sqs/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"Introduction to ZIO SQS",sidebar_label:"ZIO SQS"},sidebar:"ecosystem-sidebar",previous:{title:"Deep dive",permalink:"/zio-sql/deep-dive"},next:{title:"Introduction",permalink:"/zio-schema/"}},s={},u=[{value:"Add the dependency",id:"add-the-dependency",level:2},{value:"How to use",id:"how-to-use",level:2},{value:"Publish messages",id:"publish-messages",level:3},{value:"Producer",id:"producer",level:4},{value:"ProducerEvent",id:"producerevent",level:4},{value:"ProducerError",id:"producererror",level:4},{value:"Publish Example",id:"publish-example",level:4},{value:"Consume messages",id:"consume-messages",level:3},{value:"Full example",id:"full-example",level:3}],p={toc:u},d="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This library is a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/zio/zio"},"ZIO"),"-powered client for AWS SQS. It is built on top of the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/basics.html"},"AWS SDK for Java 2.0")," via the automatically generated wrappers from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/vigoo/zio-aws"},"zio-aws"),"."),(0,a.kt)("h2",{id:"add-the-dependency"},"Add the dependency"),(0,a.kt)("p",null,"To use ",(0,a.kt)("inlineCode",{parentName:"p"},"zio-sqs"),", add the following line in your ",(0,a.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'libraryDependencies += "dev.zio" %% "zio-sqs" % "0.5.0"\n')),(0,a.kt)("h2",{id:"how-to-use"},"How to use"),(0,a.kt)("p",null,"In order to use the connector, you need to provide your program with a configured SQS client as an ",(0,a.kt)("inlineCode",{parentName:"p"},"Sqs")," ZLayer. You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"io.github.vigoo.zioaws.sqs.live")," to use default AWS SDK settings or use ",(0,a.kt)("inlineCode",{parentName:"p"},".customized")," (refer to the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/creating-clients.html"},"AWS SDK Documentation")," if you need help customizing it). See also the ",(0,a.kt)("a",{parentName:"p",href:"https://zio.dev/docs/howto/howto_use_layers"},"ZIO documentation")," on how to use layers."),(0,a.kt)("h3",{id:"publish-messages"},"Publish messages"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"Producer.make")," to instantiate an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"Producer")," trait that can be used to publish objects of type ",(0,a.kt)("inlineCode",{parentName:"p"},"T")," to the queue."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"def make[R, T](\n    queueUrl: String,\n    serializer: Serializer[T],\n    settings: ProducerSettings = ProducerSettings()\n  ): ZManaged[R with Sqs with Clock, Throwable, Producer[T]]\n")),(0,a.kt)("p",null,"where:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"queueUrl: String")," - an SQS queue URL")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"serializer: Serializer[T]")," - an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"zio.sqs.serialization.Serializer")," that can be used to convert an object of type ",(0,a.kt)("inlineCode",{parentName:"p"},"T")," to a string."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"  trait Serializer[T] {\n    def apply(t: T): String\n  }\n")),(0,a.kt)("p",{parentName:"li"},"If a published message is already a string, ",(0,a.kt)("inlineCode",{parentName:"p"},"Serializer.serializeString")," can be used.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"settings: ProducerSettings")," - a set of settings (",(0,a.kt)("inlineCode",{parentName:"p"},"ProducerSettings"),") used to configure the producer."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"batchSize: Int")," - The size of the batch to use, ","[1-10]"," (default: 10)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"duration: Duration")," - Time to wait for the batch to be full (have the specified batchSize) (default: 500 milliseconds)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"parallelism: Int")," - The number of concurrent requests to make to SQS (default: 16)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"retryDelay: Duration")," - Time to wait before retrying event republishing if it failed with a recoverable error (default: 250 milliseconds).\nThe errors returned from SQS could either recoverable or not. An example of recoverable error -- when the server returned the code: ",(0,a.kt)("inlineCode",{parentName:"li"},"ServiceUnavailable")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"retryMaxCount: Int")," - The number of retries to make for a posted event (default: 10).")))),(0,a.kt)("h4",{id:"producer"},"Producer"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Producer")," contains two set of methods:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"methods that fail the resulting ",(0,a.kt)("em",{parentName:"p"},"Task")," or ",(0,a.kt)("em",{parentName:"p"},"Stream")," if SQS server returns an error for a published event."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"def produce(e: ProducerEvent[T]): Task[ProducerEvent[T]]")," - Publishes a single event and fails the task.\nFails the ",(0,a.kt)("inlineCode",{parentName:"li"},"Task")," if the server returns an error."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"def produceBatch(es: Iterable[ProducerEvent[T]]): Task[List[ProducerEvent[T]]]")," - Publishes a batch of events.\nFails the ",(0,a.kt)("inlineCode",{parentName:"li"},"Task")," if the server returns an error for any of the provided events."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"def sendStream: Stream[Throwable, ProducerEvent[T]] => ZStream[Any, Throwable, ProducerEvent[T]]")," - Stream that takes the events and produces a stream with published events.\nFails if the server returns an error for any of the published events."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"def sendSink: ZSink[Any, Throwable, Nothing, Iterable[ProducerEvent[T]], Unit]")," - Sink that can be used to publish events.\nFails if the server returns an error for any of the published events."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"methods that do not fail the operation but return ",(0,a.kt)("inlineCode",{parentName:"p"},"ErrorOrEvent[T]")," (defied as ",(0,a.kt)("inlineCode",{parentName:"p"},"Either[ProducerError[T], ProducerEvent[T]]"),")."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"def sendStreamE: Stream[Throwable, ProducerEvent[T]] => ZStream[Any, Throwable, ErrorOrEvent[T]]")," - Stream that takes the events and produces a stream with the results.\nDoesn't fail if the server returns an error for any of the published events."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"def produceBatchE(es: Iterable[ProducerEvent[T]]): Task[List[ErrorOrEvent[T]]]")," - Publishes a batch of events. Completes when all input events were processed (published to the server or failed with an error).\nDoesn't fail the ",(0,a.kt)("inlineCode",{parentName:"li"},"Task")," if the server returns an error for any of the provided events.")))),(0,a.kt)("p",null,"Producer tries to accumulate messages in batches and send them to the server.\nIf messages should be sent one by one and batching is not expected, set ",(0,a.kt)("inlineCode",{parentName:"p"},"ProducerSettings.batchSize")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,a.kt)("h4",{id:"producerevent"},"ProducerEvent"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ProducerEvent[T]")," is an event that is published to SQS and contains the following parameters that could be configured:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"data: T")," - Object to publish to SQS. A serializer for this type should be provided when a ",(0,a.kt)("inlineCode",{parentName:"li"},"Producer")," is instantiated."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"attributes: Map[String, MessageAttributeValue]")," - A map of ",(0,a.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-attributes.html"},"attributes")," to set."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"groupId: Option[String]")," - Assigns a specific ",(0,a.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagegroupid-property.html"},"message group")," to the message."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"deduplicationId: Option[String]")," - Token used for ",(0,a.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html"},"deduplication")," of sent messages.")),(0,a.kt)("p",null,"If a plain string should be published without any additional attributes a ",(0,a.kt)("inlineCode",{parentName:"p"},"ProducerEvent")," can be created directly:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'val str: String = "message to publish"\nval event: ProducerEvent = ProducerEvent(str)\n')),(0,a.kt)("h4",{id:"producererror"},"ProducerError"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ProducerError[T]")," represents an ",(0,a.kt)("a",{parentName:"p",href:"(https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_BatchResultErrorEntry.html)"},"error details")," that were returned from the server."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"senderFault: Boolean")," - Specifies whether the error happened due to the caller of the batch API action."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"code: String")," - An error code representing why the action failed on this entry."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"message: Option[String]")," - A message explaining why the action failed on this entry."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"event: ProducerEvent[T]")," - An event that triggered this error on the server.")),(0,a.kt)("h4",{id:"publish-example"},"Publish Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import io.github.vigoo.zioaws\nimport io.github.vigoo.zioaws.sqs.Sqs\nimport zio.clock.Clock\nimport zio.sqs._\nimport zio.sqs.producer._\nimport zio.sqs.serialization._\nimport zio.stream._\nimport zio.{ ExitCode, RIO, URIO, ZLayer }\n\nobject PublishExample extends zio.App {\n\n  val client: ZLayer[Any, Throwable, Sqs] = zioaws.netty.default >>>\n    zioaws.core.config.default >>>\n    zioaws.sqs.live\n\n  val events                                                = List("message1", "message2").map(ProducerEvent(_))\n  val queueName                                             = "TestQueue"\n  val program: RIO[Clock with Sqs, Either[Throwable, Unit]] = for {\n    queueUrl    <- Utils.getQueueUrl(queueName)\n    producer     = Producer.make(queueUrl, Serializer.serializeString)\n    errOrResult <- producer.use(p => p.sendStream(ZStream(events: _*)).runDrain.either)\n  } yield errOrResult\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    program.provideCustomLayer(client).exitCode\n}\n')),(0,a.kt)("h3",{id:"consume-messages"},"Consume messages"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"SqsStream.apply")," to get a stream of messages from a queue. It returns a ZIO ",(0,a.kt)("inlineCode",{parentName:"p"},"Stream")," that you can consume with all the operators available."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"def apply(\n  queueUrl: String,\n  settings: SqsStreamSettings = SqsStreamSettings()\n): ZStream[Sqs, Throwable, Message]\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"SqsStreamSettings")," allows your to configure a number of things:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"autoDelete"),": if ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),", messages will be automatically deleted from the queue when they're consumed by the stream, if ",(0,a.kt)("inlineCode",{parentName:"li"},"false")," you have to delete them explicitly by calling ",(0,a.kt)("inlineCode",{parentName:"li"},"SqsStream.deleteMessage")," (default ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"stopWhenQueueEmpty"),": if ",(0,a.kt)("inlineCode",{parentName:"li"},"true")," the stream will close when there the queue is empty, if ",(0,a.kt)("inlineCode",{parentName:"li"},"false")," the stream will go on forever (default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"attributeNames"),": see the ",(0,a.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ReceiveMessage.html"},"related page on AWS docs")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"maxNumberOfMessages"),": number of messages to query at once from SQS (default ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"messageAttributeNames"),": see the ",(0,a.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ReceiveMessage.html"},"related page on AWS docs")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"visibilityTimeout"),": see the ",(0,a.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html"},"related page on AWS docs")," (default ",(0,a.kt)("inlineCode",{parentName:"li"},"Some(30)"),". If set to ",(0,a.kt)("inlineCode",{parentName:"li"},"None"),", the queue's value will be used.)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"waitTimeSeconds"),": see the ",(0,a.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html"},"related page on AWS docs")," (default ",(0,a.kt)("inlineCode",{parentName:"li"},"Some(20)"),". If set to ",(0,a.kt)("inlineCode",{parentName:"li"},"None"),", the queue's value will be used.)")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.sqs.{SqsStream, SqsStreamSettings}\n\nSqsStream(\n  queueUrl,\n  SqsStreamSettings(stopWhenQueueEmpty = true, waitTimeSeconds = Some(3))\n).foreach(msg => UIO(println(msg.body)))\n")),(0,a.kt)("h3",{id:"full-example"},"Full example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import io.github.vigoo.zioaws\nimport io.github.vigoo.zioaws.core.config.CommonAwsConfig\nimport io.github.vigoo.zioaws.sqs.Sqs\nimport software.amazon.awssdk.auth.credentials.{ AwsBasicCredentials, StaticCredentialsProvider }\nimport software.amazon.awssdk.regions.Region\nimport zio.clock.Clock\nimport zio.sqs.producer.{ Producer, ProducerEvent }\nimport zio.sqs.serialization.Serializer\nimport zio.sqs.{ SqsStream, SqsStreamSettings, Utils }\nimport zio._\n\nobject TestApp extends zio.App {\n  val queueName = "TestQueue"\n\n  val client: ZLayer[Any, Throwable, Sqs] = zioaws.netty.default ++\n    ZLayer.succeed(\n      CommonAwsConfig(\n        region = Some(Region.of("ap-northeast-2")),\n        credentialsProvider = StaticCredentialsProvider.create(AwsBasicCredentials.create("key", "key")),\n        endpointOverride = None,\n        commonClientConfig = None\n      )\n    ) >>>\n    zioaws.core.config.configured() >>>\n    zioaws.sqs.live\n\n  val program: RIO[Sqs with Clock, Unit] = for {\n    _        <- Utils.createQueue(queueName)\n    queueUrl <- Utils.getQueueUrl(queueName)\n    producer  = Producer.make(queueUrl, Serializer.serializeString)\n    _        <- producer.use { p =>\n                  p.produce(ProducerEvent("hello"))\n                }\n    _        <- SqsStream(\n                  queueUrl,\n                  SqsStreamSettings(stopWhenQueueEmpty = true, waitTimeSeconds = Some(3))\n                ).foreach(msg => UIO(println(msg.body)))\n  } yield ()\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    program.provideCustomLayer(client).exitCode\n}\n')))}m.isMDXComponent=!0}}]);