"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[96574],{3905:(e,t,n)=>{n.d(t,{Zo:()=>o,kt:()=>h});var r=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},o=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,u=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),d=s(n),f=l,h=d["".concat(u,".").concat(f)]||d[f]||p[f]||a;return n?r.createElement(h,c(c({ref:t},o),{},{components:n})):r.createElement(h,c({ref:t},o))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,c=new Array(a);c[0]=f;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[d]="string"==typeof e?e:l,c[1]=i;for(var s=2;s<a;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},44796:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(87462),l=(n(67294),n(3905));const a={id:"built-in-schedules",title:"Built-in Schedules"},c=void 0,i={unversionedId:"reference/schedule/built-in-schedules",id:"reference/schedule/built-in-schedules",title:"Built-in Schedules",description:"succeed",source:"@site/docs/reference/schedule/built-in-schedules.md",sourceDirName:"reference/schedule",slug:"/reference/schedule/built-in-schedules",permalink:"/reference/schedule/built-in-schedules",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/schedule/built-in-schedules.md",tags:[],version:"current",frontMatter:{id:"built-in-schedules",title:"Built-in Schedules"},sidebar:"reference-sidebar",previous:{title:"Retrying",permalink:"/reference/schedule/retrying"},next:{title:"Schedule Combinators",permalink:"/reference/schedule/combinators"}},u={},s=[{value:"succeed",id:"succeed",level:2},{value:"fromFunction",id:"fromfunction",level:2},{value:"stop",id:"stop",level:2},{value:"once",id:"once",level:2},{value:"forever",id:"forever",level:2},{value:"recurs",id:"recurs",level:2},{value:"spaced",id:"spaced",level:2},{value:"fixed",id:"fixed",level:2},{value:"exponential",id:"exponential",level:2},{value:"fibonacci",id:"fibonacci",level:2},{value:"identity",id:"identity",level:2},{value:"unfold",id:"unfold",level:2}],o={toc:s},d="wrapper";function p(e){let{components:t,...n}=e;return(0,l.kt)(d,(0,r.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"succeed"},"succeed"),(0,l.kt)("p",null,"Returns a schedule that repeats one time, producing the specified constant value:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val constant = Schedule.succeed(5)\n")),(0,l.kt)("h2",{id:"fromfunction"},"fromFunction"),(0,l.kt)("p",null,"A schedule that always recurs, mapping input values through the specified function:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val inc = Schedule.fromFunction[Int, Int](_ + 1)\n")),(0,l.kt)("h2",{id:"stop"},"stop"),(0,l.kt)("p",null,"A schedule that does not recur, just stops and returns one ",(0,l.kt)("inlineCode",{parentName:"p"},"Unit")," element:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val stop = Schedule.stop\n")),(0,l.kt)("h2",{id:"once"},"once"),(0,l.kt)("p",null,"A schedule that recurs one time an returns one ",(0,l.kt)("inlineCode",{parentName:"p"},"Unit")," element:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val once = Schedule.once\n")),(0,l.kt)("h2",{id:"forever"},"forever"),(0,l.kt)("p",null,"A schedule that always recurs and produces number of recurrence at each run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val forever = Schedule.forever\n")),(0,l.kt)("h2",{id:"recurs"},"recurs"),(0,l.kt)("p",null,"A schedule that only recurs the specified number of times:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val recurs = Schedule.recurs(5)\n")),(0,l.kt)("h2",{id:"spaced"},"spaced"),(0,l.kt)("p",null,"A schedule that recurs continuously, each repetition spaced the specified duration from the last run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val spaced = Schedule.spaced(10.milliseconds)\n")),(0,l.kt)("h2",{id:"fixed"},"fixed"),(0,l.kt)("p",null,"A schedule that recurs on a fixed interval. Returns the number of repetitions of the schedule so far:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val fixed = Schedule.fixed(10.seconds)\n")),(0,l.kt)("h2",{id:"exponential"},"exponential"),(0,l.kt)("p",null,"A schedule that recurs using exponential backoff:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val exponential = Schedule.exponential(10.milliseconds)\n")),(0,l.kt)("h2",{id:"fibonacci"},"fibonacci"),(0,l.kt)("p",null,"A schedule that always recurs, increasing delays by summing the preceding two delays (similar to the fibonacci sequence). Returns the current duration between recurrences:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val fibonacci = Schedule.fibonacci(10.milliseconds)\n")),(0,l.kt)("h2",{id:"identity"},"identity"),(0,l.kt)("p",null,"A schedule that always decides to continue. It recurs forever, without any delay. ",(0,l.kt)("inlineCode",{parentName:"p"},"identity")," schedule consumes input, and emit the same as output (",(0,l.kt)("inlineCode",{parentName:"p"},"Schedule[Any, A, A]"),"):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val identity = Schedule.identity[Int]\n")),(0,l.kt)("h2",{id:"unfold"},"unfold"),(0,l.kt)("p",null,"A schedule that repeats one time from the specified state and iterator:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"val unfold = Schedule.unfold(0)(_ + 1)\n")))}p.isMDXComponent=!0}}]);