"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[20661],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),l=p(n),u=i,f=l["".concat(c,".").concat(u)]||l[u]||m[u]||a;return n?r.createElement(f,s(s({ref:t},d),{},{components:n})):r.createElement(f,s({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[l]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},49862:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=n(87462),i=(n(67294),n(3905));const a={id:"non-deterministic-test-data",title:"Non-deterministic Test Data"},s=void 0,o={unversionedId:"reference/test/aspects/non-deterministic-test-data",id:"reference/test/aspects/non-deterministic-test-data",title:"Non-deterministic Test Data",description:"The random process of the TestRandom is said to be deterministic since, with the initial seed, we can generate a sequence of predictable numbers. So with the same initial seed, it will generate the same sequence of numbers.",source:"@site/docs/reference/test/aspects/non-deterministic-test-data.md",sourceDirName:"reference/test/aspects",slug:"/reference/test/aspects/non-deterministic-test-data",permalink:"/reference/test/aspects/non-deterministic-test-data",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/aspects/non-deterministic-test-data.md",tags:[],version:"current",frontMatter:{id:"non-deterministic-test-data",title:"Non-deterministic Test Data"},sidebar:"reference-sidebar",previous:{title:"Ignoring Tests",permalink:"/reference/test/aspects/ignoring-tests"},next:{title:"Passing Failed Tests",permalink:"/reference/test/aspects/passing-failed-tests"}},c={},p=[],d={toc:p},l="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(l,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The random process of the ",(0,i.kt)("inlineCode",{parentName:"p"},"TestRandom")," is said to be deterministic since, with the initial seed, we can generate a sequence of predictable numbers. So with the same initial seed, it will generate the same sequence of numbers."),(0,i.kt)("p",null,"By default, the initial seed of the ",(0,i.kt)("inlineCode",{parentName:"p"},"TestRandom")," is fixed. So repeating a generator more and more results in the same sequence:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.test.{test, _}\nimport zio.test.TestAspect._\n\ntest("pseudo-random number generator with fixed initial seed") {\n  check(Gen.int(0, 100)) { n =>\n    ZIO.attempt(n).debug.map(_ => assertTrue(true))\n  }\n} @@\n  samples(5) @@\n  after(Console.printLine("----").orDie) @@\n  repeat(Schedule.recurs(1))\n')),(0,i.kt)("p",null,"Regardless of how many times we repeat this test, the output would be the same:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"99\n51\n81\n48\n51\n----\n99\n51\n81\n48\n51\n----\n+ pseudo-random numbers with fixed initial seed - repeated: 2\nRan 1 test in 522 ms: 1 succeeded, 0 ignored, 0 failed\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"nondeterministic")," test aspect, will change the seed of the pseudo-random generator before each test repetition:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.test.{ test, _ }\nimport zio.test.TestAspect._\n\ntest("pseudo-random number generator with random initial seed on each repetition") {\n  check(Gen.int(0, 100)) { n =>\n    ZIO.attempt(n).debug.map(_ => assertTrue(true))\n  }\n} @@\n  nondeterministic @@\n  samples(5) @@\n  after(Console.printLine("----").orDie) @@\n  repeat(Schedule.recurs(1))\n')),(0,i.kt)("p",null,"Here is a sample output, which we have different sequences of numbers on each run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"73\n9\n17\n33\n10\n----\n42\n85\n38\n2\n73\n----\n+ pseudo-random number generator with random initial seed on each repetition - repeated: 2\nRan 1 test in 733 ms: 1 succeeded, 0 ignored, 0 failed\n")))}m.isMDXComponent=!0}}]);