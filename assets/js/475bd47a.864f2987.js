"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[43703],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(n),f=o,g=u["".concat(c,".").concat(f)]||u[f]||l[f]||a;return n?r.createElement(g,i(i({ref:t},m),{},{components:n})):r.createElement(g,i({ref:t},m))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},60712:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={id:"consuming-kafka-topics-using-zio-streams",title:"Consuming Kafka topics using ZIO Streams"},i=void 0,s={unversionedId:"zio-kafka/consuming-kafka-topics-using-zio-streams",id:"zio-kafka/consuming-kafka-topics-using-zio-streams",title:"Consuming Kafka topics using ZIO Streams",description:"First, create a consumer using the ConsumerSettings instance:",source:"@site/docs/zio-kafka/consuming-kafka-topics-using-zio-streams.md",sourceDirName:"zio-kafka",slug:"/zio-kafka/consuming-kafka-topics-using-zio-streams",permalink:"/zio-kafka/consuming-kafka-topics-using-zio-streams",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-kafka/consuming-kafka-topics-using-zio-streams.md",tags:[],version:"current",frontMatter:{id:"consuming-kafka-topics-using-zio-streams",title:"Consuming Kafka topics using ZIO Streams"},sidebar:"ecosystem-sidebar",previous:{title:"Getting Started",permalink:"/zio-kafka/"},next:{title:"Example of Consuming, Producing and Committing Offsets",permalink:"/zio-kafka/example-of-consuming-producing-and-committing-offsets"}},c={},p=[],m={toc:p},u="wrapper";function l(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"First, create a consumer using the ConsumerSettings instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.*\nimport zio.kafka.consumer.{ Consumer, ConsumerSettings }\n\nval consumerSettings: ConsumerSettings = ConsumerSettings(List("localhost:9092")).withGroupId("group")\nval consumerScoped: ZIO[Scope, Throwable, Consumer] =\n  Consumer.make(consumerSettings)\nval consumer: ZLayer[Any, Throwable, Consumer] =\n  ZLayer.scoped(consumerScoped)\n')),(0,o.kt)("p",null,"The consumer returned from ",(0,o.kt)("inlineCode",{parentName:"p"},"Consumer.make")," is wrapped in a ",(0,o.kt)("inlineCode",{parentName:"p"},"ZLayer"),"\nto allow for easy composition with other ZIO environment components.\nYou may provide that layer to effects that require a consumer. Here's\nan example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.kafka.consumer._\nimport zio.kafka.serde._\n\nval data: Task[Chunk[CommittableRecord[String, String]]] = \n  Consumer.plainStream(Subscription.topics("topic"), Serde.string, Serde.string).take(50).runCollect\n    .provideSomeLayer(consumer)\n')),(0,o.kt)("p",null,"You may stream data from Kafka using the ",(0,o.kt)("inlineCode",{parentName:"p"},"plainStream")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.Console.printLine\nimport zio.kafka.consumer._\n\nConsumer.plainStream(Subscription.topics("topic150"), Serde.string, Serde.string)\n  .tap(cr => printLine(s"key: ${cr.record.key}, value: ${cr.record.value}"))\n  .map(_.offset)\n  .aggregateAsync(Consumer.offsetBatches)\n  .mapZIO(_.commit)\n  .runDrain\n')),(0,o.kt)("p",null,"To process partitions assigned to the consumer in parallel, you may use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Consumer#partitionedStream")," method, which creates a nested stream of partitions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.Console.printLine\nimport zio.kafka.consumer._\n\nConsumer.partitionedStream(Subscription.topics("topic150"), Serde.string, Serde.string)\n  .flatMapPar(Int.MaxValue) { case (topicPartition, partitionStream) =>\n    ZStream.fromZIO(printLine(s"Starting stream for topic \'${topicPartition.topic}\' partition ${topicPartition.partition}")) *>\n      partitionStream\n        .tap(record => printLine(s"key: ${record.key}, value: ${record.value}")) // Replace with a custom message handling effect\n        .map(_.offset)\n  }\n  .aggregateAsync(Consumer.offsetBatches)\n  .mapZIO(_.commit)\n  .runDrain\n')))}l.isMDXComponent=!0}}]);