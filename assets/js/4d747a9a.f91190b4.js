"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[95865],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),l=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return i.createElement(c.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),u=r,f=m["".concat(c,".").concat(u)]||m[u]||d[u]||a;return n?i.createElement(f,o(o({ref:t},p),{},{components:n})):i.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},92571:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var i=n(87462),r=(n(67294),n(3905));const a={id:"introduction",title:"Introduction to Writing ZIO Services",slug:"introduction"},o=void 0,s={unversionedId:"reference/service-pattern/introduction",id:"reference/service-pattern/introduction",title:"Introduction to Writing ZIO Services",description:"Defining services in ZIO is not very different from object-oriented style, it has the same principle: coding to an interface, not an implementation. Therefore, ZIO encourages us to implement this principle by using Service Pattern, which is quite similar to the object-oriented style.",source:"@site/docs/reference/service-pattern/index.md",sourceDirName:"reference/service-pattern",slug:"/reference/service-pattern/introduction",permalink:"/reference/service-pattern/introduction",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/service-pattern/index.md",tags:[],version:"current",frontMatter:{id:"introduction",title:"Introduction to Writing ZIO Services",slug:"introduction"},sidebar:"reference-sidebar",previous:{title:"Functional Design Patterns",permalink:"/reference/architecture/functional-design-patterns"},next:{title:"Service Pattern",permalink:"/reference/service-pattern/"}},c={},l=[{value:"Defining Services in OOP",id:"defining-services-in-oop",level:2},{value:"Defining Services in ZIO",id:"defining-services-in-zio",level:2}],p={toc:l},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Defining services in ZIO is not very different from object-oriented style, it has the same principle: coding to an interface, not an implementation. Therefore, ZIO encourages us to implement this principle by using ",(0,r.kt)("em",{parentName:"p"},"Service Pattern"),", which is quite similar to the object-oriented style."),(0,r.kt)("p",null,"Before diving into writing services in ZIO style, let's review how we define them in an object-oriented fashion in the next section."),(0,r.kt)("h2",{id:"defining-services-in-oop"},"Defining Services in OOP"),(0,r.kt)("p",null,"Here are the steps we take to implement a service in object-oriented programming:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Service Definition"),"\u2014 In object-oriented programming, we define services with traits. A service is a bundle of related functionality that is defined in a trait:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"trait FooService {\n\n}\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Service Implementation"),"\u2014 We implement these services by using classes:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"class FooServiceImpl extends FooService {\n    \n}\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Defining Dependencies"),"\u2014 If the creation of a service depends on other services, we can define these dependencies by using constructors:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"trait ServiceA {\n\n}\n\ntrait ServiceB {\n\n}\n\nclass FooServiceImpl(a: ServiceA, b: ServiceB) extends FooService {\n\n}\n")),(0,r.kt)("p",null,"In object-oriented programming, the best practice is to ",(0,r.kt)("em",{parentName:"p"},"program to an interface, not an implementation"),". So in the previous example, ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceA")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceB")," are interfaces, not concrete classes."),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Injecting Dependencies"),"\u2014 Now, the client of ",(0,r.kt)("inlineCode",{parentName:"li"},"FooServiceImpl")," service can provide its own implementation of ",(0,r.kt)("inlineCode",{parentName:"li"},"ServiceA")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"ServiceB"),", and inject them to the ",(0,r.kt)("inlineCode",{parentName:"li"},"FooServiceImpl")," constructor:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"class ServiceAImpl extends ServiceA\nclass ServiceBImpl extends ServiceB\nval fooService = new FooServiceImpl(new ServiceAImpl, new ServiceBImpl)\n")),(0,r.kt)("p",null,"Sometimes, as the number of dependent services grows and the dependency graph of our application becomes complicated, we need an automatic way of wiring and providing dependencies into the services of our application. In these situations, we might use a dependency injection framework to do all its magic machinery for us."),(0,r.kt)("h2",{id:"defining-services-in-zio"},"Defining Services in ZIO"),(0,r.kt)("p",null,"A service is a group of functions that deals with only one concern. Keeping the scope of each service limited to a single responsibility improves our ability to understand code, in that we need to focus only on one topic at a time without juggling too many concepts together in our head."),(0,r.kt)("p",null,"In functional Scala as well as in object-oriented programming the best practice is to ",(0,r.kt)("em",{parentName:"p"},"Program to an Interface, Not an Implementation"),". This is the most important design principle in software development and helps us to write maintainable code by:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Allowing the client to hold an ",(0,r.kt)("strong",{parentName:"p"},"interface as a contract")," and don't worry about the implementation. The interface signature determines all operations that should be done.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Enabling a developer to ",(0,r.kt)("strong",{parentName:"p"},"write more testable programs"),". When we write a test for our business logic we don't have to run and interact with real services like databases which makes our test run very slow. If our code is correct our test code should always pass, there should be no hidden variables or depend on outside sources. We can't know that the database is always running correctly. We don't want to fail our tests because of the failure of external service.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Providing the ability to ",(0,r.kt)("strong",{parentName:"p"},"write more modular applications"),". So we can plug in different implementations for different purposes without a major modification."))),(0,r.kt)("p",null,"It is not mandatory, but ZIO encourages us to follow this principle by bundling related functionality as an interface by using the ",(0,r.kt)("em",{parentName:"p"},"Service Pattern"),"."),(0,r.kt)("p",null,"The core idea is that a layer depends upon the interfaces exposed by the layers immediately below itself, but is completely unaware of its dependencies' internal implementations."),(0,r.kt)("p",null,"In object-oriented programming:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Service Definition")," is done by using ",(0,r.kt)("em",{parentName:"li"},"interfaces")," (Scala trait or Java Interface)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Service Implementation")," is done by implementing interfaces using ",(0,r.kt)("em",{parentName:"li"},"classes")," or creating ",(0,r.kt)("em",{parentName:"li"},"new object")," of the interface."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Defining Dependencies")," is done by using ",(0,r.kt)("em",{parentName:"li"},"constructors"),". They allow us to build classes, given their dependencies. This is called constructor-based dependency injection.")),(0,r.kt)("p",null,"We have a similar analogy in the Service Pattern, except instead of using ",(0,r.kt)("em",{parentName:"p"},"constructors")," we use ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"ZLayer"))," to define dependencies. So in ZIO fashion, we can think of ",(0,r.kt)("inlineCode",{parentName:"p"},"ZLayer")," as a service constructor."))}d.isMDXComponent=!0}}]);