"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[19651],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var g=o.createContext({}),p=function(e){var t=o.useContext(g),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(g.Provider,{value:t},e.children)},s="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,g=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),s=p(n),u=r,m=s["".concat(g,".").concat(u)]||s[u]||f[u]||i;return n?o.createElement(m,l(l({ref:t},c),{},{components:n})):o.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var a={};for(var g in t)hasOwnProperty.call(t,g)&&(a[g]=t[g]);a.originalType=e,a[s]="string"==typeof e?e:r,l[1]=a;for(var p=2;p<i;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},69697:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>l,default:()=>f,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var o=n(87462),r=(n(67294),n(3905));const i={id:"log-filter",title:"Log Filter"},l=void 0,a={unversionedId:"zio-logging/log-filter",id:"zio-logging/log-filter",title:"Log Filter",description:"A LogFilter represents function/conditions for log filtering.",source:"@site/docs/zio-logging/log-filter.md",sourceDirName:"zio-logging",slug:"/zio-logging/log-filter",permalink:"/zio-logging/log-filter",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-logging/log-filter.md",tags:[],version:"current",frontMatter:{id:"log-filter",title:"Log Filter"},sidebar:"ecosystem-sidebar",previous:{title:"Logger Context and Annotations",permalink:"/zio-logging/logger-context-and-annotations"},next:{title:"Console Logger",permalink:"/zio-logging/console-logger"}},g={},p=[{value:"Configuration",id:"configuration",level:2}],c={toc:p},s="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"LogFilter")," represents function/conditions for log filtering."),(0,r.kt)("p",null,"Following filter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.LogLevel\nimport zio.logging.LogFilter\n\nval filter = LogFilter.logLevelByName(\n    LogLevel.Debug,\n    "io.netty" -> LogLevel.Info, \n    "io.grpc.netty" -> LogLevel.Info,\n    "org.my.**.ServiceX" -> LogLevel.Trace, // glob-like (any paths) filter\n    "org.my.X*Layers" -> LogLevel.Info // glob-like (single or partial path) filter\n)\n')),(0,r.kt)("p",null,"will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Debug")," log level for everything except for log events with the logger name\nprefixed by either ",(0,r.kt)("inlineCode",{parentName:"p"},'List("io", "netty")')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'List("io", "grpc", "netty")')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'List("org", "my", "**", "ServiceX")')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'List("org", "my", "X*Layers")'),".\nLogger name is extracted from log annotation or ",(0,r.kt)("inlineCode",{parentName:"p"},"zio.Trace"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LogFilter.filter")," returns a version of ",(0,r.kt)("inlineCode",{parentName:"p"},"zio.ZLogger")," that only logs messages when this filter is satisfied."),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"the configuration for filter (",(0,r.kt)("inlineCode",{parentName:"p"},"zio.logging.LogFilter.LogLevelByNameConfig"),") has the following configuration structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n    # LogLevel values: ALL, FATAL, ERROR, WARN, INFO, DEBUG, TRACE, OFF\n    \n    # root LogLevel, default value: INFO\n    rootLevel = DEBUG \n    \n    # LogLevel configurations for specific logger names, or prefixes, default value: empty\n    mappings {\n      "io.netty" = "INFO"\n      "io.grpc.netty" = "INFO"\n    }\n}\n')),(0,r.kt)("p",null,"this configuration is equivalent to following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.LogLevel\nimport zio.logging.LogFilter\n\nval config =\n  LogFilter.LogLevelByNameConfig(LogLevel.Debug, Map("io.netty" -> LogLevel.Info, "io.grpc.netty" -> LogLevel.Info))\n\nval filter = LogFilter.logLevelByName(config)    \n')))}f.isMDXComponent=!0}}]);