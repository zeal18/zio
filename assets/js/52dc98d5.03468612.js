"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[54643],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=i,y=p["".concat(s,".").concat(d)]||p[d]||m[d]||r;return n?a.createElement(y,o(o({ref:t},c),{},{components:n})):a.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},92142:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=n(87462),i=(n(67294),n(3905));const r={id:"quill",title:"Quill"},o=void 0,l={unversionedId:"ecosystem/community/quill",id:"ecosystem/community/quill",title:"Quill",description:"Quil is a Compile-time Language Integrated Queries for Scala.",source:"@site/docs/ecosystem/community/quill.md",sourceDirName:"ecosystem/community",slug:"/ecosystem/community/quill",permalink:"/ecosystem/community/quill",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/ecosystem/community/quill.md",tags:[],version:"current",frontMatter:{id:"quill",title:"Quill"},sidebar:"ecosystem-sidebar",previous:{title:"MUnit ZIO",permalink:"/ecosystem/community/munit-zio"},next:{title:"Rezilience",permalink:"/ecosystem/community/rezilience"}},s={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2}],c={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/getquill/quill"},"Quil")," is a Compile-time Language Integrated Queries for Scala."),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Quill allows us to create SQL out of a Scala code during the ",(0,i.kt)("strong",{parentName:"p"},"compile-time"),". It provides the ",(0,i.kt)("em",{parentName:"p"},"Quoted Domain Specific Language (QDSL)")," to express queries in Scala and execute them in a target language."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Boilerplate-free mapping")," \u2014 The database schema is mapped using simple case classes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Quoted DSL")," \u2014 Queries are defined inside a quote block. Quill parses each quoted block of code (quotation) at compile-time and translates them to an internal Abstract Syntax Tree (AST)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Compile-time query generation")," \u2014 The ",(0,i.kt)("inlineCode",{parentName:"li"},"ctx.run")," call reads the quotation\u2019s AST and translates it to the target language at compile-time, emitting the query string as a compilation message. As the query string is known at compile-time, the runtime overhead is very low and similar to using the database driver directly."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Compile-time query validation")," \u2014 If configured, the query is verified against the database at compile-time and the compilation fails if it is not valid. The query validation does not alter the database state.")),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"In order to use this library with ZIO, we need to add the following lines in our ",(0,i.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'// Provides Quill contexts for ZIO.\nlibraryDependencies += "io.getquill" %% "quill-zio" % "3.9.0"\n\n// Provides Quill context that execute MySQL, PostgreSQL, SQLite, H2, SQL Server and Oracle queries inside of ZIO.\nlibraryDependencies += "io.getquill" %% "quill-jdbc-zio" % "3.9.0" \n\n// Provides Quill context that executes Cassandra queries inside of ZIO.\nlibraryDependencies += "io.getquill" %% "quill-cassandra-zio" % "3.9.0"\n')),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"First, to run this example, we should create the ",(0,i.kt)("inlineCode",{parentName:"p"},"Person")," table at the database initialization. Let's put the following lines into the ",(0,i.kt)("inlineCode",{parentName:"p"},"h2-schema.sql")," file at the",(0,i.kt)("inlineCode",{parentName:"p"},"src/main/resources")," path:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS Person(\n    name VARCHAR(255),\n    age int\n);\n")),(0,i.kt)("p",null,"In this example, we use in-memory database as our data source. So we just put these lines into the ",(0,i.kt)("inlineCode",{parentName:"p"},"application.conf")," at the ",(0,i.kt)("inlineCode",{parentName:"p"},"src/main/resources")," path:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-hocon"},"myH2DB {\n  dataSourceClassName = org.h2.jdbcx.JdbcDataSource\n  dataSource {\n    url = \"jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;INIT=RUNSCRIPT FROM 'classpath:h2-schema.sql'\"\n    user = sa\n  }\n}\n")),(0,i.kt)("p",null,"Now we are ready to run the example below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import io.getquill._\nimport io.getquill.context.ZioJdbc._\nimport zio.console.{Console, putStrLn}\nimport zio.{ExitCode, Has, URIO, ZIO}\n\nimport java.io.Closeable\nimport javax.sql\n\nobject QuillZIOExample extends zio.App {\n  val ctx = new H2ZioJdbcContext(Literal)\n\n  import ctx._\n\n  case class Person(name: String, age: Int)\n\n  val myApp: ZIO[Console with Has[sql.DataSource with Closeable], Exception, Unit] =\n    for {\n      _ <- ctx.run(\n        quote {\n          liftQuery(List(Person("Alex", 25), Person("Sarah", 23)))\n            .foreach(r =>\n              query[Person].insert(r)\n            )\n        }\n      ).onDS\n      result <- ctx.run(\n        quote(query[Person].filter(p => p.name == "Sarah"))\n      ).onDS\n      _ <- putStrLn(result.toString)\n    } yield ()\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    myApp\n      .provideCustom(DataSourceLayer.fromPrefix("myH2DB"))\n      .exitCode\n}\n')))}m.isMDXComponent=!0}}]);