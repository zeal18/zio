"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[47322],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>g});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(a),u=i,g=d["".concat(p,".").concat(u)]||d[u]||m[u]||o;return a?n.createElement(g,r(r({ref:t},c),{},{components:a})):n.createElement(g,r({ref:t},c))}));function g(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:i,r[1]=s;for(var l=2;l<o;l++)r[l]=a[l];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},53817:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=a(87462),i=(a(67294),a(3905));const o={id:"index",title:"Introduction to ZIO Optics",sidebar_label:"ZIO Optics"},r=void 0,s={unversionedId:"zio-optics/index",id:"zio-optics/index",title:"Introduction to ZIO Optics",description:"ZIO Optics is a library that makes it easy to modify parts of larger data structures based on a single representation of an optic as a combination of a getter and setter.",source:"@site/docs/zio-optics/index.md",sourceDirName:"zio-optics",slug:"/zio-optics/",permalink:"/zio-optics/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-optics/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"Introduction to ZIO Optics",sidebar_label:"ZIO Optics"},sidebar:"ecosystem-sidebar",previous:{title:"Use Cases",permalink:"/zio-nio/use-cases"},next:{title:"Understanding Optics",permalink:"/zio-optics/understanding-optics"}},p={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2},{value:"Resources",id:"resources",level:2}],c={toc:l},d="wrapper";function m(e){let{components:t,...a}=e;return(0,i.kt)(d,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-optics"},"ZIO Optics")," is a library that makes it easy to modify parts of larger data structures based on a single representation of an optic as a combination of a getter and setter."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/zio/zio/wiki/Project-Stages"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Project%20Stage-Development-green.svg",alt:"Development"}))," ",(0,i.kt)("img",{parentName:"p",src:"https://github.com/zio/zio-optics/workflows/CI/badge.svg",alt:"CI Badge"})," ",(0,i.kt)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-optics_2.13/"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-optics_2.13.svg?label=Sonatype%20Release",alt:"Sonatype Releases"}))," ",(0,i.kt)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-optics_2.13/"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio-optics_2.13.svg?label=Sonatype%20Snapshot",alt:"Sonatype Snapshots"}))," ",(0,i.kt)("a",{parentName:"p",href:"https://javadoc.io/doc/dev.zio/zio-optics-docs_2.13"},(0,i.kt)("img",{parentName:"a",src:"https://javadoc.io/badge2/dev.zio/zio-optics-docs_2.13/javadoc.svg",alt:"javadoc"}))," ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-optics"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/github/stars/zio/zio-optics?style=social",alt:"ZIO Optics"}))),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"When we are working with immutable nested data structures, updating and reading operations could be tedious with lots of boilerplates. Optics is a functional programming construct that makes these operations more clear and readable."),(0,i.kt)("p",null,"Key features of ZIO Optics:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Unified Optic Data Type")," \u2014 All the data types like ",(0,i.kt)("inlineCode",{parentName:"li"},"Lens"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Prism"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Optional"),", and so forth are type aliases for the core ",(0,i.kt)("inlineCode",{parentName:"li"},"Optic")," data type."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Composability")," \u2014 We can compose optics to create more advanced ones."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Embracing the Tremendous Power of Concretion")," \u2014 Using concretion instead of unnecessary abstractions, makes the API more ergonomic and easy to use."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Integration with ZIO Data Types")," \u2014 It supports effectful and transactional optics that works with ZIO data structures like ",(0,i.kt)("inlineCode",{parentName:"li"},"Ref")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"TMap"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Helpful Error Channel")," \u2014 Like ZIO, the ",(0,i.kt)("inlineCode",{parentName:"li"},"Optics")," data type has error channels to include failure details.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Zero dependencies")," - No dependencies other than ZIO itself."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"No unnecessary abstractions")," - Concrete representation makes it easy to learn.")),(0,i.kt)("p",null,"The optic also handles the possibility of failure for us, failing with an ",(0,i.kt)("inlineCode",{parentName:"p"},"OpticFailure")," that is a subtype of ",(0,i.kt)("inlineCode",{parentName:"p"},"Throwable")," and contains a helpful error message if the key cannot be found."),(0,i.kt)("p",null,"ZIO Optics makes it easy to compose more complex optics from simpler ones, to define optics for your own data types, and to work with optics that use ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIO")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"STM")," effects."),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"In order to use this library, we need to add the following line in our ",(0,i.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-optics" % "0.2.1"\n')),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"ZIO Optics makes it easy to modify parts of larger data structures. For example, say we have a web application where users can vote on which of various topics they are interested in. We maintain our state of how many votes each topic has received as a ",(0,i.kt)("inlineCode",{parentName:"p"},"Ref[Map[String, Int]]"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nlazy val voteRef: Ref[Map[String, Int]] =\n  ???\n")),(0,i.kt)("p",null,"If we want to increment the number of votes for one of the topics here is what it would look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'def incrementVotes(topic: String): Task[Unit] =\n  voteRef.modify { voteMap =>\n    voteMap.get(topic) match {\n      case Some(votes) =>\n        (ZIO.unit, voteMap + (topic -> (votes + 1)))\n      case None        =>\n        val message = s"voteMap $voteMap did not contain topic $topic"\n        (ZIO.fail(new NoSuchElementException(message)), voteMap)\n    }\n  }.flatten\n')),(0,i.kt)("p",null,"This is alright, but there is a lot of code here for a relatively simple operation of incrementing one of the keys. We have to get the value from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Ref"),", then get the value from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Map"),", and finally set the new value in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Map"),"."),(0,i.kt)("p",null,"We also have to explicitly handle the possibility that the value is not in the map. And this is all for a relatively simple data structure!"),(0,i.kt)("p",null,"Here is what this would look like with ZIO Optics."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.optics._\n\ndef incrementVotes(topic: String): Task[Unit] =\n  voteRef.key(topic).update(_ + 1)\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"key"),' optic "zooms in" on part of a larger structure, in this case transforming the ',(0,i.kt)("inlineCode",{parentName:"p"},"Ref[Map[String, Int]]")," into a ",(0,i.kt)("inlineCode",{parentName:"p"},"Ref")," that accesses the value at the specified key. We can then simply call the ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," operator on ",(0,i.kt)("inlineCode",{parentName:"p"},"Ref")," to increment the value."),(0,i.kt)("p",null,"Let's try another example. We are going to update a nested data structure using ZIO Optics:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.optics._\n\ncase class Developer(name: String, manager: Manager)\ncase class Manager(name: String, rating: Rating)\ncase class Rating(upvotes: Int, downvotes: Int)\n\nval developerLens = Lens[Developer, Manager](\n  get = developer => Right(developer.manager),\n  set = manager => developer => Right(developer.copy(manager = manager))\n)\n\nval managerLens = Lens[Manager, Rating](\n  get = manager => Right(manager.rating),\n  set = rating => manager => Right(manager.copy(rating = rating))\n)\n\nval ratingLens = Lens[Rating, Int](\n  get = rating => Right(rating.upvotes),\n  set = upvotes => rating => Right(rating.copy(upvotes = upvotes))\n)\n\n// Composing lenses\nval optic = developerLens >>> managerLens >>> ratingLens\n\nval jane    = Developer("Jane", Manager("Steve", Rating(0, 0)))\nval updated = optic.update(jane)(_ + 1)\n\nprintln(updated)\n')),(0,i.kt)("h2",{id:"resources"},"Resources"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=-km5ohYhJa4"},"Zymposium - Optics")," by Adam Fraser and Kit Langton (June 2021) \u2014 Optics are great tools for working with parts of larger data structures and come up in disguise in many places such as ZIO Test assertions.")))}m.isMDXComponent=!0}}]);