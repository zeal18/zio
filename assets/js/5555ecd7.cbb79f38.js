"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[31181],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>f});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},m=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=l(r),d=i,f=p["".concat(c,".").concat(d)]||p[d]||u[d]||o;return r?n.createElement(f,a(a({ref:t},m),{},{components:r})):n.createElement(f,a({ref:t},m))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},33470:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(87462),i=(r(67294),r(3905));const o={id:"micrometer-connector",title:"Micrometer Connector"},a=void 0,s={unversionedId:"zio-metrics-connectors/metrics/micrometer-connector",id:"zio-metrics-connectors/metrics/micrometer-connector",title:"Micrometer Connector",description:"ZIO Metrics has an integration with Micrometer, a powerful metrics instrumentation library.",source:"@site/docs/zio-metrics-connectors/metrics/micrometer-connector.md",sourceDirName:"zio-metrics-connectors/metrics",slug:"/zio-metrics-connectors/metrics/micrometer-connector",permalink:"/zio-metrics-connectors/metrics/micrometer-connector",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-metrics-connectors/metrics/micrometer-connector.md",tags:[],version:"current",frontMatter:{id:"micrometer-connector",title:"Micrometer Connector"},sidebar:"ecosystem-sidebar",previous:{title:"Prometheus Client",permalink:"/zio-metrics-connectors/metrics/prometheus-client"},next:{title:"Instrumentation Examples",permalink:"/zio-metrics-connectors/metrics/instrumentation-examples"}},c={},l=[{value:"Benefits",id:"benefits",level:2},{value:"1. Comprehensive Metrics Support",id:"1-comprehensive-metrics-support",level:3},{value:"2. Real-time Metrics Updates",id:"2-real-time-metrics-updates",level:3},{value:"3. Always on trend of standards",id:"3-always-on-trend-of-standards",level:3},{value:"Example of usage",id:"example-of-usage",level:2}],m={toc:l},p="wrapper";function u(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"ZIO Metrics has an integration with ",(0,i.kt)("a",{parentName:"p",href:"https://micrometer.io/"},"Micrometer"),", a powerful metrics instrumentation library.\nBy combining these two frameworks, developers can benefit from comprehensive and flexible metrics monitoring capabilities\nwithin their ZIO applications. This integration allows for efficient monitoring, gathering, and reporting of key\nperformance indicators (KPIs) and other metrics for enhanced observability."),(0,i.kt)("h2",{id:"benefits"},"Benefits"),(0,i.kt)("p",null,"Micrometer integration offers a range of benefits that make it an excellent choice for integrating with ZIO Metrics.\nHere are some key advantages:"),(0,i.kt)("h3",{id:"1-comprehensive-metrics-support"},"1. Comprehensive Metrics Support"),(0,i.kt)("p",null,"Micrometer provides a vendor-neutral facade for various monitoring systems, including Prometheus, Datadog, Graphite,\nand more. The same like slf4j for logs but for observability. It offers a unified API for recording metrics, allowing\ndevelopers to easily integrate with multiple backend systems and switch between different monitoring systems without\nmajor code changes for its ZIO applications. You can choose whatever you want as monitoring tool - Grafana,\nPrometheus, and Jaeger and so on."),(0,i.kt)("h3",{id:"2-real-time-metrics-updates"},"2. Real-time Metrics Updates"),(0,i.kt)("p",null,"By leveraging the low-level integration with the ZIO Metrics core client listener, the module provides immediate\nupdates to Micrometer whenever metric changes occur within the ZIO application. This real-time synchronization\nensures that the metrics reported by Micrometer accurately reflect the current state of the application, enabling\ntimely monitoring and analysis."),(0,i.kt)("h3",{id:"3-always-on-trend-of-standards"},"3. Always on trend of standards"),(0,i.kt)("p",null,"Integration with Micrometer ensures that developers are always on trend of standards with metrics format changes and\ncan take advantage of the latest updates and improvements in the monitoring ecosystem. By relying on Micrometer as\nthe integration layer, developers gain compatibility with the latest monitoring systems, future-proof their\nmonitoring infrastructure, benefit from community-driven updates and support, and simplify maintenance and upgrades.\nThis integration provides a reliable and scalable solution for metrics monitoring in ZIO-based applications, allowing\ndevelopers to focus on their core business logic while staying at the forefront of monitoring technology."),(0,i.kt)("h2",{id:"example-of-usage"},"Example of usage"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Import Dependencies"),(0,i.kt)("p",{parentName:"li"},"In your project's build configuration, add the following dependency to import the ZIO Metrics Micrometer module:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'   libraryDependencies += "dev.zio" %%% "zio-metrics-micrometer" % latest\n')),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Choose Micrometer Backend"),(0,i.kt)("p",{parentName:"li"},"Decide on the backend for the Micrometer registry. You can use the built-in\n'SimpleMeterRegistry', which stores all metrics in memory (commonly used for testing), or select another backend for\nexternal integration. In this example, we'll use Prometheus as the backend."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'   "io.micrometer" % "micrometer-registry-prometheus" % latest\n')),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Provide Micrometer and its backend Layer to your main ZIO effect"),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"zio-metrics-micrometer")," gives you ",(0,i.kt)("inlineCode",{parentName:"p"},"micrometer.micrometerLayer")," which initializes a bridge between ZIO Metrics and\nMicrometer.\nYou should also provide a layer with a backend for micrometer.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Optionally enable Core ZIO Metrics and Default JVM Metrics"),(0,i.kt)("p",{parentName:"li"},"Enable core ZIO Metrics by providing ",(0,i.kt)("inlineCode",{parentName:"p"},"Runtime.enableRuntimeMetrics")," to your main application's ZIO effect. This\nensures that basic ZIO metrics, such as fiber counts and execution times, are collected. Additionally, include\n",(0,i.kt)("inlineCode",{parentName:"p"},"DefaultJvmMetrics.live")," in your layer composition to enable default JVM metrics collection."))),(0,i.kt)("p",null,"Here's an example of how example may look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"\nobject SampleApp extends ZIOAppDefault {\n\n  def program[R, E, T]: ZIO[R, E, T] = ???\n\n  override def run: ZIO[Environment & ZIOAppArgs & Scope, Any, Any] = (for {\n    _ <- program\n  } yield ())\n    .provide(\n      micrometer.micrometerLayer,\n      ZLayer.succeed(new PrometheusMeterRegistry(PrometheusConfig.DEFAULT)),\n      Runtime.enableRuntimeMetrics,\n      DefaultJvmMetrics.live.unit,\n    )\n}\n\n")))}u.isMDXComponent=!0}}]);