"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[89345],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>g});var r=o(67294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var p=r.createContext({}),l=function(e){var t=r.useContext(p),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(o),u=n,g=d["".concat(p,".").concat(u)]||d[u]||m[u]||a;return o?r.createElement(g,i(i({ref:t},c),{},{components:o})):r.createElement(g,i({ref:t},c))}));function g(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:n,i[1]=s;for(var l=2;l<a;l++)i[l]=o[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}u.displayName="MDXCreateElement"},97977:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=o(87462),n=(o(67294),o(3905));const a={id:"index",title:"Introduction to ZIO Process",sidebar_label:"ZIO Process"},i=void 0,s={unversionedId:"zio-process/index",id:"zio-process/index",title:"Introduction to ZIO Process",description:"ZIO Process is a simple ZIO library for interacting with external processes and command-line programs.",source:"@site/docs/zio-process/index.md",sourceDirName:"zio-process",slug:"/zio-process/",permalink:"/zio-process/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-process/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"Introduction to ZIO Process",sidebar_label:"ZIO Process"},sidebar:"ecosystem-sidebar",previous:{title:"Resources",permalink:"/zio-prelude/resources"},next:{title:"Getting Started",permalink:"/zio-process/getting-started"}},p={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2}],c={toc:l},d="wrapper";function m(e){let{components:t,...o}=e;return(0,n.kt)(d,(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://zio.dev/zio-process"},"ZIO Process")," is a simple ZIO library for interacting with external processes and command-line programs."),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/zio/zio/wiki/Project-Stages"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Project%20Stage-Production%20Ready-brightgreen.svg",alt:"Production Ready"}))," ",(0,n.kt)("img",{parentName:"p",src:"https://github.com/zio/zio-process/workflows/CI/badge.svg",alt:"CI Badge"})," ",(0,n.kt)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-process_2.13/"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-process_2.13.svg?label=Sonatype%20Release",alt:"Sonatype Releases"}))," ",(0,n.kt)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-process_2.13/"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio-process_2.13.svg?label=Sonatype%20Snapshot",alt:"Sonatype Snapshots"}))," ",(0,n.kt)("a",{parentName:"p",href:"https://javadoc.io/doc/dev.zio/zio-process-docs_2.13"},(0,n.kt)("img",{parentName:"a",src:"https://javadoc.io/badge2/dev.zio/zio-process-docs_2.13/javadoc.svg",alt:"javadoc"}))," ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-process"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/github/stars/zio/zio-process?style=social",alt:"ZIO Process"}))),(0,n.kt)("h2",{id:"introduction"},"Introduction"),(0,n.kt)("p",null,"ZIO Process is backed by ZIO Streams, enabling you to work with processes that output gigabytes of data without worrying about exceeding memory constraints."),(0,n.kt)("p",null,"ZIO Process provides a principled way to call out to external programs from within a ZIO application while leveraging ZIO's capabilities like interruptions and offloading blocking operations to a separate thread pool. We don't need to worry about avoiding these common pitfalls as we would if we were to use Java's ",(0,n.kt)("inlineCode",{parentName:"p"},"ProcessBuilder")," or the ",(0,n.kt)("inlineCode",{parentName:"p"},"scala.sys.process")," API since it is already taken care of for you."),(0,n.kt)("p",null,"Key features of the ZIO Process:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Deep ZIO Integration")," \u2014 Leverages ZIO to handle interruption and offload blocking operations."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"ZIO Streams")," \u2014 ZIO Process is backed by ZIO Streams, which enables us to obtain the command output as streams of bytes or lines. So we can work with processes that output gigabytes of data without worrying about exceeding memory constraints."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Descriptive Errors")," \u2014 In case of command failure, it has a descriptive category of errors."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Piping")," \u2014 It has a simple DSL for piping the output of one command as the input of another."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Blocking Operations"))),(0,n.kt)("h2",{id:"installation"},"Installation"),(0,n.kt)("p",null,"In order to use this library, we need to add the following line in our ",(0,n.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-process" % "0.7.2" \n')),(0,n.kt)("h2",{id:"example"},"Example"),(0,n.kt)("p",null,"Here is a simple example of using ZIO Process:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.process.Command\n\nimport java.io.File\n\nobject ZIOProcessExample extends ZIOAppDefault {\n  val myApp = for {\n    fiber <- Command("dmesg", "--follow").linesStream\n      .foreach(Console.printLine(_))\n      .fork\n    cpuModel <- (Command("cat", "/proc/cpuinfo") |\n      Command("grep", "model name") |\n      Command("head", "-n", "1") |\n      Command("cut", "-d", ":", "-f", "2")).string\n    _ <- Console.printLine(s"CPU Model: $cpuModel")\n    _ <- (Command("pg_dump", "my_database") > new File("dump.sql")).exitCode\n    _ <- fiber.join\n  } yield ()\n\n  override def run = myApp\n}\n')))}m.isMDXComponent=!0}}]);