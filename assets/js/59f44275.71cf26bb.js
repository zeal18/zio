"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[7263],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var n=r(67294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),l=u(r),f=s,g=l["".concat(c,".").concat(f)]||l[f]||m[f]||a;return r?n.createElement(g,i(i({ref:t},p),{},{components:r})):n.createElement(g,i({ref:t},p))}));function g(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,i=new Array(a);i[0]=f;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[l]="string"==typeof e?e:s,i[1]=o;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},45238:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var n=r(87462),s=(r(67294),r(3905));const a={id:"configuring-tests",title:"Configuring Tests"},i=void 0,o={unversionedId:"reference/test/aspects/configuring-tests",id:"reference/test/aspects/configuring-tests",title:"Configuring Tests",description:"To run cases, there are some default configuration settings which are used by test runner, such as repeats, retries, samples and shrinks. We can change these settings using test aspects:",source:"@site/docs/reference/test/aspects/configuring-tests.md",sourceDirName:"reference/test/aspects",slug:"/reference/test/aspects/configuring-tests",permalink:"/reference/test/aspects/configuring-tests",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/aspects/configuring-tests.md",tags:[],version:"current",frontMatter:{id:"configuring-tests",title:"Configuring Tests"},sidebar:"reference-sidebar",previous:{title:"Annotating Tests",permalink:"/reference/test/aspects/annotating-tests"},next:{title:"Timing-out Tests",permalink:"/reference/test/aspects/timing-out-tests"}},c={},u=[{value:"Number of Repeats",id:"number-of-repeats",level:2},{value:"Number of Retries",id:"number-of-retries",level:2},{value:"Number of Samples",id:"number-of-samples",level:2},{value:"Maximum Number of Shrinks",id:"maximum-number-of-shrinks",level:2}],p={toc:u},l="wrapper";function m(e){let{components:t,...r}=e;return(0,s.kt)(l,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"To run cases, there are some ",(0,s.kt)("a",{parentName:"p",href:"/reference/test/services/config"},"default configuration settings")," which are used by test runner, such as ",(0,s.kt)("em",{parentName:"p"},"repeats"),", ",(0,s.kt)("em",{parentName:"p"},"retries"),", ",(0,s.kt)("em",{parentName:"p"},"samples")," and ",(0,s.kt)("em",{parentName:"p"},"shrinks"),". We can change these settings using test aspects:"),(0,s.kt)("h2",{id:"number-of-repeats"},"Number of Repeats"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"repeats(n: Int)")," test aspect runs each test with the number of times to repeat tests to ensure they are stable set to the specified value:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.test.{ test, _ }\n\ntest("repeating a test") {\n  ZIO.attempt("Repeating a test to ensure its stability")\n    .debug\n    .map(_ => assertTrue(true))\n} @@ TestAspect.nonFlaky @@ TestAspect.repeats(5)\n')),(0,s.kt)("h2",{id:"number-of-retries"},"Number of Retries"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"retries(n: Int)")," test aspect runs each test with the number of times to retry flaky tests set to the specified value."),(0,s.kt)("h2",{id:"number-of-samples"},"Number of Samples"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"samples(n: Int)")," test aspect runs each test with the number of sufficient samples to check for a random variable set to the specified value."),(0,s.kt)("p",null,"Let's change the number of default samples in the following example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.test.{ test, _ }\n\ntest("customized number of samples") {\n  for {\n    ref <- Ref.make(0)\n    _ <- check(Gen.int)(_ => assertZIO(ref.update(_ + 1))(Assertion.anything))\n    value <- ref.get\n  } yield assertTrue(value == 50)\n} @@ TestAspect.samples(50)\n')),(0,s.kt)("h2",{id:"maximum-number-of-shrinks"},"Maximum Number of Shrinks"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"shrinks(n: Int)")," test aspect runs each test with the maximum number of shrinkings to minimize large failures set to the specified value."))}m.isMDXComponent=!0}}]);