"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[62032],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),f=o,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||i;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3935:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const i={id:"console",title:"TestConsole"},a=void 0,s={unversionedId:"reference/test/services/console",id:"reference/test/services/console",title:"TestConsole",description:"TestConsole allows testing of applications that interact with the console by modeling working with standard input and output as writing and reading to and from internal buffers:",source:"@site/docs/reference/test/services/console.md",sourceDirName:"reference/test/services",slug:"/reference/test/services/console",permalink:"/reference/test/services/console",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/services/console.md",tags:[],version:"current",frontMatter:{id:"console",title:"TestConsole"},sidebar:"reference-sidebar",previous:{title:"Introduction",permalink:"/reference/test/services/"},next:{title:"TestClock",permalink:"/reference/test/services/clock"}},l={},p=[],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"TestConsole")," allows testing of applications that interact with the console by modeling working with standard input and output as writing and reading to and from internal buffers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.test.{test, _}\nimport zio.test.Assertion._\n\nval consoleSuite = suite("ConsoleTest")(\n  test("One can test output of console") {\n    for {\n      _              <- TestConsole.feedLines("Jimmy", "37")\n      _              <- Console.printLine("What is your name?")\n      name           <- Console.readLine\n      _              <- Console.printLine("What is your age?")\n      age            <- Console.readLine.map(_.toInt)\n      questionVector <- TestConsole.output\n      q1             = questionVector(0)\n      q2             = questionVector(1)\n    } yield {\n      assertTrue(name == "Jimmy") &&\n        assertTrue(age == 37) &&\n        assertTrue(q1 == "What is your name?\\n") &&\n        assertTrue(q2 == "What is your age?\\n")\n    }\n  }\n)\n')),(0,o.kt)("p",null,"The above code simulates an application that will ask for the name and age of the user. To test it we prefill buffers with answers with the call to ",(0,o.kt)("inlineCode",{parentName:"p"},"TestConsole.feedLines")," method. Calls to ",(0,o.kt)("inlineCode",{parentName:"p"},"Console.readLine")," will get the value from the buffers instead of interacting with the users keyboard."),(0,o.kt)("p",null,"Also, all output that our program produces by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"Console.printLine")," (and other printing methods) is being gathered and can be accessed with a call to ",(0,o.kt)("inlineCode",{parentName:"p"},"TestConsole.output"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"TestConsole")," provides a testable interface for programs interacting with the console by modeling input and output as reading from and writing to input and output buffers maintained by ",(0,o.kt)("inlineCode",{parentName:"p"},"TestConsole")," and backed by a ",(0,o.kt)("inlineCode",{parentName:"p"},"Ref"),"."),(0,o.kt)("p",null,"All calls to ",(0,o.kt)("inlineCode",{parentName:"p"},"print")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"printLine")," using the ",(0,o.kt)("inlineCode",{parentName:"p"},"TestConsole")," will write the string to the output buffer and all calls to ",(0,o.kt)("inlineCode",{parentName:"p"},"readLine")," will take a string from the input buffer. "),(0,o.kt)("p",null,"To facilitate debugging, by default output will also be rendered to standard output. We can enable or disable this for a scope using ",(0,o.kt)("inlineCode",{parentName:"p"},"debug"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"silent"),", or the corresponding test aspects. "),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"TestConsole")," has several methods to access and manipulate the content of these buffers including:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"feedLines"))," to feed strings to the input  buffer that will then be returned by calls to ",(0,o.kt)("inlineCode",{parentName:"li"},"readLine"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"output"))," to get the content of the output buffer from calls to ",(0,o.kt)("inlineCode",{parentName:"li"},"print")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"printLine")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"clearInput"))," and ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"clearOutput"))," to clear the respective buffers.")),(0,o.kt)("p",null,"Together, these functions make it easy to test programs interacting with the console."))}d.isMDXComponent=!0}}]);