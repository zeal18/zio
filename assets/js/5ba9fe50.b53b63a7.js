"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[71541],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>g});var n=i(67294);function o(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){o(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,o=function(e,t){if(null==e)return{};var i,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(o[i]=e[i]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(o[i]=e[i])}return o}var d=n.createContext({}),l=function(e){var t=n.useContext(d),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},p=function(e){var t=l(e.components);return n.createElement(d.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var i=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=l(i),m=o,g=c["".concat(d,".").concat(m)]||c[m]||u[m]||r;return i?n.createElement(g,a(a({ref:t},p),{},{components:i})):n.createElement(g,a({ref:t},p))}));function g(e,t){var i=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=i.length,a=new Array(r);a[0]=m;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[c]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<r;l++)a[l]=i[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}m.displayName="MDXCreateElement"},55958:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var n=i(87462),o=(i(67294),i(3905));const r={id:"index",title:"Introduction to ZIO Redis",sidebar_label:"ZIO Redis"},a=void 0,s={unversionedId:"zio-redis/index",id:"zio-redis/index",title:"Introduction to ZIO Redis",description:"Development CI Badge Sonatype Releases Sonatype Snapshots javadoc ZIO Redis",source:"@site/docs/zio-redis/index.md",sourceDirName:"zio-redis",slug:"/zio-redis/",permalink:"/zio-redis/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-redis/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"Introduction to ZIO Redis",sidebar_label:"ZIO Redis"},sidebar:"ecosystem-sidebar",previous:{title:"How to Contribute?",permalink:"/zio-quill/how-to-contribute"},next:{title:"ZIO RocksDB",permalink:"/zio-rocksdb/"}},d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2},{value:"Testing",id:"testing",level:2},{value:"Resources",id:"resources",level:2}],p={toc:l},c="wrapper";function u(e){let{components:t,...i}=e;return(0,o.kt)(c,(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/zio/zio/wiki/Project-Stages"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Project%20Stage-Development-green.svg",alt:"Development"}))," ",(0,o.kt)("img",{parentName:"p",src:"https://github.com/zio/zio-redis/workflows/CI/badge.svg",alt:"CI Badge"})," ",(0,o.kt)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-redis_2.13/"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-redis_2.13.svg?label=Sonatype%20Release",alt:"Sonatype Releases"}))," ",(0,o.kt)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-redis_2.13/"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio-redis_2.13.svg?label=Sonatype%20Snapshot",alt:"Sonatype Snapshots"}))," ",(0,o.kt)("a",{parentName:"p",href:"https://javadoc.io/doc/dev.zio/zio-redis-docs_2.13"},(0,o.kt)("img",{parentName:"a",src:"https://javadoc.io/badge2/dev.zio/zio-redis-docs_2.13/javadoc.svg",alt:"javadoc"}))," ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-redis"},(0,o.kt)("img",{parentName:"a",src:"https://img.shields.io/github/stars/zio/zio-redis?style=social",alt:"ZIO Redis"}))),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-redis"},"ZIO Redis")," is a ZIO-native Redis client.\nIt aims to provide a ",(0,o.kt)("strong",{parentName:"p"},"type-safe")," and ",(0,o.kt)("strong",{parentName:"p"},"performant")," API for accessing Redis\ninstances."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"To use ZIO Redis, add the following line to your ",(0,o.kt)("inlineCode",{parentName:"p"},"build.sbt"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-redis" % "0.2.0"\n')),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"To execute our ZIO Redis effect, we should provide the ",(0,o.kt)("inlineCode",{parentName:"p"},"RedisExecutor")," layer to that effect. To create this layer we\nshould also provide the following layers:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"RedisConfig")," \u2014 Using default one, will connect to the ",(0,o.kt)("inlineCode",{parentName:"li"},"localhost:6379")," Redis instance."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"BinaryCodec")," \u2014 In this example, we are going to use the built-in ",(0,o.kt)("inlineCode",{parentName:"li"},"ProtobufCodec")," codec from zio-schema project.")),(0,o.kt)("p",null,"To run this example we should put following dependencies in our ",(0,o.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies ++= Seq(\n  "dev.zio" %% "zio-redis" % "0.2.0",\n  "dev.zio" %% "zio-schema-protobuf" % "0.4.9"\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.redis._\nimport zio.schema._\nimport zio.schema.codec._\n\nobject ZIORedisExample extends ZIOAppDefault {\n  \n  object ProtobufCodecSupplier extends CodecSupplier {\n    def get[A: Schema]: BinaryCodec[A] = ProtobufCodec.protobufCodec\n  }\n  \n  val myApp: ZIO[Redis, RedisError, Unit] = for {\n    redis <- ZIO.service[Redis]\n    _     <- redis.set("myKey", 8L, Some(1.minutes))\n    v     <- redis.get("myKey").returning[Long]\n    _     <- Console.printLine(s"Value of myKey: $v").orDie\n    _     <- redis.hSet("myHash", ("k1", 6), ("k2", 2))\n    _     <- redis.rPush("myList", 1, 2, 3, 4)\n    _     <- redis.sAdd("mySet", "a", "b", "a", "c")\n  } yield ()\n\n  override def run = myApp.provide(\n    Redis.layer,\n    RedisExecutor.layer,\n    ZLayer.succeed(RedisConfig.Default),\n    ZLayer.succeed[CodecSupplier](ProtobufCodecSupplier)\n  )\n}\n')),(0,o.kt)("h2",{id:"testing"},"Testing"),(0,o.kt)("p",null,"To test you can use the embedded redis instance by adding to your build:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies := "dev.zio" %% "zio-redis-embedded" % "0.2.0"\n')),(0,o.kt)("p",null,"Then you can supply ",(0,o.kt)("inlineCode",{parentName:"p"},"EmbeddedRedis.layer.orDie")," as your ",(0,o.kt)("inlineCode",{parentName:"p"},"RedisConfig")," and you're good to go!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.redis._\nimport zio.redis.embedded.EmbeddedRedis\nimport zio.schema.{DeriveSchema, Schema}\nimport zio.schema.codec.{BinaryCodec, ProtobufCodec}\nimport zio.test._\nimport zio.test.Assertion._\nimport java.util.UUID\n\nobject EmbeddedRedisSpec extends ZIOSpecDefault {\n  object ProtobufCodecSupplier extends CodecSupplier {\n    def get[A: Schema]: BinaryCodec[A] = ProtobufCodec.protobufCodec\n  }\n  \n  final case class Item private (id: UUID, name: String, quantity: Int)\n  object Item {\n    implicit val itemSchema: Schema[Item] = DeriveSchema.gen[Item]\n  }\n  \n  def spec = suite("EmbeddedRedis should")(\n    test("set and get values") {\n      for {\n        redis <- ZIO.service[Redis]\n        item   = Item(UUID.randomUUID, "foo", 2)\n        _     <- redis.set(s"item.${item.id.toString}", item)\n        found <- redis.get(s"item.${item.id.toString}").returning[Item]\n      } yield assert(found)(isSome(equalTo(item)))\n    }\n  ).provideShared(\n    EmbeddedRedis.layer.orDie,\n    RedisExecutor.layer.orDie,\n    ZLayer.succeed[CodecSupplier](ProtobufCodecSupplier),\n    Redis.layer\n  ) @@ TestAspect.silentLogging\n}\n')),(0,o.kt)("h2",{id:"resources"},"Resources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=yqFt3b3RBkI"},"ZIO Redis")," by Dejan Mijic \u2014 Redis is one of the most commonly used\nin-memory data structure stores. In this talk, Dejan will introduce ZIO Redis, a purely functional, strongly typed\nclient library backed by ZIO, with excellent performance and extensive support for nearly all of Redis' features. He\nwill explain the library design using the bottom-up approach - from communication protocol to public APIs. Finally, he\nwill wrap the talk by demonstrating the client's usage and discussing its performance characteristics.")))}u.isMDXComponent=!0}}]);