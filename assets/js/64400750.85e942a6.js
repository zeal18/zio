"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[62134],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=c(t),d=r,m=f["".concat(s,".").concat(d)]||f[d]||u[d]||o;return t?a.createElement(m,i(i({ref:n},p),{},{components:t})):a.createElement(m,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[f]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},24586:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const o={id:"fallback",title:"Fallback",sidebar_label:"2. Fallback"},i=void 0,l={unversionedId:"reference/error-management/recovering/fallback",id:"reference/error-management/recovering/fallback",title:"Fallback",description:"ZIOorElse",source:"@site/docs/reference/error-management/recovering/fallback.md",sourceDirName:"reference/error-management/recovering",slug:"/reference/error-management/recovering/fallback",permalink:"/reference/error-management/recovering/fallback",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/error-management/recovering/fallback.md",tags:[],version:"current",frontMatter:{id:"fallback",title:"Fallback",sidebar_label:"2. Fallback"},sidebar:"reference-sidebar",previous:{title:"1. Catching",permalink:"/reference/error-management/recovering/catching"},next:{title:"3. Folding",permalink:"/reference/error-management/recovering/folding"}},s={},c=[{value:"<code>ZIO#orElse</code>",id:"zioorelse",level:2},{value:"<code>ZIO#orElseEither</code>",id:"zioorelseeither",level:2},{value:"<code>ZIO#orElseSucceed</code>/<code>ZIO#orElseFail</code>",id:"zioorelsesucceedzioorelsefail",level:2},{value:"<code>ZIO#orElseOptional</code>",id:"zioorelseoptional",level:2},{value:"<code>ZIO.firstSuccessOf</code>/<code>ZIO#firstSuccessOf</code>",id:"ziofirstsuccessofziofirstsuccessof",level:2}],p={toc:c},f="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(f,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"zioorelse"},(0,r.kt)("inlineCode",{parentName:"h2"},"ZIO#orElse")),(0,r.kt)("p",null,"We can try one effect, or if it fails, try another effect with the ",(0,r.kt)("inlineCode",{parentName:"p"},"orElse")," combinator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"trait ZIO[-R, +E, +A] {\n  def orElse[R1 <: R, E2, A1 >: A](that: => ZIO[R1, E2, A1]): ZIO[R1, E2, A1]\n}\n")),(0,r.kt)("p",null,"Let's try an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport java.io.IOException\n\nval primaryOrBackupData: ZIO[Any, IOException, Array[Byte]] =\n  readFile("primary.data").orElse(readFile("backup.data"))\n')),(0,r.kt)("h2",{id:"zioorelseeither"},(0,r.kt)("inlineCode",{parentName:"h2"},"ZIO#orElseEither")),(0,r.kt)("p",null,"If the original effect fails, this operator tries another effect, and as a result, returns either:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"trait ZIO[-R, +E, +A] {\n  def orElseEither[R1 <: R, E2, B](that: => ZIO[R1, E2, B]): ZIO[R1, E2, Either[A, B]]\n}\n")),(0,r.kt)("p",null,"This operator is useful when the fallback effect has a different result type than the original effect. So this will unify both in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Either[A, B]")," data type. Here is an example usage of this operator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\ntrait LocalConfig\ntrait RemoteConfig\n\ndef readLocalConfig: ZIO[Any, Throwable, LocalConfig] = ???\ndef readRemoteConfig: ZIO[Any, Throwable, RemoteConfig] = ???\n\nval result: ZIO[Any, Throwable, Either[LocalConfig, RemoteConfig]] =\n  readLocalConfig.orElseEither(readRemoteConfig)\n")),(0,r.kt)("h2",{id:"zioorelsesucceedzioorelsefail"},(0,r.kt)("inlineCode",{parentName:"h2"},"ZIO#orElseSucceed"),"/",(0,r.kt)("inlineCode",{parentName:"h2"},"ZIO#orElseFail")),(0,r.kt)("p",null,"These two operators convert the original failure with constant succeed or failure values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"trait ZIO[-R, +R, +E] {\n  def orElseFail[E1](e1: => E1): ZIO[R, E1, A]\n\n  def orElseSucceed[A1 >: A](a1: => A1): ZIO[R, Nothing, A1]\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ZIO#orElseFail")," will always replace the original failure with the new one, so ",(0,r.kt)("inlineCode",{parentName:"p"},"E1")," does not have to be a supertype of ",(0,r.kt)("inlineCode",{parentName:"p"},"E"),". It is useful when we have ",(0,r.kt)("inlineCode",{parentName:"p"},"Unit")," as an error, and we want to unify that with something else:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nsealed trait AgeValidationException extends Exception\ncase class NegativeAgeException(age: Int) extends AgeValidationException\ncase class IllegalAgeException(age: Int)  extends AgeValidationException\n\ndef validate(age: Int): ZIO[Any, AgeValidationException, Int] = {\n  if (age < 0)\n    ZIO.fail(NegativeAgeException(age))\n  else if (age < 18)\n    ZIO.fail(IllegalAgeException(age))\n  else ZIO.succeed(age)\n}\n\nval result: ZIO[Any, String, Int] =\n  validate(3).orElseFail("invalid age")\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ZIO#orElseSucceed")," will always replace the original failure with a success value so the resulting effect cannot fail. It is useful when we have a constant value that will work in case the effect fails:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"val result: ZIO[Any, Nothing, Int] =\n  validate(3).orElseSucceed(0)\n")),(0,r.kt)("h2",{id:"zioorelseoptional"},(0,r.kt)("inlineCode",{parentName:"h2"},"ZIO#orElseOptional")),(0,r.kt)("p",null,"When dealing with optional failure types, we might need to fall back to another effect when the failure value is ",(0,r.kt)("inlineCode",{parentName:"p"},"None"),". This operator helps to do so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"trait ZIO[-R, +E, +A] {\n  def orElseOptional[R1 <: R, E1, A1 >: A](\n      that: => ZIO[R1, Option[E1], A1]\n    )(implicit ev: E IsSubtypeOfError Option[E1]): ZIO[R1, Option[E1], A1] =\n}\n")),(0,r.kt)("p",null,"In the following example, the ",(0,r.kt)("inlineCode",{parentName:"p"},'parseInt(" ")')," fails with ",(0,r.kt)("inlineCode",{parentName:"p"},"None"),", so then the fallback effect results in a zero:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\ndef parseInt(input: String): ZIO[Any, Option[String], Int] =\n  input.toIntOption match {\n    case Some(value) => ZIO.succeed(value)\n    case None =>\n      if (input.trim.isEmpty)\n        ZIO.fail(None)\n      else\n        ZIO.fail(Some(s"invalid non-integer input: $input"))\n  }\n\nval result = parseInt("  ").orElseOptional(ZIO.succeed(0)).debug\n')),(0,r.kt)("h2",{id:"ziofirstsuccessofziofirstsuccessof"},(0,r.kt)("inlineCode",{parentName:"h2"},"ZIO.firstSuccessOf"),"/",(0,r.kt)("inlineCode",{parentName:"h2"},"ZIO#firstSuccessOf")),(0,r.kt)("p",null,"These two operators make it easy for a user to run an effect, and in case it fails, it will run a series of ZIO effects until one succeeds:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"object ZIO {\n  def firstSuccessOf[R, R1 <: R, E, A](\n    zio: => ZIO[R, E, A],\n    rest: => Iterable[ZIO[R1, E, A]]\n  ): ZIO[R1, E, A] =\n}\n\ntrait ZIO[-R, +E, +A] {\n  final def firstSuccessOf[R1 <: R, E1 >: E, A1 >: A](\n    rest: => Iterable[ZIO[R1, E1, A1]]\n  ): ZIO[R1, E1, A1]\n}\n")),(0,r.kt)("p",null,"These methods use ",(0,r.kt)("inlineCode",{parentName:"p"},"orElse")," to reduce the non-empty iterable of effects into a single effect."),(0,r.kt)("p",null,"In the following example, we are trying to get the config from the master node, and if it fails, we will try successively to retrieve the config from the next available node:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\ntrait Config\n\ndef remoteConfig(name: String): ZIO[Any, Throwable, Config] =\n  ZIO.attempt(???)\n\nval masterConfig: ZIO[Any, Throwable, Config] =\n  remoteConfig("master")\n\nval nodeConfigs: Seq[ZIO[Any, Throwable, Config]] =\n  List("node1", "node2", "node3", "node4").map(remoteConfig)\n\nval config: ZIO[Any, Throwable, Config] =\n  ZIO.firstSuccessOf(masterConfig, nodeConfigs)\n')))}u.isMDXComponent=!0}}]);