"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[48333],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var g=o.createContext({}),p=function(e){var n=o.useContext(g),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=p(e.components);return o.createElement(g.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,g=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=p(t),u=a,m=c["".concat(g,".").concat(u)]||c[u]||d[u]||r;return t?o.createElement(m,l(l({ref:n},s),{},{components:t})):o.createElement(m,l({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=u;var i={};for(var g in n)hasOwnProperty.call(n,g)&&(i[g]=n[g]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<r;p++)l[p]=t[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},21700:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var o=t(87462),a=(t(67294),t(3905));const r={id:"jpl",title:"Java Platform/System Logger"},l=void 0,i={unversionedId:"zio-logging/jpl",id:"zio-logging/jpl",title:"Java Platform/System Logger",description:"Java Platform/System Logger is logging API which was introduced in Java 9.",source:"@site/docs/zio-logging/jpl.md",sourceDirName:"zio-logging",slug:"/zio-logging/jpl",permalink:"/zio-logging/jpl",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-logging/jpl.md",tags:[],version:"current",frontMatter:{id:"jpl",title:"Java Platform/System Logger"},sidebar:"ecosystem-sidebar",previous:{title:"File Logger",permalink:"/zio-logging/file-logger"},next:{title:"SLF4J v2",permalink:"/zio-logging/slf4j2"}},g={},p=[{value:"Examples",id:"examples",level:2},{value:"Java Platform/System logger name and annotations",id:"java-platformsystem-logger-name-and-annotations",level:3}],s={toc:p},c="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,o.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://openjdk.org/jeps/264"},(0,a.kt)("inlineCode",{parentName:"a"},"Java Platform/System Logger"))," is logging API which was introduced in Java 9."),(0,a.kt)("p",null,"In order to use this logging backend, we need to add the following line in our build.sbt file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-logging-jpl" % "2.1.14"\n')),(0,a.kt)("p",null,"Logger layer:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.logging.backend.JPL\n\nval logger = Runtime.removeDefaultLoggers >>> JPL.jpl\n")),(0,a.kt)("p",null,"Default ",(0,a.kt)("inlineCode",{parentName:"p"},"JPL")," logger setup:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"logger name (by default)  is extracted from ",(0,a.kt)("inlineCode",{parentName:"li"},"zio.Trace"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"for example, trace ",(0,a.kt)("inlineCode",{parentName:"li"},"zio.logging.example.JplSimpleApp.run(JplSimpleApp.scala:17)")," will have ",(0,a.kt)("inlineCode",{parentName:"li"},"zio.logging.example.JplSimpleApp")," as logger name"),(0,a.kt)("li",{parentName:"ul"},"NOTE: custom logger name may be set by ",(0,a.kt)("inlineCode",{parentName:"li"},"zio.logging.loggerName")," aspect"))),(0,a.kt)("li",{parentName:"ul"},"all annotations (logger name annotation is excluded) are placed at the beginning of log message"),(0,a.kt)("li",{parentName:"ul"},"cause is logged as throwable")),(0,a.kt)("p",null,"See also ",(0,a.kt)("a",{parentName:"p",href:"/zio-logging/formatting-log-records#logformat-and-logappender"},"LogFormat and LogAppender")),(0,a.kt)("p",null,"Custom logger name set by aspect:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'ZIO.logInfo("Starting user operation") @@ zio.logging.loggerName("zio.logging.example.UserOperation")\n')),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("p",null,"You can find the source code ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-logging/tree/master/examples"},"here")),(0,a.kt)("h3",{id:"java-platformsystem-logger-name-and-annotations"},"Java Platform/System logger name and annotations"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'package zio.logging.example\n\nimport zio.logging.LogAnnotation\nimport zio.logging.backend.JPL\nimport zio.{ ExitCode, Runtime, Scope, ZIO, ZIOAppDefault, _ }\n\nimport java.util.UUID\n\nobject JplSimpleApp extends ZIOAppDefault {\n\n  override val bootstrap: ZLayer[ZIOAppArgs, Any, Any] = Runtime.removeDefaultLoggers >>> JPL.jpl\n\n  private val users = List.fill(2)(UUID.randomUUID())\n\n  override def run: ZIO[Scope, Any, ExitCode] =\n    for {\n      _       <- ZIO.logInfo("Start")\n      traceId <- ZIO.succeed(UUID.randomUUID())\n      _       <- ZIO.foreachPar(users) { uId =>\n        {\n          ZIO.logInfo("Starting user operation") *>\n            ZIO.sleep(500.millis) *>\n            ZIO.logInfo("Stopping user operation")\n        } @@ ZIOAspect.annotated("user", uId.toString)\n      } @@ LogAnnotation.TraceId(traceId) @@ zio.logging.loggerName("zio.logging.example.UserOperation")\n      _       <- ZIO.logInfo("Done")\n    } yield ExitCode.success\n\n}\n')),(0,a.kt)("p",null,"Expected Console Output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Oct 28, 2022 1:47:01 PM zio.logging.backend.JPL$$anon$1 $anonfun$closeLogEntry$1\nINFO: Start\nOct 28, 2022 1:47:01 PM zio.logging.backend.JPL$$anon$1 $anonfun$closeLogEntry$1\nINFO: user=59c114fd-676d-4df9-a5a0-b8e132468fbf trace_id=7d3e3b84-dd3b-44ff-915a-04fb2d135e28 Starting user operation\nOct 28, 2022 1:47:01 PM zio.logging.backend.JPL$$anon$1 $anonfun$closeLogEntry$1\nINFO: user=e1ebf0cc-2f61-484f-afcd-de7e20ec7829 trace_id=7d3e3b84-dd3b-44ff-915a-04fb2d135e28 Starting user operation\nOct 28, 2022 1:47:02 PM zio.logging.backend.JPL$$anon$1 $anonfun$closeLogEntry$1\nINFO: user=e1ebf0cc-2f61-484f-afcd-de7e20ec7829 trace_id=7d3e3b84-dd3b-44ff-915a-04fb2d135e28 Stopping user operation\nOct 28, 2022 1:47:02 PM zio.logging.backend.JPL$$anon$1 $anonfun$closeLogEntry$1\nINFO: user=59c114fd-676d-4df9-a5a0-b8e132468fbf trace_id=7d3e3b84-dd3b-44ff-915a-04fb2d135e28 Stopping user operation\nOct 28, 2022 1:47:02 PM zio.logging.backend.JPL$$anon$1 $anonfun$closeLogEntry$1\nINFO: Done\n")))}d.isMDXComponent=!0}}]);