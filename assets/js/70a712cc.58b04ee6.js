"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[23756],{3905:(e,n,r)=>{r.d(n,{Zo:()=>l,kt:()=>u});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),f=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},l=function(e){var n=f(e.components);return t.createElement(c.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=f(r),d=o,u=p["".concat(c,".").concat(d)]||p[d]||m[d]||a;return r?t.createElement(u,i(i({ref:n},l),{},{components:r})):t.createElement(u,i({ref:n},l))}));function u(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var f=2;f<a;f++)i[f]=r[f];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},17905:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>f});var t=r(87462),o=(r(67294),r(3905));const a={id:"chaining-effects-based-on-errors",title:"Chaining Effects Based on Errors"},i=void 0,s={unversionedId:"reference/error-management/operations/chaining-effects-based-on-errors",id:"reference/error-management/operations/chaining-effects-based-on-errors",title:"Chaining Effects Based on Errors",description:"Unlike ZIO#flatMap the ZIO#flatMapError combinator chains two effects, where the second effect is dependent on the error channel of the first effect:",source:"@site/docs/reference/error-management/operations/chaining-effects-based-on-errors.md",sourceDirName:"reference/error-management/operations",slug:"/reference/error-management/operations/chaining-effects-based-on-errors",permalink:"/reference/error-management/operations/chaining-effects-based-on-errors",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/error-management/operations/chaining-effects-based-on-errors.md",tags:[],version:"current",frontMatter:{id:"chaining-effects-based-on-errors",title:"Chaining Effects Based on Errors"},sidebar:"reference-sidebar",previous:{title:"Map Operations",permalink:"/reference/error-management/operations/map-operations"},next:{title:"Filtering the Success Channel",permalink:"/reference/error-management/operations/filtering-the-success-channel"}},c={},f=[],l={toc:f},p="wrapper";function m(e){let{components:n,...r}=e;return(0,o.kt)(p,(0,t.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Unlike ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO#flatMap")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO#flatMapError")," combinator chains two effects, where the second effect is dependent on the error channel of the first effect:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"trait ZIO[-R, +E, +A] {\n  def flatMapError[R1 <: R, E2](\n    f: E => ZIO[R1, Nothing, E2]\n  ): ZIO[R1, E2, A]\n}\n")),(0,o.kt)("p",null,"In the following example, we are trying to find a random prime number between 1000 and 10000. We will use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO#flatMapError")," to collect all errors inside a ",(0,o.kt)("inlineCode",{parentName:"p"},"Ref")," of type ",(0,o.kt)("inlineCode",{parentName:"p"},"List[String]"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nobject MainApp extends ZIOAppDefault {\n  def isPrime(n: Int): Boolean =\n    if (n <= 1) false else (2 until n).forall(i => n % i != 0)\n\n  def findPrimeBetween(\n      minInclusive: Int,\n      maxExclusive: Int\n  ): ZIO[Any, List[String], Int] =\n    for {\n      errors <- Ref.make(List.empty[String])\n      number <- Random\n        .nextIntBetween(minInclusive, maxExclusive)\n        .reject {\n          case n if !isPrime(n) =>\n            s"non-prime number rejected: $n"\n        }\n        .flatMapError(error => errors.updateAndGet(_ :+ error))\n        .retryUntil(_.length >= 5)\n    } yield number\n\n  val myApp: ZIO[Any, Nothing, Unit] =\n    findPrimeBetween(1000, 10000)\n      .flatMap(prime => Console.printLine(s"found a prime number: $prime").orDie)\n      .catchAll { (errors: List[String]) =>\n        Console.printLine(\n          s"failed to find a prime number after 5 attempts:\\n  ${errors.mkString("\\n  ")}"\n        )\n      }\n      .orDie\n\n  def run = myApp\n}\n')))}m.isMDXComponent=!0}}]);