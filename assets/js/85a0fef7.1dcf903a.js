"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[71018],{3905:(e,t,n)=>{n.d(t,{Zo:()=>g,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},g=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,g=a(e,["components","mdxType","originalType","parentName"]),p=c(n),u=o,d=p["".concat(s,".").concat(u)]||p[u]||m[u]||l;return n?r.createElement(d,i(i({ref:t},g),{},{components:n})):r.createElement(d,i({ref:t},g))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=u;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[p]="string"==typeof e?e:o,i[1]=a;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7342:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const l={id:"metrics",title:"Log Metrics"},i=void 0,a={unversionedId:"zio-logging/metrics",id:"zio-logging/metrics",title:"Log Metrics",description:"Log metrics collecting metrics related to ZIO logging (all ZIO.log* functions).",source:"@site/docs/zio-logging/metrics.md",sourceDirName:"zio-logging",slug:"/zio-logging/metrics",permalink:"/zio-logging/metrics",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-logging/metrics.md",tags:[],version:"current",frontMatter:{id:"metrics",title:"Log Metrics"},sidebar:"ecosystem-sidebar",previous:{title:"SLF4J v1 bridge",permalink:"/zio-logging/slf4j1-bridge"},next:{title:"Testing",permalink:"/zio-logging/testing"}},s={},c=[{value:"Examples",id:"examples",level:2},{value:"Console logger with metrics",id:"console-logger-with-metrics",level:3}],g={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Log metrics collecting metrics related to ZIO logging (all ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO.log*")," functions).\nAs ZIO core supporting multiple loggers, this logging metrics collector is implemented as specific ",(0,o.kt)("inlineCode",{parentName:"p"},"ZLogger"),"\nwhich is responsible just for collecting metrics of all logs - ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO.log*")," functions."),(0,o.kt)("p",null,"The Metrics layer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"val layer = zio.logging.logMetrics\n")),(0,o.kt)("p",null,"will add a default metric named ",(0,o.kt)("inlineCode",{parentName:"p"},"zio_log_total")," with the label ",(0,o.kt)("inlineCode",{parentName:"p"},"level")," which will be\nincremented for each log message with the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"level")," being the corresponding log level label in lower case."),(0,o.kt)("p",null,"Metrics:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LogLevel.All")," -> ",(0,o.kt)("inlineCode",{parentName:"li"},"all")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LogLevel.Fatal")," -> ",(0,o.kt)("inlineCode",{parentName:"li"},"fatal")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LogLevel.Error")," -> ",(0,o.kt)("inlineCode",{parentName:"li"},"error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LogLevel.Warning")," -> ",(0,o.kt)("inlineCode",{parentName:"li"},"warn")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LogLevel.Info")," -> ",(0,o.kt)("inlineCode",{parentName:"li"},"info")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LogLevel.Debug")," -> ",(0,o.kt)("inlineCode",{parentName:"li"},"debug")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LogLevel.Trace")," -> ",(0,o.kt)("inlineCode",{parentName:"li"},"trace")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LogLevel.None")," -> ",(0,o.kt)("inlineCode",{parentName:"li"},"off"))),(0,o.kt)("p",null,"Custom names for the metric and label can be set via:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'val layer = zio.logging.logMetricsWith("log_counter", "log_level")\n')),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,"You can find the source\ncode ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-logging/tree/master/examples"},"here")),(0,o.kt)("h3",{id:"console-logger-with-metrics"},"Console logger with metrics"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'package zio.logging.example\n\nimport zio.logging.{ consoleLogger, logMetrics }\nimport zio.metrics.connectors.MetricsConfig\nimport zio.metrics.connectors.prometheus.{ PrometheusPublisher, prometheusLayer, publisherLayer }\nimport zio.{ ExitCode, Runtime, Scope, ZIO, ZIOAppArgs, ZIOAppDefault, ZLayer, _ }\n\nobject MetricsApp extends ZIOAppDefault {\n\n  override val bootstrap: ZLayer[ZIOAppArgs, Any, Any] =\n    Runtime.removeDefaultLoggers >>> (consoleLogger() ++ logMetrics)\n\n  override def run: ZIO[Scope, Any, ExitCode] =\n    (for {\n      _            <- ZIO.logInfo("Start")\n      _            <- ZIO.logWarning("Some warning")\n      _            <- ZIO.logError("Some error")\n      _            <- ZIO.logError("Another error")\n      _            <- ZIO.sleep(1.second)\n      metricValues <- ZIO.serviceWithZIO[PrometheusPublisher](_.get)\n      _            <- Console.printLine(metricValues)\n      _            <- ZIO.logInfo("Done")\n    } yield ExitCode.success)\n      .provideLayer((ZLayer.succeed(MetricsConfig(200.millis)) ++ publisherLayer) >+> prometheusLayer)\n\n}\n')),(0,o.kt)("p",null,"Expected Console Output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'timestamp=2023-03-15T08:44:39.93193+01:00  level=INFO thread=zio-fiber-6 message="Start"\ntimestamp=2023-03-15T08:44:39.951764+01:00 level=WARN thread=zio-fiber-6 message="Some warning"\ntimestamp=2023-03-15T08:44:39.95388+01:00  level=ERROR thread=zio-fiber-6 message="Some error"\ntimestamp=2023-03-15T08:44:39.954738+01:00 level=ERROR thread=zio-fiber-6 message="Another error"\n# TYPE zio_log_total counter\n# HELP zio_log_total\nzio_log_total{level="error",} 2.0 1678866280778\n# TYPE zio_log_total counter\n# HELP zio_log_total\nzio_log_total{level="warn",} 1.0 1678866280778\n# TYPE zio_log_total counter\n# HELP zio_log_total\nzio_log_total{level="info",} 1.0 1678866280778\ntimestamp=2023-03-15T08:44:40.972877+01:00 level=INFO thread=zio-fiber-6 message="Done"\n')))}m.isMDXComponent=!0}}]);