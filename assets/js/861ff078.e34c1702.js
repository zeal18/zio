"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[4286],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(n),f=a,d=u["".concat(l,".").concat(f)]||u[f]||p[f]||o;return n?r.createElement(d,i(i({ref:t},m),{},{components:n})):r.createElement(d,i({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},70619:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={id:"consuming-streams",title:"Consuming Streams"},i=void 0,s={unversionedId:"reference/stream/zstream/consuming-streams",id:"reference/stream/zstream/consuming-streams",title:"Consuming Streams",description:"Using a Sink",source:"@site/docs/reference/stream/zstream/consuming-streams.md",sourceDirName:"reference/stream/zstream",slug:"/reference/stream/zstream/consuming-streams",permalink:"/reference/stream/zstream/consuming-streams",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/stream/zstream/consuming-streams.md",tags:[],version:"current",frontMatter:{id:"consuming-streams",title:"Consuming Streams"},sidebar:"reference-sidebar",previous:{title:"Operations",permalink:"/reference/stream/zstream/operations"},next:{title:"Error Handling",permalink:"/reference/stream/zstream/error-handling"}},l={},c=[{value:"Using a Sink",id:"using-a-sink",level:3},{value:"Using fold",id:"using-fold",level:3},{value:"Using foreach",id:"using-foreach",level:3}],m={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.Console._\nimport zio.stream._\n\nval result: Task[Unit] = ZStream.fromIterable(0 to 100).foreach(printLine(_))\n")),(0,a.kt)("h3",{id:"using-a-sink"},"Using a Sink"),(0,a.kt)("p",null,"To consume a stream using ",(0,a.kt)("inlineCode",{parentName:"p"},"ZSink")," we can pass ",(0,a.kt)("inlineCode",{parentName:"p"},"ZSink")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"ZStream#run")," function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"val sum: UIO[Int] = ZStream(1,2,3).run(ZSink.sum)\n")),(0,a.kt)("h3",{id:"using-fold"},"Using fold"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ZStream#fold")," method executes the fold operation over the stream of values and returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"ZIO")," effect containing the result:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"val s1: ZIO[Any, Nothing, Int] = ZStream(1, 2, 3, 4, 5).runFold(0)(_ + _)\nval s2: ZIO[Any, Nothing, Int] = ZStream.iterate(1)(_ + 1).runFoldWhile(0)(_ <= 5)(_ + _)\n")),(0,a.kt)("h3",{id:"using-foreach"},"Using foreach"),(0,a.kt)("p",null,"Using ",(0,a.kt)("inlineCode",{parentName:"p"},"ZStream#foreach")," is another way of consuming elements of a stream. It takes a callback of type ",(0,a.kt)("inlineCode",{parentName:"p"},"O => ZIO[R1, E1, Any]")," which passes each element of a stream to this callback:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"ZStream(1, 2, 3).foreach(printLine(_))\n")))}p.isMDXComponent=!0}}]);