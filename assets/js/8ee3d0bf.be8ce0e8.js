"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[99418],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var s=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=s.createContext({}),c=function(e){var t=s.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return s.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return n?s.createElement(f,o(o({ref:t},l),{},{components:n})):s.createElement(f,o({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var c=2;c<a;c++)o[c]=n[c];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},19416:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var s=n(87462),r=(n(67294),n(3905));const a={id:"index",title:"Introduction to Test Aspects",sidebar_label:"Test Aspects"},o=void 0,i={unversionedId:"reference/test/aspects/index",id:"reference/test/aspects/index",title:"Introduction to Test Aspects",description:"A TestAspect is an aspect that can be weaved into specs. We can think of an aspect as a polymorphic function, capable of transforming one test into another, possibly enlarging the environment or error type. We use them to change existing tests or even entire suites or specs that we have already created.",source:"@site/docs/reference/test/aspects/index.md",sourceDirName:"reference/test/aspects",slug:"/reference/test/aspects/",permalink:"/reference/test/aspects/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/aspects/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"Introduction to Test Aspects",sidebar_label:"Test Aspects"},sidebar:"reference-sidebar",previous:{title:"Sized",permalink:"/reference/test/services/sized"},next:{title:"Before, After, and Around",permalink:"/reference/test/aspects/before-after-around"}},p={},c=[{value:"Examples",id:"examples",level:2}],l={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,s.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"TestAspect")," is an aspect that can be weaved into specs. We can think of an aspect as a polymorphic function, capable of transforming one test into another, possibly enlarging the environment or error type. We use them to change existing tests or even entire suites or specs that we have already created."),(0,r.kt)("p",null,"We can think of a test aspect as a Spec transformer. It takes one spec, transforms it, and produces another spec (",(0,r.kt)("inlineCode",{parentName:"p"},"Spec => Spec"),"). Test aspects are applied to a test or suite using the ",(0,r.kt)("inlineCode",{parentName:"p"},"@@")," operator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.test.{test, _}\n\ntest("a single test") {\n  ???\n} @@ testAspect\n\nsuite("suite of multiple tests") {\n  ???\n} @@ testAspect\n')),(0,r.kt)("p",null,"Test aspects encapsulate cross-cutting concerns and increase the modularity of our tests. So we can focus on the primary concerns of our tests and at the end of the day, we can apply required aspects to our tests."),(0,r.kt)("p",null,"The great thing about test aspects is that they are very composable. So we can chain them one after another. We can even have test aspects that modify other test aspects."),(0,r.kt)("p",null,"Let's say we have the following test:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.test._\n\ntest("test") {\n  assertTrue(true)\n}\n')),(0,r.kt)("p",null,"We can pass this test to whatever test aspect we want. For example, to run this test only on the JVM and repeat it five times, we can write the test as below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.test.{test, _}\nimport zio.test.TestAspect._\n\nrepeat(Schedule.recurs(5))(\n  jvmOnly(\n    test("test") {\n      assertTrue(true)\n    }\n  )\n)\n')),(0,r.kt)("p",null,"To compose the aspects, we have a very nice ",(0,r.kt)("inlineCode",{parentName:"p"},"@@")," syntax, which helps us to write tests concisely. So the previous example can be written as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.test.{test, _}\nimport zio.test.TestAspect._\n\ntest("test") {\n  assertTrue(true)\n} @@ jvmOnly @@ repeat(Schedule.recurs(5))\n')),(0,r.kt)("p",null,"When composing test aspects, ",(0,r.kt)("strong",{parentName:"p"},"the order of test aspects is important"),". So if we change the order, their behavior may change. For example, the following test will repeat the test 2 times:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.test.{test, _}\nimport zio.test.TestAspect._\n\nsuite("suite")(\n  test("A") {\n    ZIO.debug("executing test")\n      .map(_ => assertTrue(true))\n  },\n) @@ nonFlaky @@ repeats(2)\n')),(0,r.kt)("p",null,"The output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"executing test\nexecuting test\nexecuting test\n+ suite - repeated: 2\n  + A - repeated: 2\nRan 1 test in 343 ms: 1 succeeded, 0 ignored, 0 failed\n")),(0,r.kt)("p",null,"But the following test aspect repeats the test 100 times:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.test.{test, _}\nimport zio.test.TestAspect._\n\nsuite("suite")(\n  test("A") {\n    ZIO.debug("executing test")\n      .map(_ => assertTrue(true))\n  },\n) @@ repeats(2) @@ nonFlaky\n')),(0,r.kt)("p",null,"The output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"executing test\nexecuting test\nexecuting test\nexecuting test\nexecuting test\n...\nexecuting test\n+ suite - repeated: 100\n  + A - repeated: 100\nRan 1 test in 478 ms: 1 succeeded, 0 ignored, 0 failed\n")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"So let's say we have a challenge that we need to run a test, and we want to make sure there is no flaky on the JVM, and then we want to make sure it doesn't take more than 60 seconds:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.test.{test, _}\nimport zio.test.TestAspect._\n\ntest("a test with two aspects composed together") {\n  ???\n} @@ jvm(nonFlaky) @@ timeout(60.seconds)\n')),(0,r.kt)("p",null,"This is another example of a test suite showing the use of aspects to modify test behavior:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.test._\nimport zio.{test => _, _}\nimport zio.test.TestAspect._\n\nobject MySpec extends ZIOSpecDefault {\n  def spec = suite("A Suite")(\n    test("A passing test") {\n      assertTrue(true)\n    },\n    test("A passing test run for JVM only") {\n      assertTrue(true)\n    } @@ jvmOnly, // @@ jvmOnly only runs tests on the JVM\n    test("A passing test run for JS only") {\n      assertTrue(true)\n    } @@ jsOnly, // @@ jsOnly only runs tests on Scala.js\n    test("A passing test with a timeout") {\n      assertTrue(true)\n    } @@ timeout(10.nanos), // @@ timeout will fail a test that doesn\'t pass within the specified time\n    test("A failing test... that passes") {\n      assertTrue(true)\n    } @@ failing, //@@ failing turns a failing test into a passing test\n    test("A ignored test") {\n      assertTrue(false)\n    } @@ ignore, //@@ ignore marks test as ignored\n    test("A flaky test that only works on the JVM and sometimes fails; let\'s compose some aspects!") {\n      assertTrue(false)\n    } @@ jvmOnly           // only run on the JVM\n      @@ eventually        // @@ eventually retries a test indefinitely until it succeeds\n      @@ timeout(20.nanos) // it\'s a good idea to compose `eventually` with `timeout`, or the test may never end\n  ) @@ timeout(60.seconds) // apply a timeout to the whole suite\n}\n')))}m.isMDXComponent=!0}}]);