"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[5305],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),m=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=m(e.components);return r.createElement(c.Provider,{value:n},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=m(t),u=o,h=l["".concat(c,".").concat(u)]||l[u]||p[u]||a;return t?r.createElement(h,i(i({ref:n},d),{},{components:t})):r.createElement(h,i({ref:n},d))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[l]="string"==typeof e?e:o,i[1]=s;for(var m=2;m<a;m++)i[m]=t[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},84313:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var r=t(87462),o=(t(67294),t(3905));const a={id:"our-first-schema",title:"Our First Schema"},i=void 0,s={unversionedId:"zio-schema/our-first-schema",id:"zio-schema/our-first-schema",title:"Our First Schema",description:"ZIO Schema provides macros to help you create Schemas out of your data types. But before using the macros,",source:"@site/docs/zio-schema/our-first-schema.md",sourceDirName:"zio-schema",slug:"/zio-schema/our-first-schema",permalink:"/zio-schema/our-first-schema",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/our-first-schema.md",tags:[],version:"current",frontMatter:{id:"our-first-schema",title:"Our First Schema"},sidebar:"ecosystem-sidebar",previous:{title:"Use cases",permalink:"/zio-schema/use-cases"},next:{title:"Understanding ZIO Schema",permalink:"/zio-schema/understanding-zio-schema"}},c={},m=[{value:"The Domain",id:"the-domain",level:3},{value:"Manual construction of a Schema",id:"manual-construction-of-a-schema",level:3},{value:"Macro derivation",id:"macro-derivation",level:3},{value:"Applying it to our domain",id:"applying-it-to-our-domain",level:2},{value:"Json example",id:"json-example",level:3},{value:"Protobuf example",id:"protobuf-example",level:3},{value:"Combining different encoders",id:"combining-different-encoders",level:3}],d={toc:m},l="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(l,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"ZIO Schema provides macros to help you create ",(0,o.kt)("inlineCode",{parentName:"p"},"Schema"),"s out of your data types. But before using the macros,\nwe should take a look at how to do this the manual way."),(0,o.kt)("h3",{id:"the-domain"},"The Domain"),(0,o.kt)("p",null,"Like in ",(0,o.kt)("a",{parentName:"p",href:"/zio-schema/"},"Overview"),", we define our example domain like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"object Domain {\n  final case class Person(name: String, age: Int)\n\n  sealed trait PaymentMethod\n\n  object PaymentMethod {\n    final case class CreditCard(number: String, expirationMonth: Int, expirationYear: Int) extends PaymentMethod\n    final case class WireTransfer(accountNumber: String, bankCode: String) extends PaymentMethod\n  }\n\n  final case class Customer(person: Person, paymentMethod: PaymentMethod)\n  \n}\n")),(0,o.kt)("h3",{id:"manual-construction-of-a-schema"},"Manual construction of a Schema"),(0,o.kt)("p",null,"This part is similar to other libraries that you might know, e.g. for JSON processing.\nBasically, you create a ",(0,o.kt)("inlineCode",{parentName:"p"},"Schema")," for every data type in your domain:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'\nobject ManualConstruction {\n  import zio.schema.Schema._\n  import Domain._\n  import Domain.PaymentMethod._\n\n  val schemaPerson: Schema[Person] = Schema.CaseClass2[String, Int, Person](\n    field1 = Schema.Field[String]("name", Schema.primitive[String]),\n    field2 = Schema.Field[Int]("age", Schema.primitive[Int]),\n    construct = (name, age) => Person(name, age),\n    extractField1 = p => p.name,\n    extractField2 = p => p.age\n  )\n\n  val schemaPaymentMethodWireTransfer: Schema[WireTransfer] = Schema.CaseClass2[String, String, WireTransfer](\n    field1 = Schema.Field[String]("accountNumber", Schema.primitive[String]),\n    field2 = Schema.Field[String]("bankCode", Schema.primitive[String]),\n    construct = (number, bankCode) => PaymentMethod.WireTransfer(number, bankCode),\n    extractField1 = p => p.accountNumber,\n    extractField2 = p => p.bankCode\n  )\n\n  val schemaPaymentMethodCreditCard: Schema[CreditCard] = Schema.CaseClass3[String, Int, Int, CreditCard](\n    field1 = Schema.Field[String]("number", Schema.primitive[String]),\n    field2 = Schema.Field[Int]("expirationMonth", Schema.primitive[Int]),\n    field3 = Schema.Field[Int]("expirationYear", Schema.primitive[Int]),\n    construct = (number, expirationMonth, expirationYear) => PaymentMethod.CreditCard(number, expirationMonth, expirationYear),\n    extractField1 = p => p.number,\n    extractField2 = p => p.expirationMonth,\n    extractField3 = p => p.expirationYear\n  )\n\n  val schemaPaymentMethod: Schema[PaymentMethod] = Schema.Enum2(\n    case1 = Case[PaymentMethod.CreditCard, PaymentMethod](\n      id = "CreditCard",\n      codec = schemaPaymentMethodCreditCard,\n      unsafeDeconstruct = pm => pm.asInstanceOf[PaymentMethod.CreditCard]\n    ),\n    case2 = Case[PaymentMethod.WireTransfer, PaymentMethod](\n      id = "WireTransfer",\n      codec = schemaPaymentMethodWireTransfer,\n      unsafeDeconstruct = pm => pm.asInstanceOf[PaymentMethod.WireTransfer]\n    )\n  )\n\n  val schemaCustomer: Schema[Customer] = Schema.CaseClass2[Person, PaymentMethod, Customer](\n    field1 = Schema.Field[Person]("person", schemaPerson),\n    field2 = Schema.Field[PaymentMethod]("paymentMethod", schemaPaymentMethod),\n    construct = (person, paymentMethod) => Customer(person, paymentMethod),\n    extractField1 = c => c.person,\n    extractField2 = c => c.paymentMethod\n  )\n}\n\n')),(0,o.kt)("h3",{id:"macro-derivation"},"Macro derivation"),(0,o.kt)("p",null,"Using macros, the above code gets reduced to this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"object MacroConstruction  {\n  import Domain._\n\n  val schemaPerson: Schema[Person] = DeriveSchema.gen[Person]\n\n  val schemaPaymentMethod: Schema[PaymentMethod] = DeriveSchema.gen[PaymentMethod]\n \n  val schemaCustomer: Schema[Customer] = DeriveSchema.gen[Customer]\n}\n")),(0,o.kt)("h2",{id:"applying-it-to-our-domain"},"Applying it to our domain"),(0,o.kt)("h3",{id:"json-example"},"Json example"),(0,o.kt)("p",null,"Lets put this all together in a small sample:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'object JsonSample extends zio.App {\n  import zio.schema.codec.JsonCodec\n  import ManualConstruction._\n  import zio.stream.ZStream\n\n  override def run(args: List[String]): UIO[ExitCode] = for {\n    _ <- ZIO.unit\n    person = Person("Michelle", 32)\n    personToJsonTransducer = JsonCodec.encoder[Person](schemaPerson)\n    _ <- ZStream(person)\n      .transduce(personToJsonTransducer)\n      .transduce(ZTransducer.utf8Decode)\n      .foreach(ZIO.debug)\n  } yield ExitCode.success\n}\n')),(0,o.kt)("p",null,"When we run this, we get our expected result printed out:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{"name":"Michelle","age":32}\n')),(0,o.kt)("h3",{id:"protobuf-example"},"Protobuf example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'object ProtobufExample extends zio.App {\n  import zio.schema.codec.ProtobufCodec\n  import ManualConstruction._\n  import zio.stream.ZStream\n\n  override def run(args: List[String]): UIO[ExitCode] = for {\n    _ <- ZIO.unit\n    _ <- ZIO.debug("protobuf roundtrip")\n    person = Person("Michelle", 32)\n\n    personToProto = ProtobufCodec.encoder[Person](schemaPerson)\n    protoToPerson = ProtobufCodec.decoder[Person](schemaPerson)\n\n    newPerson <- ZStream(person)\n      .transduce(personToProto)\n      .transduce(protoToPerson)\n      .runHead\n      .some\n      .catchAll(error => ZIO.debug(error))\n    _ <- ZIO.debug("is old person the new person? " + (person == newPerson).toString)\n    _ <- ZIO.debug("old person: " + person)\n    _ <- ZIO.debug("new person: " + newPerson)\n  } yield ExitCode.success\n}\n')),(0,o.kt)("h3",{id:"combining-different-encoders"},"Combining different encoders"),(0,o.kt)("p",null,"Let's take a look at a roundtrip converting an object to JSON and back, then converting it to a protobuf and back.\nThis is a simple example, but it shows how to combine different encoders to achieve a roundtrip."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'object CombiningExample extends zio.App {\n  import zio.schema.codec.JsonCodec\n  import zio.schema.codec.ProtobufCodec\n  import ManualConstruction._\n  import zio.stream.ZStream\n\n  override def run(args: List[String]): UIO[ExitCode] = for {\n    _ <- ZIO.unit\n    _ <- ZIO.debug("combining roundtrip")\n    person = Person("Michelle", 32)\n\n    personToJson = JsonCodec.encoder[Person](schemaPerson)\n    jsonToPerson = JsonCodec.decoder[Person](schemaPerson)\n\n    personToProto = ProtobufCodec.encoder[Person](schemaPerson)\n    protoToPerson = ProtobufCodec.decoder[Person](schemaPerson)\n\n    newPerson <- ZStream(person)\n      .tap(v => ZIO.debug("input object is: " + v))\n      .transduce(personToJson)\n      .transduce(jsonToPerson)\n      .tap(v => ZIO.debug("object after json roundtrip: " + v))\n      .transduce(personToProto)\n      .transduce(protoToPerson)\n      .tap(v => ZIO.debug("person after protobuf roundtrip: " + v))\n      .runHead\n      .some\n      .catchAll(error => ZIO.debug(error))\n    _ <- ZIO.debug("is old person the new person? " + (person == newPerson).toString)\n    _ <- ZIO.debug("old person: " + person)\n    _ <- ZIO.debug("new person: " + newPerson)\n  } yield ExitCode.success\n}\n')))}p.isMDXComponent=!0}}]);