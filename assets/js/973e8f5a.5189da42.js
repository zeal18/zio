"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[33981],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),l=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(r),y=n,f=m["".concat(p,".").concat(y)]||m[y]||u[y]||i;return r?a.createElement(f,o(o({ref:t},c),{},{components:r})):a.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=y;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:n,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}y.displayName="MDXCreateElement"},73329:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=r(87462),n=(r(67294),r(3905));const i={id:"type-aliases",title:"Type Aliases"},o=void 0,s={unversionedId:"reference/stream/zstream/type-aliases",id:"reference/stream/zstream/type-aliases",title:"Type Aliases",description:"The ZStream data type, has two type aliases:",source:"@site/docs/reference/stream/zstream/type-aliases.md",sourceDirName:"reference/stream/zstream",slug:"/reference/stream/zstream/type-aliases",permalink:"/reference/stream/zstream/type-aliases",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/stream/zstream/type-aliases.md",tags:[],version:"current",frontMatter:{id:"type-aliases",title:"Type Aliases"},sidebar:"reference-sidebar",previous:{title:"Introduction to ZStream",permalink:"/reference/stream/zstream/"},next:{title:"Chunked Streams",permalink:"/reference/stream/zstream/streams-are-chunked-by-default"}},p={},l=[],c={toc:l},m="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(m,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"ZStream")," data type, has two type aliases:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"type Stream[+E, +A] = ZStream[Any, E, A]\ntype UStream[+A]    = ZStream[Any, Nothing, A]\n")),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Stream[E, A]")," is a type alias for ",(0,n.kt)("inlineCode",{parentName:"p"},"ZStream[Any, E, A]"),", which represents a ZIO stream that does not require any services, and may fail with an ",(0,n.kt)("inlineCode",{parentName:"p"},"E"),", or produce elements with an ",(0,n.kt)("inlineCode",{parentName:"p"},"A"),".")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"UStream[A]")," is a type alias for ",(0,n.kt)("inlineCode",{parentName:"p"},"ZStream[Any, Nothing, A]"),", which represents a ZIO stream that does not require any services, it cannot fail, and after evaluation, it may emit zero or more values of type ",(0,n.kt)("inlineCode",{parentName:"p"},"A"),"."))))}u.isMDXComponent=!0}}]);