"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[91997],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(h,i(i({ref:t},l),{},{components:n})):r.createElement(h,i({ref:t},l))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},58927:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const a={id:"authentication-server",title:"Authentication Server Example",sidebar_label:"Authentication Server"},i=void 0,s={unversionedId:"zio-http/examples/advanced/authentication-server",id:"zio-http/examples/advanced/authentication-server",title:"Authentication Server Example",description:"",source:"@site/docs/zio-http/examples/advanced/authentication.md",sourceDirName:"zio-http/examples/advanced",slug:"/zio-http/examples/advanced/authentication-server",permalink:"/zio-http/examples/advanced/authentication-server",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/advanced/authentication.md",tags:[],version:"current",frontMatter:{id:"authentication-server",title:"Authentication Server Example",sidebar_label:"Authentication Server"},sidebar:"ecosystem-sidebar",previous:{title:"WebSocket",permalink:"/zio-http/examples/basic/websocket"},next:{title:"Concrete Entity",permalink:"/zio-http/examples/advanced/concrete-entity"}},c={},p=[],l={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'\nimport java.time.Clock\n\nimport zio._\n\nimport zio.http.HttpAppMiddleware.bearerAuth\nimport zio.http._\n\nimport pdi.jwt.{Jwt, JwtAlgorithm, JwtClaim}\n\nobject AuthenticationServer extends ZIOAppDefault {\n\n  /**\n   * This is an example to demonstrate barer Authentication middleware. The\n   * Server has 2 routes. The first one is for login,Upon a successful login, it\n   * will return a jwt token for accessing protected routes. The second route is\n   * a protected route that is accessible only if the request has a valid jwt\n   * token. AuthenticationClient example can be used to makes requests to this\n   * server.\n   */\n\n  // Secret Authentication key\n  val SECRET_KEY = "secretKey"\n\n  implicit val clock: Clock = Clock.systemUTC\n\n  // Helper to encode the JWT token\n  def jwtEncode(username: String): String = {\n    val json  = s"""{"user": "${username}"}"""\n    val claim = JwtClaim {\n      json\n    }.issuedNow.expiresIn(300)\n    Jwt.encode(claim, SECRET_KEY, JwtAlgorithm.HS512)\n  }\n\n  // Helper to decode the JWT token\n  def jwtDecode(token: String): Option[JwtClaim] = {\n    Jwt.decode(token, SECRET_KEY, Seq(JwtAlgorithm.HS512)).toOption\n  }\n\n  // Http app that is accessible only via a jwt token\n  def user: HttpApp[Any, Nothing] = Http.collect[Request] { case Method.GET -> Root / "user" / name / "greet" =>\n    Response.text(s"Welcome to the ZIO party! ${name}")\n  } @@ bearerAuth(jwtDecode(_).isDefined)\n\n  // App that let\'s the user login\n  // Login is successful only if the password is the reverse of the username\n  def login: HttpApp[Any, Nothing] = Http.collect[Request] { case Method.GET -> Root / "login" / username / password =>\n    if (password.reverse.hashCode == username.hashCode) Response.text(jwtEncode(username))\n    else Response.text("Invalid username or password.").withStatus(Status.Unauthorized)\n  }\n\n  // Composing all the HttpApps together\n  val app: HttpApp[Any, Nothing] = login ++ user\n\n  // Run it like any simple app\n  override val run = Server.serve(app).provide(Server.default)\n}\n')))}d.isMDXComponent=!0}}]);