"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[31921],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var f=i.createContext({}),l=function(e){var t=i.useContext(f),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return i.createElement(f.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,f=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=l(n),u=a,m=c["".concat(f,".").concat(u)]||c[u]||d[u]||r;return n?i.createElement(m,o(o({ref:t},p),{},{components:n})):i.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var f in t)hasOwnProperty.call(t,f)&&(s[f]=t[f]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},51846:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var i=n(87462),a=(n(67294),n(3905));const r={id:"zio-test-diff",title:"zio.test.diff.Diff",sidebar_label:"zio.test.diff.Diff"},o=void 0,s={unversionedId:"reference/test/zio-test-diff",id:"reference/test/zio-test-diff",title:"zio.test.diff.Diff",description:"When asserting two things are the same it's sometimes difficult to see the difference. Luckily there is a zio.test.Diff type-class. The purpose this type class is to output the difference between two things.",source:"@site/docs/reference/test/difference.md",sourceDirName:"reference/test",slug:"/reference/test/zio-test-diff",permalink:"/reference/test/zio-test-diff",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/difference.md",tags:[],version:"current",frontMatter:{id:"zio-test-diff",title:"zio.test.diff.Diff",sidebar_label:"zio.test.diff.Diff"}},f={},l=[{value:"Derive for case classes and algebraic data types",id:"derive-for-case-classes-and-algebraic-data-types",level:3},{value:"Custom types",id:"custom-types",level:3},{value:"Be wary of <code>LowPriDiff</code>",id:"be-wary-of-lowpridiff",level:3}],p={toc:l},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When asserting two things are the same it's sometimes difficult to see the difference. Luckily there is a ",(0,a.kt)("inlineCode",{parentName:"p"},"zio.test.Diff")," type-class. The purpose this type class is to output the difference between two things."),(0,a.kt)("p",null,"This can be one of the primitives types like ",(0,a.kt)("inlineCode",{parentName:"p"},"String"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Int"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Double"),", etc. But also more complex structures like a ",(0,a.kt)("inlineCode",{parentName:"p"},"Map"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"List")," and so-forth."),(0,a.kt)("h3",{id:"derive-for-case-classes-and-algebraic-data-types"},"Derive for case classes and algebraic data types"),(0,a.kt)("p",null,"To ",(0,a.kt)("em",{parentName:"p"},"derive")," a type-class for a case class or a algebraic data type you can include the module ",(0,a.kt)("inlineCode",{parentName:"p"},"zio-test-magnolia")," if it's not included already. Which includes ",(0,a.kt)("inlineCode",{parentName:"p"},"DeriveDiff")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"DeriveGen")," as well."),(0,a.kt)("p",null,"To make it work you need to import the ",(0,a.kt)("inlineCode",{parentName:"p"},"DeriveDiff")," object/trait:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.test.magnolia.DeriveDiff._\n")),(0,a.kt)("p",null,"An example of a difference output inside a test may look like this"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'     \u2717 There was a difference\n        Expected\n        Person(\n          name = "Bibi",\n          nickname = Some("""Bibbo\n          The\n          Bibber\n          Bobber"""),\n          age = 300,\n          pet = Pet(\n            name = "The Beautiful Destroyer",\n            hasBone = false,\n            favoriteFoods = List("Alpha", "This is a wonderful way to live and die", "Potato", "Brucee Lee", "Potato", "Ziverge"),\n            birthday = 2023-08-20T17:32:33.479852Z\n          ),\n          person = Some(Person(\n            name = "Bibi",\n            nickname = Some("""Bibbo\n            The\n            Bibber\n            Bobber"""),\n            age = 300,\n            pet = Pet(\n              name = "The Beautiful Destroyer",\n              hasBone = false,\n              favoriteFoods = List("Alpha", "This is a wonderful way to live and die", "Potato", "Brucee Lee", "Potato", "Ziverge"),\n              birthday = 2023-08-20T17:32:33.479855Z\n            ),\n            person = None\n          ))\n        )\n        Diff -expected +obtained\n        Person(\n          name = "Bibi" \u2192 "Boboo",\n          nickname = Some(\n            """Bibbo\n            The\n            Bibber\n            Bobber""" \u2192 """Babbo\n            The\n            Bibber"""\n          ),\n          pet = Pet(\n            name = "The Beautiful Destroyer" \u2192 "The Beautiful Crumb",\n            favoriteFoods = List(\n              1 = "This is a wonderful way to live and die" \u2192 "This is a wonderful \\"way\\" to dance and party",\n              3 = "Brucee Lee",\n              4 = "Potato",\n              5 = "Ziverge"\n            ),\n            birthday = 2023-08-20T17:32:33.479852Z \u2192 -1000000000-01-01T00:00:00Z\n          ),\n          person = Some(\n            Person(\n              name = "Bibi" \u2192 "Boboo",\n              nickname = Some(\n                """Bibbo\n                The\n                Bibber\n                Bobber""" \u2192 """Babbo\n                The\n                Bibber"""\n              ),\n              pet = Pet(\n                name = "The Beautiful Destroyer" \u2192 "The Beautiful Crumb",\n                favoriteFoods = List(\n                  1 = "This is a wonderful way to live and die" \u2192 "This is a wonderful \\"way\\" to dance and party",\n                  3 = "Brucee Lee",\n                  4 = "Potato",\n                  5 = "Ziverge"\n                ),\n                birthday = 2023-08-20T17:32:33.479855Z \u2192 -1000000000-01-01T00:00:00Z\n              )\n            )\n          )\n        )\n      p1 == p2\n      p1 = Person(\n        name = "Boboo",\n        nickname = Some("""Babbo\n        The\n        Bibber"""),\n        age = 300,\n        pet = Pet(\n          name = "The Beautiful Crumb",\n          hasBone = false,\n          favoriteFoods = List("Alpha", "This is a wonderful \\"way\\" to dance and party", "Potato"),\n          birthday = -1000000000-01-01T00:00:00Z\n        ),\n        person = Some(Person(\n          name = "Boboo",\n          nickname = Some("""Babbo\n          The\n          Bibber"""),\n          age = 300,\n          pet = Pet(\n            name = "The Beautiful Crumb",\n            hasBone = false,\n            favoriteFoods = List("Alpha", "This is a wonderful \\"way\\" to dance and party", "Potato"),\n            birthday = -1000000000-01-01T00:00:00Z\n          ),\n          person = None\n        ))\n      )\n')),(0,a.kt)("h3",{id:"custom-types"},"Custom types"),(0,a.kt)("p",null,"For more custom types you could provide type-class instances your self by implementing the ",(0,a.kt)("inlineCode",{parentName:"p"},"zio.test.diff.Diff")," type-class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"// somewhere defined in your domain package\ncase class Percentage(repr: Int)\n\nimplicit val diffPercentage: Diff[Percentage] = Diff[Double].contramap(_.repr)\n")),(0,a.kt)("h3",{id:"be-wary-of-lowpridiff"},"Be wary of ",(0,a.kt)("inlineCode",{parentName:"h3"},"LowPriDiff")),(0,a.kt)("p",null,"One thing to note that there is a trait ",(0,a.kt)("inlineCode",{parentName:"p"},"LowPriDiff")," which is stacked on the companion object of ",(0,a.kt)("inlineCode",{parentName:"p"},"zio.test.diff.Diff"),". There is lower priority type-class instance defined at ",(0,a.kt)("inlineCode",{parentName:"p"},"LowerPriDiff")," which is a fallback for ",(0,a.kt)("inlineCode",{parentName:"p"},"AnyVal"),". It's defined as ",(0,a.kt)("inlineCode",{parentName:"p"},"implicit def anyValDiff[A <: AnyVal]: Diff[A] = anyDiff[A]"),", so if some custom types mess up your diff, you might want to check on this topic."))}d.isMDXComponent=!0}}]);