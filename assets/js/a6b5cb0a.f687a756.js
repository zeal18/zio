"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[6333],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),l=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),c=l(a),h=r,m=c["".concat(i,".").concat(h)]||c[h]||u[h]||s;return a?n.createElement(m,o(o({ref:t},p),{},{components:a})):n.createElement(m,o({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=h;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d[c]="string"==typeof e?e:r,o[1]=d;for(var l=2;l<s;l++)o[l]=a[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},9433:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const s={id:"headers",title:"Headers"},o=void 0,d={unversionedId:"zio-http/dsl/headers",id:"zio-http/dsl/headers",title:"Headers",description:"ZIO HTTP provides support for all HTTP headers (as defined",source:"@site/docs/zio-http/dsl/headers.md",sourceDirName:"zio-http/dsl",slug:"/zio-http/dsl/headers",permalink:"/zio-http/dsl/headers",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/dsl/headers.md",tags:[],version:"current",frontMatter:{id:"headers",title:"Headers"},sidebar:"ecosystem-sidebar",previous:{title:"Body",permalink:"/zio-http/dsl/body"},next:{title:"Cookies",permalink:"/zio-http/dsl/cookies"}},i={},l=[{value:"Server-side",id:"server-side",level:2},{value:"Attaching Headers to <code>Response</code>",id:"attaching-headers-to-response",level:3},{value:"Reading Headers from <code>Request</code>",id:"reading-headers-from-request",level:3},{value:"Client-side",id:"client-side",level:2},{value:"Adding headers to <code>Request</code>",id:"adding-headers-to-request",level:3},{value:"Reading headers from <code>Response</code>",id:"reading-headers-from-response",level:3},{value:"Headers DSL",id:"headers-dsl",level:2}],p={toc:l},c="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"ZIO HTTP")," provides support for all HTTP headers (as defined\nin ",(0,r.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc2616"},"RFC2616")," ) along with custom headers."),(0,r.kt)("h2",{id:"server-side"},"Server-side"),(0,r.kt)("h3",{id:"attaching-headers-to-response"},"Attaching Headers to ",(0,r.kt)("inlineCode",{parentName:"h3"},"Response")),(0,r.kt)("p",null,"On the server-side, ",(0,r.kt)("inlineCode",{parentName:"p"},"ZIO-HTTP")," is adding a collection of pre-defined headers to the response, according to the HTTP\nspecification, additionally, users may add other headers, including custom headers."),(0,r.kt)("p",null,"There are multiple ways to attach headers to a response:"),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"addHeaders")," helper on response:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.http._\n\nResponse.ok.addHeader(Header.ContentLength(0L))\n// res0: Response = zio.http.Response$BasicResponse$$anon$1@dc573f45\n")),(0,r.kt)("p",null,"Through ",(0,r.kt)("inlineCode",{parentName:"p"},"Response")," constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"Response(\n  status = Status.Ok,\n  // Setting response header \n  headers = Headers(Header.ContentLength(0L)),\n  body = Body.empty\n)\n// res1: Response = zio.http.Response$BasicResponse@bb8220a8\n")),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"Middlewares"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import RequestHandlerMiddlewares.addHeader\n\nHandler.ok @@ addHeader(Header.ContentLength(0L))\n// res2: Handler[Any, Nothing, Request, Response] = zio.http.Handler$$anon$4@561494af\n")),(0,r.kt)("h3",{id:"reading-headers-from-request"},"Reading Headers from ",(0,r.kt)("inlineCode",{parentName:"h3"},"Request")),(0,r.kt)("p",null,"On the Server-side you can read Request headers as given below"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'Http.collect[Request] {\n  case req@Method.GET -> Root / "streamOrNot" => Response.text(req.headers.map(_.toString).mkString("\\n"))\n}\n// res3: Http[Any, Nothing, Request, Response] = zio.http.Http$CollectHandler$$anon$17@362ad436\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Detailed examples ")),(0,r.kt)("p",null,"Example below shows how the Headers could be added to a response by using ",(0,r.kt)("inlineCode",{parentName:"p"},"Response")," constructors and how a custom\nheader is added to ",(0,r.kt)("inlineCode",{parentName:"p"},"Response")," through ",(0,r.kt)("inlineCode",{parentName:"p"},"addHeader"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\nimport zio.stream._\n\nobject SimpleResponseDispatcher extends ZIOAppDefault {\n  override def run =\n  // Starting the server (for more advanced startup configuration checkout `HelloWorldAdvanced`)\n    Server.serve(app).provide(Server.default)\n\n  // Create a message as a Chunk[Byte]\n  val message = Chunk.fromArray("Hello world !\\r\\n".getBytes(Charsets.Http))\n  // Use `Http.collect` to match on route\n  val app: App[Any] =\n    Http.collect[Request] {\n      // Simple (non-stream) based route\n      case Method.GET -> Root / "health" => Response.ok\n\n      // From Request(req), the headers are accessible.\n      case req@Method.GET -> Root / "streamOrNot" =>\n        // Checking if client is able to handle streaming response\n        val acceptsStreaming: Boolean = req.header(Header.Accept).exists(_.mimeTypes.contains(Header.Accept.MediaTypeWithQFactor(MediaType.application.`octet-stream`, None)))\n        if (acceptsStreaming)\n          Response(\n            status = Status.Ok,\n            // Setting response header \n            headers = Headers(Header.ContentLength(message.length.toLong)), // adding CONTENT-LENGTH header\n            body = Body.fromStream(ZStream.fromChunk(message)), // Encoding content using a ZStream\n          )\n        else {\n          // Adding a custom header to Response\n          Response(status = Status.Accepted, body = Body.fromChunk(message)).addHeader("X-MY-HEADER", "test")\n        }\n    }\n}\n\n')),(0,r.kt)("p",null,"The following example shows how Headers could be added to ",(0,r.kt)("inlineCode",{parentName:"p"},"Response")," in a ",(0,r.kt)("inlineCode",{parentName:"p"},"RequestHandlerMiddleware")," implementation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"\n/**\n * Creates an authentication middleware that only allows authenticated requests to be passed on to the app.\n */\nfinal def customAuth(\n                      verify: Headers => Boolean,\n                      responseHeaders: Headers = Headers.empty,\n                      responseStatus: Status = Status.Unauthorized,\n                    ): RequestHandlerMiddleware[Nothing, Any, Nothing, Any] =\n  new RequestHandlerMiddleware.Simple[Any, Nothing] {\n    override def apply[R1 <: Any, Err1 >: Nothing](\n                                                    handler: Handler[R1, Err1, Request, Response],\n                                                  )(implicit trace: Trace): Handler[R1, Err1, Request, Response] =\n      Handler.fromFunctionHandler[Request] { request =>\n        if (verify(request.headers)) handler\n        else Handler.status(responseStatus).addHeaders(responseHeaders)\n      }\n  }\n\n")),(0,r.kt)("p",null,"More examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/zio/zio-http/blob/main/example/src/main/scala/BasicAuth.scala"},"BasicAuth")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/zio/zio-http/blob/main/example/src/main/scala/Authentication.scala"},"Authentication")))),(0,r.kt)("h2",{id:"client-side"},"Client-side"),(0,r.kt)("h3",{id:"adding-headers-to-request"},"Adding headers to ",(0,r.kt)("inlineCode",{parentName:"h3"},"Request")),(0,r.kt)("p",null,"ZIO-HTTP provides a simple way to add headers to a client ",(0,r.kt)("inlineCode",{parentName:"p"},"Request"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val headers = Headers(Header.Host("sports.api.decathlon.com"), Header.Accept(MediaType.application.json))\nClient.request("http://sports.api.decathlon.com/test", headers = headers)\n')),(0,r.kt)("h3",{id:"reading-headers-from-response"},"Reading headers from ",(0,r.kt)("inlineCode",{parentName:"h3"},"Response")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'Client.request("http://sports.api.decathlon.com/test").map(_.headers)\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("b",null,"Detailed examples")," "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The sample below shows how a header could be added to a client request:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\n\nobject SimpleClientJson extends ZIOAppDefault {\n  val url = "http://sports.api.decathlon.com/groups/water-aerobics"\n  // Construct headers\n  val headers = Headers(Header.Host("sports.api.decathlon.com"), Header.Accept(MediaType.application.json))\n\n  val program = for {\n    // Pass headers to request\n    res <- Client.request(url, headers = headers)\n    // List all response headers\n    _ <- Console.printLine(res.headers.toList.mkString("\\n"))\n    data <-\n      // Check if response contains a specified header with a specified value.\n      if (res.header(Header.ContentType).exists(_.mediaType == MediaType.application.json))\n        res.body.asString\n      else\n        res.body.asString\n    _ <- Console.printLine(data)\n  } yield ()\n\n  override def run =\n    program.provide(Client.default)\n\n}\n'))),(0,r.kt)("h2",{id:"headers-dsl"},"Headers DSL"),(0,r.kt)("p",null,"Headers DSL provides plenty of powerful operators that can be used to add, remove, modify and verify headers. Headers\nAPIs could be used on client, server, and middleware."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"zio.http.Headers")," - represents an immutable collection of headers\n",(0,r.kt)("inlineCode",{parentName:"p"},"zio.http.Header"),"  - a collection of all the standard headers"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Headers")," have following type of helpers"),(0,r.kt)("p",null,"Constructors - Provides a list of helpful methods that can create ",(0,r.kt)("inlineCode",{parentName:"p"},"Headers"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'// create a simple Accept header:\nHeaders(Header.Accept(MediaType.application.json))\n// res6: Headers = Iterable(\n//   Accept(\n//     mimeTypes = NonEmptyChunk(MediaTypeWithQFactor(MediaType(application,json,true,true,List(json, map),Map(),Map()),None))\n//   )\n// )\n\n// create a basic authentication header:\nHeaders(Header.Authorization.Basic("username", "password"))\n// res7: Headers = Iterable(\n//   Basic(username = "username", password = "password")\n// )\n')),(0,r.kt)("p",null,"Getters - Provides a list of operators that parse and extract data from the ",(0,r.kt)("inlineCode",{parentName:"p"},"Headers"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'// retrieving the value of Accept header value:\nval acceptHeader: Headers = Headers(Header.Accept(MediaType.application.json))\n// acceptHeader: Headers = Iterable(\n//   Accept(\n//     mimeTypes = NonEmptyChunk(MediaTypeWithQFactor(MediaType(application,json,true,true,List(json, map),Map(),Map()),None))\n//   )\n// )\nval acceptHeaderValue: Option[CharSequence] = acceptHeader.header(Header.Accept).map(_.renderedValue)\n// acceptHeaderValue: Option[CharSequence] = Some(value = "application/json")\n\n\n// retrieving a bearer token from Authorization header:\nval authorizationHeader: Headers = Headers(Header.Authorization.Bearer("test"))\n// authorizationHeader: Headers = Iterable(Bearer(token = "test"))\nval authorizationHeaderValue: Option[String] = acceptHeader.header(Header.Authorization).map(_.renderedValue)\n// authorizationHeaderValue: Option[String] = None\n')),(0,r.kt)("p",null,"Modifiers - Provides a list of operators that modify the current ",(0,r.kt)("inlineCode",{parentName:"p"},"Headers"),". Once modified, a new instance of the same\ntype is returned."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"// add Accept header:\nHeaders.empty.addHeader(Header.Accept(MediaType.application.json))\n// res8: Headers = Iterable(\n//   Accept(\n//     mimeTypes = NonEmptyChunk(MediaTypeWithQFactor(MediaType(application,json,true,true,List(json, map),Map(),Map()),None))\n//   )\n// )\n")),(0,r.kt)("p",null,"Checks - Provides a list of operators that checks if the ",(0,r.kt)("inlineCode",{parentName:"p"},"Headers")," meet the give constraints."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val contentTypeHeader: Headers = Headers(Header.ContentType(MediaType.application.json))\n// contentTypeHeader: Headers = Iterable(\n//   ContentType(\n//     mediaType = MediaType(\n//       mainType = "application",\n//       subType = "json",\n//       compressible = true,\n//       binary = true,\n//       fileExtensions = List("json", "map"),\n//       extensions = Map(),\n//       parameters = Map()\n//     ),\n//     boundary = None,\n//     charset = None\n//   )\n// )\nval isHeaderPresent: Boolean   = contentTypeHeader.hasHeader(Header.ContentType) \n// isHeaderPresent: Boolean = true \nval isJsonContentType: Boolean = contentTypeHeader.hasJsonContentType\n// isJsonContentType: Boolean = true\n')))}u.isMDXComponent=!0}}]);