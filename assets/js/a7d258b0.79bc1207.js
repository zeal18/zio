"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[52855],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),f=a,d=p["".concat(o,".").concat(f)]||p[f]||m[f]||s;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=f;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<s;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},29659:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const s={id:"execution-strategy",title:"Execution Strategy"},i=void 0,l={unversionedId:"reference/test/aspects/execution-strategy",id:"reference/test/aspects/execution-strategy",title:"Execution Strategy",description:"ZIO Test has two different strategies to run members of a test suite",source:"@site/docs/reference/test/aspects/execution-strategy.md",sourceDirName:"reference/test/aspects",slug:"/reference/test/aspects/execution-strategy",permalink:"/reference/test/aspects/execution-strategy",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/aspects/execution-strategy.md",tags:[],version:"current",frontMatter:{id:"execution-strategy",title:"Execution Strategy"},sidebar:"reference-sidebar",previous:{title:"Environment-specific Tests",permalink:"/reference/test/aspects/environment-specific-tests"},next:{title:"Flaky and Non-flaky Tests",permalink:"/reference/test/aspects/flaky-and-non-flaky-tests"}},o={},u=[{value:"Parallel",id:"parallel",level:2},{value:"Sequential",id:"sequential",level:2}],c={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"ZIO Test has two different strategies to run members of a test suite: ",(0,a.kt)("em",{parentName:"p"},"sequential")," and ",(0,a.kt)("em",{parentName:"p"},"parallel"),". Accordingly, there are two test aspects for specifying the execution strategy:"),(0,a.kt)("h2",{id:"parallel"},"Parallel"),(0,a.kt)("p",null,"The default strategy is parallel. We can explicitly enable it using ",(0,a.kt)("inlineCode",{parentName:"p"},"TestAspect.parallel"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.test.{ test, _ }\n\nsuite("Parallel")(\n  test("A")(Live.live(ZIO.attempt("Running Test A").delay(1.second)).debug.map(_ => assertTrue(true))),\n  test("B")(ZIO.attempt("Running Test B").debug.map(_ => assertTrue(true))),\n  test("C")(Live.live(ZIO.attempt("Running Test C").delay(500.millis)).debug.map(_ => assertTrue(true)))\n) @@ TestAspect.parallel\n')),(0,a.kt)("p",null,"After running this suite, we have the following output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Running Test B\nRunning Test C\nRunning Test A\n+ Parallel\n  + A\n  + B\n  + C\n")),(0,a.kt)("p",null,"To change the degree of the parallelism, we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"parallelN")," test aspect. It takes the number of fibers and executes the members of a suite in parallel up to the specified number of concurrent fibers."),(0,a.kt)("h2",{id:"sequential"},"Sequential"),(0,a.kt)("p",null,"To execute them sequentially, we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"sequential")," test aspect:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.test.{ test, _ }\n\nsuite("Sequential")(\n  test("A")(Live.live(ZIO.attempt("Running Test A").delay(1.second)).debug.map(_ => assertTrue(true))),\n  test("B")(ZIO.attempt("Running Test B").debug.map(_ => assertTrue(true))),\n  test("C")(Live.live(ZIO.attempt("Running Test C").delay(500.millis)).debug.map(_ => assertTrue(true)))\n) @@ TestAspect.sequential\n')),(0,a.kt)("p",null,"And here is the output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Running Test A\nRunning Test B\nRunning Test C\n+ Sequential\n  + A\n  + B\n  + C\n")))}m.isMDXComponent=!0}}]);