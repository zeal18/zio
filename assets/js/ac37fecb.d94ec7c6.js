"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[36485],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(h,p(p({ref:t},c),{},{components:n})):r.createElement(h,p({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,p=new Array(i);p[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,p[1]=o;for(var s=2;s<i;s++)p[s]=n[s];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},81269:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={id:"opentracing-example",title:"OpenTracing Example"},p=void 0,o={unversionedId:"zio-telemetry/opentracing-example",id:"zio-telemetry/opentracing-example",title:"OpenTracing Example",description:"You can find the source code here.",source:"@site/docs/zio-telemetry/opentracing-example.md",sourceDirName:"zio-telemetry",slug:"/zio-telemetry/opentracing-example",permalink:"/zio-telemetry/opentracing-example",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-telemetry/opentracing-example.md",tags:[],version:"current",frontMatter:{id:"opentracing-example",title:"OpenTracing Example"},sidebar:"ecosystem-sidebar",previous:{title:"OpenTracing",permalink:"/zio-telemetry/opentracing"},next:{title:"OpenCensus",permalink:"/zio-telemetry/opencensus"}},l={},s=[{value:"Proxy Service",id:"proxy-service",level:3},{value:"ProxyApp",id:"proxyapp",level:4},{value:"ProxyHttpApp",id:"proxyhttpapp",level:4},{value:"Backend Service",id:"backend-service",level:3},{value:"BackendApp",id:"backendapp",level:4},{value:"BackendHttpApp",id:"backendhttpapp",level:4},{value:"Status",id:"status",level:3},{value:"Statuses",id:"statuses",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Running",id:"running",level:3}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"You can find the source code ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-telemetry/tree/series/2.x/opentracing-example"},"here"),"."),(0,a.kt)("p",null,"Firstly, start ",(0,a.kt)("a",{parentName:"p",href:"https://www.jaegertracing.io"},"Jaeger")," by running the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --rm -it \\\n  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \\\n  -p 5775:5775/udp \\\n  -p 6831:6831/udp \\\n  -p 6832:6832/udp \\\n  -p 5778:5778 \\\n  -p 16686:16686 \\\n  -p 14268:14268 \\\n  -p 9411:9411 \\\n  jaegertracing/all-in-one:1.36\n")),(0,a.kt)("p",null,"To check if it's running properly visit ",(0,a.kt)("a",{parentName:"p",href:"http://localhost:16686/"},"Jaeger UI"),".\nMore info can be found ",(0,a.kt)("a",{parentName:"p",href:"https://www.jaegertracing.io/docs/1.6/getting-started/#all-in-one-docker-image"},"here"),"."),(0,a.kt)("p",null,"Our application contains two services:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/zio/zio-telemetry/blob/series/2.x/opentracing-example/src/main/scala/zio/telemetry/opentracing/example/ProxyApp.scala"},"Proxy")," service"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/zio/zio-telemetry/blob/series/2.x/opentracing-example/src/main/scala/zio/telemetry/opentracing/example/BackendApp.scala"},"Backend")," service")),(0,a.kt)("h3",{id:"proxy-service"},"Proxy Service"),(0,a.kt)("p",null,"Represents the entry point of the distributed system example. It exposes the ",(0,a.kt)("inlineCode",{parentName:"p"},"/statuses")," endpoint which returns a list of system's services statuses."),(0,a.kt)("p",null,"The service consists of ",(0,a.kt)("inlineCode",{parentName:"p"},"ProxyHttpServer")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ProxyHttpApp"),"."),(0,a.kt)("h4",{id:"proxyapp"},"ProxyApp"),(0,a.kt)("p",null,"In order to start the service run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'sbt "opentracingExample/runMain zio.telemetry.opentracing.example.ProxyApp"\n')),(0,a.kt)("p",null,"The console should output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"running zio.telemetry.opentracing.example.ProxyApp\n")),(0,a.kt)("p",null,"if the server has been started properly."),(0,a.kt)("h4",{id:"proxyhttpapp"},"ProxyHttpApp"),(0,a.kt)("p",null,"Provides the implementation of the service, which returns the status of the backend service and the proxy service itself.\n",(0,a.kt)("inlineCode",{parentName:"p"},"Client")," is used to retrieve the status of the backend service."),(0,a.kt)("p",null,"This is also where the tracing of the application is done, by collecting the timings and logging things such as the span\ntype and the HTTP method. The context is injected into a carrier, and passed along to the backend through ",(0,a.kt)("inlineCode",{parentName:"p"},"Client"),",\nwhere a child span is created, and logging of the backend service is done."),(0,a.kt)("h3",{id:"backend-service"},"Backend Service"),(0,a.kt)("p",null,'Represents the "internal" service of the system. It exposes the ',(0,a.kt)("inlineCode",{parentName:"p"},"/status")," endpoint which returns the status of the backend service."),(0,a.kt)("p",null,"The service consists of ",(0,a.kt)("inlineCode",{parentName:"p"},"BackendServer")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"BackendApp"),"."),(0,a.kt)("h4",{id:"backendapp"},"BackendApp"),(0,a.kt)("p",null,"In order to start the service run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'sbt "opentracingExample/runMain zio.telemetry.opentracing.example.BackendApp"\n')),(0,a.kt)("p",null,"The console should output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"running zio.telemetry.opentracing.example.BackendApp\n")),(0,a.kt)("p",null,"if the server has been started properly."),(0,a.kt)("h4",{id:"backendhttpapp"},"BackendHttpApp"),(0,a.kt)("p",null,"Provides the implementation of the service, which is to simply return the status of the backend service."),(0,a.kt)("h3",{id:"status"},"Status"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"final case class Status(name: String, status: String)\n")),(0,a.kt)("p",null,"Represents the status of a service."),(0,a.kt)("h3",{id:"statuses"},"Statuses"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"final case class Statuses(data: List[Status]) extends AnyVal\n")),(0,a.kt)("p",null,"Represents the statuses of a number of services."),(0,a.kt)("h3",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"Configuration is given in ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-telemetry/blob/82787facf973feeb9c128f21a964fad15d7c591d/opentracing-example/src/main/resources/application.conf"},"application.conf"),"."),(0,a.kt)("h3",{id:"running"},"Running"),(0,a.kt)("p",null,"After both services are properly started, running the following command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X GET http://localhost:8080/statuses\n")),(0,a.kt)("p",null,"should return the following response:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{"data":[{"name":"backend","status":"up"},{"name":"proxy","status":"up"}]}\n')),(0,a.kt)("p",null,"Simultaneously, it will create trace that will be stored in Jaeger backend."))}d.isMDXComponent=!0}}]);