"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[95147],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(t),m=o,f=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return t?a.createElement(f,r(r({ref:n},p),{},{components:t})):a.createElement(f,r({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:o,r[1]=l;for(var d=2;d<i;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},12547:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=t(87462),o=(t(67294),t(3905));const i={id:"backends",title:"Backends"},r="Backends",l={unversionedId:"zio-flow/backends",id:"zio-flow/backends",title:"Backends",description:"This page lists all the provided backend implementations for storing persistent data in the ZIO Flow executors.",source:"@site/docs/zio-flow/backends.md",sourceDirName:"zio-flow",slug:"/zio-flow/backends",permalink:"/zio-flow/backends",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-flow/backends.md",tags:[],version:"current",frontMatter:{id:"backends",title:"Backends"},sidebar:"ecosystem-sidebar",previous:{title:"Execution",permalink:"/zio-flow/execution"},next:{title:"Testing",permalink:"/zio-flow/testing"}},s={},d=[{value:"RocksDB",id:"rocksdb",level:2},{value:"Cassandra",id:"cassandra",level:2},{value:"Supported Versions",id:"supported-versions",level:3},{value:"Database Setup",id:"database-setup",level:3},{value:"Performance/Scaling Considerations:",id:"performancescaling-considerations",level:3},{value:"DynamoDB",id:"dynamodb",level:2},{value:"Metrics",id:"metrics",level:3},{value:"Database Setup",id:"database-setup-1",level:3},{value:"Performance/Scaling Considerations:",id:"performancescaling-considerations-1",level:3},{value:"In-memory",id:"in-memory",level:2}],p={toc:d},c="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"backends"},"Backends"),(0,o.kt)("p",null,"This page lists all the provided ",(0,o.kt)("em",{parentName:"p"},"backend implementations")," for storing persistent data in the ZIO Flow executors.\nBackend implementations need to implement two interfaces:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"KeyValueStore")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"IndexedStore"))),(0,o.kt)("p",null,"Custom backend implementations are possible by implementing these traits, and a shared ",(0,o.kt)("em",{parentName:"p"},"test suite")," is published to\nvalidate the custom implementations (more information about this can be found in\nthe ",(0,o.kt)("a",{parentName:"p",href:"testing#testing-backends"},"testing section"),"."),(0,o.kt)("h2",{id:"rocksdb"},"RocksDB"),(0,o.kt)("p",null,"The RocksDb backend is implemented in the following module:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-flow-rocksdb" % "1.0.0-RC4"\n')),(0,o.kt)("p",null,"RocksDb databases are stored in local files. You can use the same file for the key-value store and the indexed store,\nbut you don't have to."),(0,o.kt)("h2",{id:"cassandra"},"Cassandra"),(0,o.kt)("p",null,"To use Cassandra as a ZIO Flow backend, add the following dependency:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-flow-cassandra" % "1.0.0-RC4"\n')),(0,o.kt)("h3",{id:"supported-versions"},"Supported Versions"),(0,o.kt)("p",null,"The Cassandra module supports Cassandra 3.x, Cassandra 4.x and ScyllaDB 4.x. Specifically, we test against Cassandra\n3.11, Cassandra 4.1, and ScyllaDB 4.5. See ",(0,o.kt)("inlineCode",{parentName:"p"},"CassandraKeyValueStoreSpec.scala")," in the test suite for more details."),(0,o.kt)("h3",{id:"database-setup"},"Database Setup"),(0,o.kt)("p",null,"The Cassandra module requires two tables (column family) for persistence."),(0,o.kt)("p",null,"To create these tables, run the following CQL statements:"),(0,o.kt)("p",null,"for key-value store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cql"},"CREATE TABLE _zflow_key_value_store (\n  zflow_kv_namespace  VARCHAR,\n  zflow_kv_key        BLOB,\n  zflow_kv_timestamp  BIGINT,\n  zflow_kv_value      BLOB,\n  PRIMARY KEY (zflow_kv_namespace, zflow_kv_key, zflow_kv_timestamp)\n);\n")),(0,o.kt)("p",null,"for indexed store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cql"},"CREATE TABLE _zflow_idx_store (\n  zflow_idx_topic  VARCHAR,\n  zflow_idx_index  BIGINT,\n  zflow_idx_value  BLOB,\n  PRIMARY KEY (zflow_idx_topic, zflow_idx_index)\n);\n")),(0,o.kt)("p",null,"You should add table options to this statement in a production environment for tuning. Please consult the official\ndocumentations of the database product of your choosing."),(0,o.kt)("h3",{id:"performancescaling-considerations"},"Performance/Scaling Considerations:"),(0,o.kt)("p",null,"As you can see from the CQL above, the primary key is composed of the three columns, ",(0,o.kt)("inlineCode",{parentName:"p"},"zflow_kv_namespace"),"\n, ",(0,o.kt)("inlineCode",{parentName:"p"},"zflow_kv_key")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"zflow_kv_timestamp"),". In particular, ",(0,o.kt)("inlineCode",{parentName:"p"},"zflow_kv_namespace")," is the partition key and ",(0,o.kt)("inlineCode",{parentName:"p"},"zflow_kv_key"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"zflow_kv_timestamp")," are the clustering keys. Assuming the default partitioner (Murmur3Partitioner) is used, data\nwill be partitioned by the hash values of the ",(0,o.kt)("inlineCode",{parentName:"p"},"zflow_kv_namespace")," column. If one small set of namespace values are the\nmajority for all possible values, that will create data skew and can have a big impact to your cluster down the road.\nSome consideration is needed when deciding the type of values ",(0,o.kt)("inlineCode",{parentName:"p"},"zflow_kv_namespace")," should store."),(0,o.kt)("h2",{id:"dynamodb"},"DynamoDB"),(0,o.kt)("p",null,"To use AWS DynamoDb as a key-value store or indexed store implementation add the following dependency:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-flow-dynamodb" % "1.0.0-RC4"\n')),(0,o.kt)("h3",{id:"metrics"},"Metrics"),(0,o.kt)("p",null,"The DynamoDb backend does not publish any metrics by default, but you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"zio-aws"),"'s built-in metrics aspect to\nenable AWS operation level metrics:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'DynamoDb.live @@ zio.aws.core.aspects.callDuration(\n  prefix = "zioflow",\n  boundaries = Histogram.Boundaries.exponential(0.01, 2, 14)\n)\n')),(0,o.kt)("h3",{id:"database-setup-1"},"Database Setup"),(0,o.kt)("p",null,"The DynamoDB module requires two tables for persistence (one for key-value store, one for indexed store).\nHere's a Python script to create the table:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import boto3\n\ndynamodb = boto3.resource('dynamodb')\n\ndynamodb.create_table (\n    TableName = '_zflow_key_value_store',\n    AttributeDefinitions = [\n         {\n             'AttributeName': 'zflow_kv_key',\n             'AttributeType': 'B'\n         },\n         {\n             'AttributeName': 'zflow_kv_timestamp',\n             'AttributeType': 'N'\n         }\n    ],    \n    KeySchema = [\n        {\n            'AttributeName': 'zflow_kv_key',\n            'KeyType': 'HASH'\n        },\n        {\n            'AttributeName': 'zflow_kv_timestamp',\n            'KeyType': 'RANGE'\n        }\n    ],\n    GlobalSecondaryIndexes = [\n        {\n            'IndexName': 'namespace_index',\n            'KeySchema': [\n                {\n                    'AttributeName': 'zflow_kv_namespace',\n                    'KeyType': 'HASH'\n                }\n            ],\n            'Projection': {\n                'NonKeyAttributes': ['zflow_kv_value'],\n                'ProjectionType': 'INCLUDE'\n            },\n            'ProvisionedThroughput' = {\n                'ReadCapacityUnits': 1,\n                'WriteCapacityUnits': 1\n            }\n        }\n    ],\n    ProvisionedThroughput = {\n        'ReadCapacityUnits': 1,\n        'WriteCapacityUnits': 1\n    }\n)\n\ndynamodb.create_table (\n    TableName = '_zflow_indexed_store',\n    AttributeDefinitions = [\n         {\n             'AttributeName': 'zflow_idx_topic',\n             'AttributeType': 'S'\n         },\n         {\n             'AttributeName': 'zflow_idx_index',\n             'AttributeType': 'N'\n         }\n    ],    \n    KeySchema = [\n        {\n            'AttributeName': 'zflow_idx_topic',\n            'KeyType': 'HASH'\n        },\n        {\n            'AttributeName': 'zflow_idx_index',\n            'KeyType': 'RANGE'\n        }\n    ],    \n    ProvisionedThroughput = {\n        'ReadCapacityUnits': 1,\n        'WriteCapacityUnits': 1\n    }\n)\n")),(0,o.kt)("p",null,"Of course, you can use your favourite AWS tool to create the table (e.g. DynamoDB Console) or to automate the creation (\ne.g. via CloudFormation). You should customize the ",(0,o.kt)("inlineCode",{parentName:"p"},"ProvisionedThroughput")," settings when the table is provisioned."),(0,o.kt)("h3",{id:"performancescaling-considerations-1"},"Performance/Scaling Considerations:"),(0,o.kt)("p",null,"As you can see from the script above, the primary key is composed of the two columns, ",(0,o.kt)("inlineCode",{parentName:"p"},"zflow_kv_key"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"zflow_kv_timestamp"),". In particular, ",(0,o.kt)("inlineCode",{parentName:"p"},"zflow_kv_key")," is the partition key and ",(0,o.kt)("inlineCode",{parentName:"p"},"zflow_kv_timestamp")," is the sort key.\nInternally, zio-flow will store the namespace as part of the ",(0,o.kt)("inlineCode",{parentName:"p"},"zflow_kv_key")," value as well, but it will also\nstore it in the ",(0,o.kt)("inlineCode",{parentName:"p"},"zflow_kv_namespace")," attribute for easy access to all values within a namespace. This requires\na secondary index to be set up on the ",(0,o.kt)("inlineCode",{parentName:"p"},"zflow_kv_namespace")," attribute."),(0,o.kt)("h2",{id:"in-memory"},"In-memory"),(0,o.kt)("p",null,"ZIO Flow also provides a default in-memory implementation for both the key-value store and the indexed store. These are\nuseful for running ZIO Flow programs in tests, but they are not safe to use in production."),(0,o.kt)("p",null,"The following layers create the in-memory implementations of the stores:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.flow.runtime._\n\nKeyValueStore.inMemory\n// res0: zio.ZLayer[Any, Nothing, KeyValueStore] = Suspend(\n//   self = zio.ZLayer$ScopedEnvironmentPartiallyApplied$$$Lambda$13761/0x000000080335e2c8@141d6bd8\n// )\nIndexedStore.inMemory\n// res1: zio.ZLayer[Any, Nothing, IndexedStore] = Suspend(\n//   self = zio.ZLayer$$$Lambda$13752/0x0000000803352838@3db1a527\n// )\n")))}u.isMDXComponent=!0}}]);