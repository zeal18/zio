"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[92311],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),i=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=i(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=i(n),f=r,h=u["".concat(s,".").concat(f)]||u[f]||d[f]||o;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:r,l[1]=c;for(var i=2;i<o;i++)l[i]=n[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},39249:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>i});var a=n(87462),r=(n(67294),n(3905));const o={id:"supported-constructs",title:"Scala Constructs Supported by ZIO-Direct",sidebar_label:"Supported Constructs"},l="Supported Constructs",c={unversionedId:"zio-direct/supported-constructs",id:"zio-direct/supported-constructs",title:"Scala Constructs Supported by ZIO-Direct",description:"ZIO-direct supports using the following constructs inside of a defer block. Approximate translations of the what the Scala code looks like are available below. In order to see the exact translations for any code in a defer block, use defer.info.",source:"@site/docs/zio-direct/supported-constructs.md",sourceDirName:"zio-direct",slug:"/zio-direct/supported-constructs",permalink:"/zio-direct/supported-constructs",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-direct/supported-constructs.md",tags:[],version:"current",frontMatter:{id:"supported-constructs",title:"Scala Constructs Supported by ZIO-Direct",sidebar_label:"Supported Constructs"},sidebar:"ecosystem-sidebar",previous:{title:"Introduction",permalink:"/zio-direct/"},next:{title:"IntelliJ Support",permalink:"/zio-direct/intellij-support"}},s={},i=[{value:"blocks",id:"blocks",level:3},{value:"if/else",id:"ifelse",level:3},{value:"match",id:"match",level:3},{value:"try",id:"try",level:3},{value:"while",id:"while",level:3},{value:"for-loop/foreach",id:"for-loopforeach",level:3}],p={toc:i},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"supported-constructs"},"Supported Constructs"),(0,r.kt)("p",null,"ZIO-direct supports using the following constructs inside of a ",(0,r.kt)("inlineCode",{parentName:"p"},"defer")," block. Approximate translations of the what the Scala code looks like are available below. In order to see the exact translations for any code in a defer block, use ",(0,r.kt)("inlineCode",{parentName:"p"},"defer.info"),"."),(0,r.kt)("h3",{id:"blocks"},"blocks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'defer {\n  val a = ZIO.succeed("Hello").run\n  val b = ZIO.succeed("World").run\n  a + " " + b\n}\n')),(0,r.kt)("p",null,"Translation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'ZIO.succeed("Hello").flatMap { a =>\n  ZIO.succeed("World").map { b =>\n    a + " " + b\n  }\n}\n')),(0,r.kt)("p",null,"Blocks can also have nested blocks."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'defer {\n  val a = ZIO.succeed("Hello").run\n  val b = {\n    val x = ZIO.succeed("to").run\n    val y = ZIO.succeed("World").run\n    x + " " + y\n  }\n  a + " " + b\n}\n')),(0,r.kt)("p",null,"Translation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'ZIO.succeed("Hello").flatMap { a =>\n  {\n    ZIO.succeed("to").flatMap { x =>\n      ZIO.succeed("World").map { y =>\n        x + " " + y\n      }\n    }\n  }.map { b =>\n    a + " " + b\n  }\n}\n')),(0,r.kt)("h3",{id:"ifelse"},"if/else"),(0,r.kt)("p",null,"If statements with one or multiple ZIO.run values in the condition(s) and action(s)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'defer {\n  if (ZIO.succeed(123).run < 456 && ZIO.succeed("foo") == "foo")\n    ZIO.succeed("a").run\n  else\n    ZIO.succeed("b").run\n}\n')),(0,r.kt)("p",null,"Translation:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note that each condition is separated into it's own nested flatMap chain step\n(from left-to-right) so if earlier conditions yield ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," ZIO computations of\nlater ones will not be executed."),(0,r.kt)("pre",{parentName:"blockquote"},(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'ZIO.succeed(123).flatMap { a =>\n  if (a < 456)\n    ZIO.succeed("foo").flatMap { b =>\n      if (b == "foo")\n        ZIO.succeed("a")\n      else\n        ZIO.succeed("b")\n    }\n  else\n    ZIO.succeed("b")\n}\n'))),(0,r.kt)("h3",{id:"match"},"match"),(0,r.kt)("p",null,'Match statements with ZIO.run in the left-hand-side (before "match") and/or the right-hand-side (after the "=>").\nZIO.run calls inside of match guards (i.e. if-statements after ',(0,r.kt)("inlineCode",{parentName:"p"},"case Clause"),") are not supported yet."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'defer {\n  ZIO.succeed("Hello").run match {\n    case hello @ "Hello" =>\n      val world = ZIO.succeed(" World").run\n      hello + " " + world\n    case _ =>\n      "Nothing"\n  }\n}\n')),(0,r.kt)("p",null,"Translation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'ZIO.succeed("Hello").flatMap { x =>\n  x match {\n    case hello @ "Hello" =>\n      ZIO.succeed(" World").flatMap { world =>\n        hello + " " + world\n      }\n    case _ =>\n      ZIO.succeed("Nothing")\n  }\n}\n')),(0,r.kt)("h3",{id:"try"},"try"),(0,r.kt)("p",null,'Try statements with ZIO.run in the left-hand-side (before "try") and/or the right-hand-side (after the "=>").'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"defer {\n  try {\n    val a = ZIO.succeed(123).run\n    val b = ZIO.attempt(somethingUnsafe).run\n    a + b\n  } catch {\n    case e: Exception =>\n      ZIO.succeed(789).run\n  }\n}\n")),(0,r.kt)("p",null,"Translation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"ZIO.succeed(123).flatMap { a =>\n  ZIO.attempt(somethingUnsafe).map { b =>\n    a + b\n  }.catchAll { e =>\n    ZIO.succeed(789)\n  }\n}\n")),(0,r.kt)("p",null,"Note that because try-statements are translated into ZIO.catchAll, errors that go into fail fail-channel\nwill not be caught by the catch block. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'def throwsException() = throw new Exception("foo")\n\ndefer {\n  try {\n    // Will not be caught!!\n    ZIO.succeed(throwsException()).run\n  } catch {\n    case e: Exception => 123\n  }\n}\n\ndefer {\n  try {\n    // WILL be caught!!\n    ZIO.attemt(throwsException()).run\n  } catch {\n    case e: Exception => 123\n  }\n}\n')),(0,r.kt)("p",null,"In cases where methods that throw exceptions not not wrapped into ZIO computations, they will also\nnot be caught because the assumption is that they are pure-computations hence can be wrapped into ",(0,r.kt)("inlineCode",{parentName:"p"},"ZIO.succeed")," blocks."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'def throwsException() = throw new Exception("foo")\n\ndefer {\n  try {\n    // Will not be caught!!\n    throwsException()\n  } catch {\n    case e: Exception => 123\n  }\n}\n\n// Translation:\nZIO.succeed(throwsException()).catchAll { e =>\n  case e: Exception => 123\n}\n')),(0,r.kt)("p",null,"In order to rectify this situation, a region-based operator ",(0,r.kt)("inlineCode",{parentName:"p"},"unsafe { ... }")," can be used to wrap\nall blocks of code that could potentially throw exceptions. ZIO-Direct will the know to wrap\nthem into ",(0,r.kt)("inlineCode",{parentName:"p"},"ZIO.attempt")," clauses instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"ZIO.succeed"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'def throwsException() = throw new Exception("foo")\n\ndefer {\n  try {\n    unsafe {\n      // This WILL be caught!!\n      throwsException()\n    }\n  } catch {\n    case e: Exception => 123\n  }\n}\n\n// Translation:\nZIO.attempt(throwsException()).catchAll { e =>\n  case e: Exception => 123\n}\n')),(0,r.kt)("p",null,"Note that that ZIO computations with ",(0,r.kt)("inlineCode",{parentName:"p"},".run")," calls and other kinds of constructs supported by zio-direct\ncan be used inside of ",(0,r.kt)("inlineCode",{parentName:"p"},"unsafe")," blocks, and these computations will be used as-is (i.e. if they contain\nZIO.succeed calls the will not be changed into something else)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"defer {\n  try {\n    unsafe {\n      val a = ZIO.succeed(123).run\n      throwsException()\n      val b = ZIO.succeed(456).run\n      a + b\n    }\n  } catch {\n    case e: Exception => 123\n  }\n}\n\n// Translation:\nZIO.succeed(123).flatMap { a =>\n  ZIO.attempt(throwsException()).flatMap { _ =>\n    ZIO.succeed(456).map { b =>\n      a + b\n    }\n  }\n}.catchAll { e =>\n  case e: Exception => 123\n}\n")),(0,r.kt)("h3",{id:"while"},"while"),(0,r.kt)("p",null,"While-clauses will be translated into recursive functions that conditionally recurse into a flatMap call based on the while-condition."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Generally due to the presence of functions like ",(0,r.kt)("a",{parentName:"p",href:"https://zio.dev/reference/control-flow/#iterate"},(0,r.kt)("inlineCode",{parentName:"a"},"ZIO.iterate"))," and ",(0,r.kt)("a",{parentName:"p",href:"https://zio.dev/reference/test/aspects/repeat-and-retry/#repeat"},(0,r.kt)("inlineCode",{parentName:"a"},"ZIO.repeat"))," the critical use-case for ZIO-direct's while-loop should be limited.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'// Note that because mutable variable usage is generally not allowed in zio-direct the below code can only be run in "Lenient Mode."\nvar i = 0\ndefer {\n  while (i < 10) {\n    ZIO.attempt(println("Hello")).run\n    i += 1\n  }\n}\n\n// Translation:\nval i = 0\ndef loop(): ZIO[Any, Throwable, Unit] = {\n  if (i < 10) {\n    ZIO.attempt(println("Hello")).flatMap { _ =>\n      i += 1\n      loop()\n    }\n  } else {\n    ZIO.unit\n  }\n}\nloop()\n')),(0,r.kt)("p",null,"Since mutable variables are generally not allowed in ",(0,r.kt)("inlineCode",{parentName:"p"},"defer { ... }")," blocks, it is recommended to use mutable references from ZIO's\n",(0,r.kt)("a",{parentName:"p",href:"https://zio.dev/reference/concurrency/ref/"},(0,r.kt)("inlineCode",{parentName:"a"},"Ref"))," class instead."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'defer {\n  val ref = Ref.make(0).run\n  while (ref.get.run < 10) {\n    ZIO.attempt(println("Hello")).run\n    ref.update(_ + 1).run\n  }\n}\n\n// Translation:\nRef.make(0).flatMap { ref =>\n  def loop(): ZIO[Any, Throwable, Unit] = {\n    ref.get.flatMap { x =>\n      if (x < 10) {\n        ZIO.attempt(println("Hello")).flatMap { _ =>\n          ref.update(_ + 1).flatMap { _ =>\n            loop()\n          }\n        }\n      } else {\n        ZIO.unit\n      }\n    }\n  }\n  loop()\n}\n')),(0,r.kt)("h3",{id:"for-loopforeach"},"for-loop/foreach"),(0,r.kt)("p",null,"Scala for-loops and collection.foreach are the same thing (the former dis desugars into the latter).\nZIO-direct will translate them into ZIO.foreach calls."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Similar to while-loops, this construct is\nlargely overshawoed by ZIO's own ",(0,r.kt)("a",{parentName:"p",href:"https://zio.dev/reference/control-flow/#iterate"},(0,r.kt)("inlineCode",{parentName:"a"},"foreach"))," and ",(0,r.kt)("a",{parentName:"p",href:"https://zio.dev/reference/control-flow/#foreach"},(0,r.kt)("inlineCode",{parentName:"a"},"iterate"))," combinators.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"defer {\n  for (i <- 1 to 10) {\n    ZIO.attempt(println(i)).run\n  }\n}\n\n// Translation:\nZIO.foreach(1 to 10) { i =>\n  ZIO.attempt(println(i))\n}.map(_ => ()) // since the final result must have a type of Unit\n")))}d.isMDXComponent=!0}}]);