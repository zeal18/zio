"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[61475],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85230:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={id:"index",title:"ZIO 2.x Interoperation with Cats 2.x",sidebar_label:"ZIO 2.x Interop Cats 2.x"},o=void 0,l={unversionedId:"zio2-interop-cats2/index",id:"zio2-interop-cats2/index",title:"ZIO 2.x Interoperation with Cats 2.x",description:"Installation",source:"@site/docs/zio2-interop-cats2/index.md",sourceDirName:"zio2-interop-cats2",slug:"/zio2-interop-cats2/",permalink:"/zio2-interop-cats2/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio2-interop-cats2/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"ZIO 2.x Interoperation with Cats 2.x",sidebar_label:"ZIO 2.x Interop Cats 2.x"},sidebar:"ecosystem-sidebar",previous:{title:"Caliban Deriving",permalink:"/caliban-deriving/"},next:{title:"ZIO 2.x Interop Cats 3.x",permalink:"/zio2-interop-cats3/"}},s={},c=[{value:"Installation",id:"installation",level:2},{value:"<code>ZIO</code> Cats Effect instances",id:"zio-cats-effect-instances",level:2},{value:"ConcurrentEffect",id:"concurrenteffect",level:2},{value:"Timer",id:"timer",level:3},{value:"cats-core",id:"cats-core",level:3},{value:"Example",id:"example",level:3}],p={toc:c},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sbt"},'libraryDependencies += "dev.zio" %% "zio-interop-cats" % "22.0.0.0"\n')),(0,a.kt)("h2",{id:"zio-cats-effect-instances"},(0,a.kt)("inlineCode",{parentName:"h2"},"ZIO")," Cats Effect instances"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"ZIO")," integrates with Typelevel libraries by providing an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"ConcurrentEffect")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"IO")," as required, for instance, by ",(0,a.kt)("inlineCode",{parentName:"p"},"fs2"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"doobie")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"http4s"),". Actually, I lied a little bit, it is not possible to implement ",(0,a.kt)("inlineCode",{parentName:"p"},"ConcurrentEffect")," for any error type since ",(0,a.kt)("inlineCode",{parentName:"p"},"ConcurrentEffect")," extends ",(0,a.kt)("inlineCode",{parentName:"p"},"MonadError")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"Throwable"),"."),(0,a.kt)("p",null,"For convenience we have defined an alias as follow:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"  type Task[A] = IO[Throwable, A]\n")),(0,a.kt)("p",null,"Therefore, we provide an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"ConcurrentEffect[Task]"),"."),(0,a.kt)("h2",{id:"concurrenteffect"},"ConcurrentEffect"),(0,a.kt)("p",null,"In order to get a ",(0,a.kt)("inlineCode",{parentName:"p"},"ConcurrentEffect[Task]")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"ConcurrentEffect[RIO[R, *]]")," we need an implicit ",(0,a.kt)("inlineCode",{parentName:"p"},"Runtime[R]")," in scope. The easiest way to get it is using ",(0,a.kt)("inlineCode",{parentName:"p"},"ZIO.runtime"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.effect._\nimport zio._\nimport zio.interop.catz._\n\ndef getCE = {\n  ZIO.runtime.map { implicit r: Runtime[Any] =>\n    val F: ConcurrentEffect[Task] = implicitly\n  }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Task.concurrentEffectWith")," method can automate this pattern:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect._\nimport zio._\nimport zio.interop.catz._\n\ndef fork = {\n  Task.concurrentEffectWith { implicit CE =>\n    CE.start(Task(println("Started task")))\n  }\n}\n')),(0,a.kt)("h3",{id:"timer"},"Timer"),(0,a.kt)("p",null,"In order to get a ",(0,a.kt)("inlineCode",{parentName:"p"},"cats.effect.Timer[Task]")," instance we need an extra import:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.interop.catz.implicits._\n")),(0,a.kt)("p",null,'The reason it is not provided by the default "interop" import is that it makes testing programs that require timing capabilities hard therefore an extra import wherever needed makes reasoning about it much easier.\nIt is not a good idea to use this import as it causes limitations in testing since it uses the ',(0,a.kt)("inlineCode",{parentName:"p"},"live")," implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"zio.Clock.Service"),". If you want to retain testability, do the following instead:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.effect._\nimport zio._\nimport zio.interop.catz._\n\nZIO.runtime[Clock].flatMap { implicit rts =>\n  val clock: Timer[Task] = rts.environment.get.toTimer\n  val ce: ConcurrentEffect[Task] = implicitly\n  \n  ce.race(clock.sleep(1.second), clock.sleep(1.second))\n}\n")),(0,a.kt)("h3",{id:"cats-core"},"cats-core"),(0,a.kt)("p",null,"If you only need instances for ",(0,a.kt)("inlineCode",{parentName:"p"},"cats-core")," typeclasses, not ",(0,a.kt)("inlineCode",{parentName:"p"},"cats-effect")," import ",(0,a.kt)("inlineCode",{parentName:"p"},"zio.interop.catz.core._"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.interop.catz.core._\n")),(0,a.kt)("p",null,"Note that this library only has an ",(0,a.kt)("inlineCode",{parentName:"p"},"Optional")," dependency on cats-effect \u2013 if you or your libraries don't depend on it, this library will not add it to the classpath."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("p",null,"The following example shows how to use ZIO with Doobie (a library for JDBC access) and FS2 (a streaming library), which both rely on Cats Effect instances:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import doobie.imports._\nimport fs2.Stream\nimport zio.Task\nimport zio.interop.catz._\n\nval xa: Transactor[Task] = Transactor.fromDriverManager[Task](...)\n\ndef loadUsers: Stream[Task, User] =\n  sql"""SELECT * FROM users""".query[User].stream.transact(xa)\n\nval allUsers: List[User] = unsafeRun(loadUsers.compile.toList)\n')))}d.isMDXComponent=!0}}]);