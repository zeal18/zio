"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[76516],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=i,y=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return t?r.createElement(y,a(a({ref:n},c),{},{components:t})):r.createElement(y,a({ref:n},c))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},26195:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=t(87462),i=(t(67294),t(3905));const o={id:"zio-slick-interop",title:"ZIO Slick Interop"},a=void 0,l={unversionedId:"ecosystem/community/zio-slick-interop",id:"ecosystem/community/zio-slick-interop",title:"ZIO Slick Interop",description:"ZIO Slick Interop is a small library, that provides interop between Slick and ZIO.",source:"@site/docs/ecosystem/community/zio-slick-interop.md",sourceDirName:"ecosystem/community",slug:"/ecosystem/community/zio-slick-interop",permalink:"/ecosystem/community/zio-slick-interop",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/ecosystem/community/zio-slick-interop.md",tags:[],version:"current",frontMatter:{id:"zio-slick-interop",title:"ZIO Slick Interop"},sidebar:"ecosystem-sidebar",previous:{title:"ZIO Saga",permalink:"/ecosystem/community/zio-saga"},next:{title:"ZIO Temporal",permalink:"/ecosystem/community/zio-temporal"}},s={},p=[{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2}],c={toc:p},m="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/ScalaConsultants/zio-slick-interop"},"ZIO Slick Interop")," is a small library, that provides interop between Slick and ZIO."),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"In order to use this library, we need to add the following line in our ",(0,i.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "io.scalac" %% "zio-slick-interop" % "0.4.0"\n')),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"To run this example we should also add the ",(0,i.kt)("em",{parentName:"p"},"HikariCP integration for Slick")," in our ",(0,i.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "com.typesafe.slick" %% "slick-hikaricp" % "3.3.3"\n')),(0,i.kt)("p",null,"Here is a full working example of creating database-agnostic Slick repository:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import com.typesafe.config.ConfigFactory\nimport slick.interop.zio.DatabaseProvider\nimport slick.interop.zio.syntax._\nimport slick.jdbc.H2Profile.api._\nimport slick.jdbc.JdbcProfile\nimport zio.console.Console\nimport zio.interop.console.cats.putStrLn\nimport zio.{ExitCode, IO, URIO, ZEnvironment, ZIO, ZLayer}\n\nimport scala.jdk.CollectionConverters._\n\ncase class Item(id: Long, name: String)\n\ntrait ItemRepository {\n  def add(name: String): IO[Throwable, Long]\n\n  def getById(id: Long): IO[Throwable, Option[Item]]\n\n  def upsert(name: String): IO[Throwable, Long]\n}\n\nobject ItemsTable {\n  class Items(tag: Tag) extends Table[Item](\n    _tableTag = tag,\n    _tableName = "ITEMS"\n  ) {\n    def id = column[Long]("ID", O.PrimaryKey, O.AutoInc)\n\n    def name = column[String]("NAME")\n\n    def * = (id, name) <> ((Item.apply _).tupled, Item.unapply _)\n  }\n\n  val table = TableQuery[ItemsTable.Items]\n}\n\nobject SlickItemRepository {\n  val live: ZLayer[DatabaseProvider, Throwable, ItemRepository] =\n    ZLayer.fromServiceM { db =>\n      db.profile.flatMap { profile =>\n        import profile.api._\n\n        val initialize = ZIO.fromDBIO(ItemsTable.table.schema.createIfNotExists)\n\n        val repository = new ItemRepository {\n          private val items = ItemsTable.table\n\n          def add(name: String): IO[Throwable, Long] =\n            ZIO\n              .fromDBIO((items returning items.map(_.id)) += Item(0L, name))\n              .provideEnvironment(ZEnvironment(db))\n\n          def getById(id: Long): IO[Throwable, Option[Item]] = {\n            val query = items.filter(_.id === id).result\n\n            ZIO.fromDBIO(query).map(_.headOption).provideEnvironment(ZEnvironment(db))\n          }\n\n          def upsert(name: String): IO[Throwable, Long] =\n            ZIO\n              .fromDBIO { implicit ec =>\n                (for {\n                  itemOpt <- items.filter(_.name === name).result.headOption\n                  id <- itemOpt.fold[DBIOAction[Long, NoStream, Effect.Write]](\n                    (items returning items.map(_.id)) += Item(0L, name)\n                  )(item => (items.map(_.name) update name).map(_ => item.id))\n                } yield id).transactionally\n              }\n              .provideEnvironment(Environment(db))\n        }\n\n        initialize.as(repository).provideEnvironment(Environment(db))\n      }\n    }\n}\n\n\nobject Main extends zio.App {\n\n  private val config = ConfigFactory.parseMap(\n    Map(\n      "url" -> "jdbc:h2:mem:test1;DB_CLOSE_DELAY=-1",\n      "driver" -> "org.h2.Driver",\n      "connectionPool" -> "disabled"\n    ).asJava\n  )\n\n  private val env: ZLayer[Any, Throwable, ItemRepository] =\n    (ZLayer.succeed(config) ++ ZLayer.succeed[JdbcProfile](\n      slick.jdbc.H2Profile\n    )) >>> DatabaseProvider.live >>> SlickItemRepository.live\n\n  val myApp: ZIO[Console with Has[ItemRepository], Throwable, Unit] =\n    for {\n      repo <- ZIO.service[ItemRepository]\n      aId1 <- repo.add("A")\n      _ <- repo.add("B")\n      a <- repo.getById(1L)\n      b <- repo.getById(2L)\n      aId2 <- repo.upsert("A")\n      _ <- putStrLn(s"$aId1 == $aId2")\n      _ <- putStrLn(s"A item: $a")\n      _ <- putStrLn(s"B item: $b")\n    } yield ()\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    myApp.provideCustom(env).exitCode\n}\n')))}d.isMDXComponent=!0}}]);