"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[55016],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},71018:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={id:"streaming-file",title:"Streaming File Example",sidebar_label:"Streaming File"},o=void 0,l={unversionedId:"zio-http/examples/advanced/streaming-file",id:"zio-http/examples/advanced/streaming-file",title:"Streaming File Example",description:"",source:"@site/docs/zio-http/examples/advanced/streaming-file.md",sourceDirName:"zio-http/examples/advanced",slug:"/zio-http/examples/advanced/streaming-file",permalink:"/zio-http/examples/advanced/streaming-file",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/examples/advanced/streaming-file.md",tags:[],version:"current",frontMatter:{id:"streaming-file",title:"Streaming File Example",sidebar_label:"Streaming File"},sidebar:"ecosystem-sidebar",previous:{title:"Server",permalink:"/zio-http/examples/advanced/server"},next:{title:"Streaming Response",permalink:"/zio-http/examples/advanced/streaming-response"}},s={},p=[],c={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import java.io.File\nimport java.nio.file.Paths\n\nimport zio._\n\nimport zio.stream.ZStream\n\nimport zio.http._\n\nobject FileStreaming extends ZIOAppDefault {\n\n  // Create HTTP route\n  val app = Http.collectHttp[Request] {\n    case Method.GET -> Root / "health" => Handler.ok.toHttp\n\n    // Read the file as ZStream\n    // Uses the blocking version of ZStream.fromFile\n    case Method.GET -> Root / "blocking" => Handler.fromStream(ZStream.fromPath(Paths.get("README.md"))).toHttp\n\n    // Uses netty\'s capability to write file content to the Channel\n    // Content-type response headers are automatically identified and added\n    // Adds content-length header and does not use Chunked transfer encoding\n    case Method.GET -> Root / "video" => Http.fromFile(new File("src/main/resources/TestVideoFile.mp4"))\n    case Method.GET -> Root / "text"  => Http.fromFile(new File("src/main/resources/TestFile.txt"))\n  }\n\n  // Run it like any simple app\n  val run =\n    Server.serve(app.withDefaultErrorResponse).provide(Server.default)\n}\n')))}d.isMDXComponent=!0}}]);