"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[72043],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=o,u=d["".concat(c,".").concat(m)]||d[m]||g[m]||a;return t?r.createElement(u,i(i({ref:n},p),{},{components:t})):r.createElement(u,i({ref:n},p))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},55147:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(87462),o=(t(67294),t(3905));const a={id:"getting-started",title:"Getting Started with ZIO JDBC",sidebar_label:"Getting Started"},i=void 0,l={unversionedId:"zio-jdbc/getting-started",id:"zio-jdbc/getting-started",title:"Getting Started with ZIO JDBC",description:"Writing Queries",source:"@site/docs/zio-jdbc/getting-started.md",sourceDirName:"zio-jdbc",slug:"/zio-jdbc/getting-started",permalink:"/zio-jdbc/getting-started",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-jdbc/getting-started.md",tags:[],version:"current",frontMatter:{id:"getting-started",title:"Getting Started with ZIO JDBC",sidebar_label:"Getting Started"},sidebar:"ecosystem-sidebar",previous:{title:"Installation",permalink:"/zio-jdbc/installation"},next:{title:"Getting Started",permalink:"/zio-json/"}},c={},s=[{value:"Writing Queries",id:"writing-queries",level:2},{value:"Executing Statements",id:"executing-statements",level:2},{value:"Creating a Connection Pool",id:"creating-a-connection-pool",level:2},{value:"Full Example",id:"full-example",level:2}],p={toc:s},d="wrapper";function g(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"writing-queries"},"Writing Queries"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Basic.scala")," (see ",(0,o.kt)("inlineCode",{parentName:"p"},"zio.jdbc.examples")," in project)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'  val age = 42\n\nval ex0: SqlFragment = sql"create table if not exists users(name varchar(255), age int)"\n\n// Creating SQL statements using interpolation:\nval ex1: SqlFragment = sql"select * from users where age = $age"\n\n// Selecting into tuples:\nval ex2: Query[(String, Int)] = sql"select name, age from users".query[(String, Int)]\n\n// Inserting from tuples:\nval ex3: SqlFragment = sql"insert into users (name, age)".values(("John", 42))\n\n// dropping table\nval ex4: SqlFragment = sql"drop table if exists users"\n')),(0,o.kt)("h2",{id:"executing-statements"},"Executing Statements"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"val res1: ZIO[ZConnectionPool, Throwable, Option[(String, Int)]] = \n  transaction {\n    sql\"select name, age from users where name = 'Sherlock Holmes'\".query[(String, Int)].selectOne\n  }\n")),(0,o.kt)("h2",{id:"creating-a-connection-pool"},"Creating a Connection Pool"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'\n val createZIOPoolConfig: ULayer[ZConnectionPoolConfig] =\n    ZLayer.succeed(ZConnectionPoolConfig.default)\n \n  val properties = Map(\n    "user"     -> "mysql",\n    "password" -> "mysql"\n  )\n \n  val connectionPool: ZLayer[ZConnectionPoolConfig, Throwable, ZConnectionPool] =\n    ZConnectionPool.mysql("localhost", 3306, "mysql", properties)\n \n  val live: ZLayer[ZConnectionPoolConfig, Throwable, ZConnectionPool] = createZIOPoolConfig >>> connectionPool\n')),(0,o.kt)("h2",{id:"full-example"},"Full Example"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"App.scala")," (see ",(0,o.kt)("inlineCode",{parentName:"p"},"zio.jdbc.examples")," in project)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'\nimport zio._\nimport zio.jdbc._\nimport zio.schema.Schema\n\n/**\n * You\'ll need the appropriate JDBC driver, and a database running.\n */\nobject App extends ZIOAppDefault {\n  final case class User(name: String, age: Int)\n  \n  object User {\n    import Schema.Field\n    \n    implicit val schema: Schema[User] =\n      Schema.CaseClass2[String, Int, User](\n        Field("name", Schema[String]),\n        Field("age", Schema[Int]),\n        (name, age) => User(name, age),\n        _.name,\n        _.age\n      )\n    \n    // One can derive a jdbc decoder from a zio-schema or\n    implicit val jdbcDecoder: JdbcDecoder[User] = JdbcDecoder.fromSchema\n    \n    // One can derive a jdbc encoder from a zio-schema \n    implicit val jdbcEncoder: JdbcEncoder[User] = JdbcEncoder.fromSchema\n    \n    // a custom decoder from a tuple\n    // implicit val jdbcDecoder = JdbcDecoder[(String, Int)].map[User](t => User(t._1, t._2))\n  }\n  \n  val create: ZIO[ZConnectionPool, Throwable, Unit] = transaction {\n    Basic.ex0.execute\n  }\n  \n  val insertRow: ZIO[ZConnectionPool, Throwable, Long] = transaction {\n    Basic.ex3.insert\n  }\n  \n  val select: ZIO[ZConnectionPool, Throwable, Chunk[User]] = transaction {\n    Basic.ex2.as[User].selectAll\n  }\n  \n  val drop: ZIO[ZConnectionPool, Throwable, Unit] = transaction {\n    Basic.ex4.execute\n  }\n  \n  val createZIOPoolConfig: ULayer[ZConnectionPoolConfig] =\n    ZLayer.succeed(ZConnectionPoolConfig.default)\n  \n  val properties = Map(\n    "user"     -> "postgres",\n    "password" -> "postgres"\n  )\n  \n  /**\n   * Pre defined ZConnection Pools exist for:\n   *  Postgres, SQL Server, Oracle, MySQL and h2\n   *  custom pools, can also be constructed\n   */\n  val connectionPool: ZLayer[ZConnectionPoolConfig, Throwable, ZConnectionPool] =\n    ZConnectionPool.postgres("localhost", 5432, "postgres", properties)\n  \n  val program: ZIO[ZConnectionPool, Throwable, Chunk[User]] = for {\n    _   <- create *> insertRow\n    res <- select\n    _   <- drop\n  } yield res\n  \n  override def run: ZIO[ZEnv with ZIOAppArgs, Any, Any] =\n    for {\n      results <- program.provideLayer(createZIOPoolConfig >>> connectionPool)\n      _       <- Console.printLine(results.mkString("\\n"))\n    } yield ()\n}\n')))}g.isMDXComponent=!0}}]);