"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[43486],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=l(a),m=i,u=c["".concat(p,".").concat(m)]||c[m]||k[m]||r;return a?n.createElement(u,o(o({ref:t},d),{},{components:a})):n.createElement(u,o({ref:t},d))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=a[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},23476:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>k,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var n=a(87462),i=(a(67294),a(3905));const r={id:"writing-tests",title:"Writing Tests with the `zio-kafka-testkit` library"},o=void 0,s={unversionedId:"zio-kafka/writing-tests",id:"zio-kafka/writing-tests",title:"Writing Tests with the `zio-kafka-testkit` library",description:"zio-kafka provides a zio-kafka-testkit library to help you test your code using zio-kafka.",source:"@site/docs/zio-kafka/writing-tests.md",sourceDirName:"zio-kafka",slug:"/zio-kafka/writing-tests",permalink:"/zio-kafka/writing-tests",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-kafka/writing-tests.md",tags:[],version:"current",frontMatter:{id:"writing-tests",title:"Writing Tests with the `zio-kafka-testkit` library"},sidebar:"ecosystem-sidebar",previous:{title:"Serialization And Deserialization",permalink:"/zio-kafka/serialization-and-deserialization"},next:{title:"Introduction",permalink:"/zio-keeper/"}},p={},l=[{value:"Testing a producer",id:"testing-a-producer",level:2},{value:"Testing a consumer",id:"testing-a-consumer",level:2},{value:"Utilities provided by the <code>zio-kafka-testkit</code> library",id:"utilities-provided-by-the-zio-kafka-testkit-library",level:2},{value:"<code>Kafka</code> service",id:"kafka-service",level:3},{value:"<code>KafkaTestUtils</code> utilities",id:"kafkatestutils-utilities",level:3},{value:"<code>ZIOSpecWithKafka</code> trait",id:"ziospecwithkafka-trait",level:3},{value:"<code>KafkaRandom</code> trait",id:"kafkarandom-trait",level:3}],d={toc:l},c="wrapper";function k(e){let{components:t,...a}=e;return(0,i.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"zio-kafka provides a ",(0,i.kt)("inlineCode",{parentName:"p"},"zio-kafka-testkit")," library to help you test your code using zio-kafka."),(0,i.kt)("p",null,"To add it in your project, add the following dependency in your ",(0,i.kt)("inlineCode",{parentName:"p"},"build.sbt"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-kafka-testkit" % "<latest-version>" % Test\n')),(0,i.kt)("p",null,"Let's study some examples of tests you can write with the ",(0,i.kt)("inlineCode",{parentName:"p"},"zio-kafka-testkit")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"zio-test")," and let's see what this library provides you."),(0,i.kt)("h2",{id:"testing-a-producer"},"Testing a producer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import org.apache.kafka.clients.producer.ProducerRecord\nimport zio._\nimport zio.kafka.producer.Producer\nimport zio.kafka.serde.Serde\nimport zio.kafka.testkit.KafkaTestUtils._ // An object containing several utilities to simplify writing your tests // An object containing several utilities to simplify writing your tests\nimport zio.kafka.testkit.Kafka // A trait representing a Kafka instance in your tests // A trait representing a Kafka instance in your tests\nimport zio.test.TestAspect.{ sequential, timeout }\nimport zio.test._\n\nobject ProducerSpec extends ZIOSpecDefault {\n  override def spec: Spec[TestEnvironment & Scope, Any] =\n    (\n      suite("Producer test suite")(\n        test("minimal example") {\n          for {\n            _ <- Producer.produce(new ProducerRecord("topic", "boo", "baa"), Serde.string, Serde.string)\n          } yield assertCompletes\n        }\n        // ... more tests ...\n      )\n        .provideSome[Kafka](producer)             // Here, we provide a new instance of Producer per test\n        .provideSomeShared[Scope](Kafka.embedded) // Here, we provide an instance of Kafka for the entire suite\n    ) @@ timeout(2.minutes) @@ sequential\n}\n')),(0,i.kt)("p",null,"This test is a very minimal example.",(0,i.kt)("br",{parentName:"p"}),"\n","It uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"Producer.produce")," method from zio-kafka to produce a record to the Kafka cluster.",(0,i.kt)("br",{parentName:"p"}),"\n","The ",(0,i.kt)("inlineCode",{parentName:"p"},"assertCompletes")," assertion from zio-test is used to check that the effect completes successfully.    "),(0,i.kt)("p",null,"In this example, we decided to instantiate a new ",(0,i.kt)("inlineCode",{parentName:"p"},"Producer")," for each test, with the ",(0,i.kt)("inlineCode",{parentName:"p"},".provideSome[Kafka](producer)"),".",(0,i.kt)("br",{parentName:"p"}),"\n","We could have decided to share one instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Producer")," between all the tests of this suite by moving the ",(0,i.kt)("inlineCode",{parentName:"p"},"producer")," layer to the ",(0,i.kt)("inlineCode",{parentName:"p"},"provideSomeShared"),", which would have\nlooked like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'suite("producer test suite")(\n  // ... tests ...\n).provideSomeShared[Scope](Kafka.embedded, producer)\n')),(0,i.kt)("p",null,"This ",(0,i.kt)("inlineCode",{parentName:"p"},"producer")," layer comes from the ",(0,i.kt)("inlineCode",{parentName:"p"},"KafkaTestUtils")," object in zio-kafka-testkit. It is a layer that bootstraps a ",(0,i.kt)("inlineCode",{parentName:"p"},"Producer")," instance."),(0,i.kt)("p",null,"In this example, we decided to share an instance of Kafka for the entire suite, with the ",(0,i.kt)("inlineCode",{parentName:"p"},".provideSomeShared[Scope](Kafka.embedded)"),".",(0,i.kt)("br",{parentName:"p"}),"\n","Kafka is slow to start, so it is better to only start it once and share it between all tests of the suite.     "),(0,i.kt)("p",null,"We could have decided to instantiate a new instance of Kafka for each test by moving the ",(0,i.kt)("inlineCode",{parentName:"p"},"Kafka.embedded")," layer to the ",(0,i.kt)("inlineCode",{parentName:"p"},"provideSome"),", which would have\nlooked like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'suite("producer test suite")(\n  // ... tests ...\n).provideSome[Scope](Kafka.embedded, producer)\n')),(0,i.kt)("p",null,"We could also have decided to share one instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Kafka")," between different test suites (i.e. between different test files) by mixing the ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIOSpecWithKafka")," trait,\nwhich would have looked like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'object ProducerSpec extends ZIOSpecWithKafka { // Note the `ZIOSpecWithKafka` trait usage here instead of `ZIOSpecDefault`\n  override def spec: Spec[TestEnvironment & Kafka, Any] =\n    (\n      suite("Producer test suite")(\n        // ... tests ...\n      )\n        .provideSome[Kafka](producer)             // No need here to provide a Kafka instance, it is already provided by the `ZIOSpecWithKafka` trait\n    ) @@ timeout(2.minutes) @@ sequential\n}\n')),(0,i.kt)("p",null,"More details about this ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIOSpecWithKafka")," trait ",(0,i.kt)("a",{parentName:"p",href:"#ziospecwithkafka-trait"},"below"),"."),(0,i.kt)("p",null,"Finally, we annotate the suite with the ",(0,i.kt)("inlineCode",{parentName:"p"},"timeout")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"sequential")," aspects.",(0,i.kt)("br",{parentName:"p"}),"\n","The ",(0,i.kt)("inlineCode",{parentName:"p"},"timeout")," aspect from zio-test is used to specify a timeout for the entire suite. If the suite takes more than 5 minutes to run, it will fail.",(0,i.kt)("br",{parentName:"p"}),"\n","The ",(0,i.kt)("inlineCode",{parentName:"p"},"sequential")," aspect from zio-test is used to specify that the tests in the suite must be run sequentially. This is necessary because Kafka is a shared resource.\nWe don't want tests to interfere with each other."),(0,i.kt)("h2",{id:"testing-a-consumer"},"Testing a consumer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.kafka.consumer.{ Consumer, Subscription }\nimport zio.kafka.serde.Serde\nimport zio.kafka.testkit.KafkaTestUtils.{ consumer, produceMany, producer }\nimport zio.kafka.testkit._\nimport zio.test.Assertion.hasSameElements\nimport zio.test.TestAspect.{ sequential, timeout }\nimport zio.test._\n\nobject ConsumerSpec extends ZIOSpecDefault with KafkaRandom {\n  override def kafkaPrefix: String = "consumer-spec"\n\n  override def spec: Spec[TestEnvironment & Scope, Any] =\n    (\n      suite("Consumer test suite")(\n        test("minimal example") {\n          val kvs: List[(String, String)] = (1 to 5).toList.map(i => (s"key-$i", s"msg-$i"))\n          for {\n            topic  <- randomTopic\n            client <- randomClient\n            group  <- randomGroup\n\n            _ <- produceMany(topic, kvs) // Comes from `KafkaTestUtils`. Produces messages to the topic.\n\n            records <- Consumer\n                         .plainStream(Subscription.Topics(Set(topic)), Serde.string, Serde.string)\n                         .take(5)\n                         .runCollect\n                         .provideSome[Kafka](\n                           // Comes from `KafkaTestUtils`\n                           consumer(clientId = client, groupId = Some(group))\n                         )\n            consumed = records.map(r => (r.record.key, r.record.value)).toList\n          } yield assert(consumed)(hasSameElements(kvs))\n        },\n        // ... more tests ...\n      )\n        .provideSome[Kafka](producer)             // Here, we provide a new instance of Producer per test\n        .provideSomeShared[Scope](Kafka.embedded) // Here, we provide an instance of Kafka for the entire suite\n    ) @@ timeout(2.minutes) @@ sequential\n}\n')),(0,i.kt)("p",null,"This test is also a quite minimal example.",(0,i.kt)("br",{parentName:"p"}),"\n","We produce 5 messages thanks to the ",(0,i.kt)("inlineCode",{parentName:"p"},"KafkaTestUtils.produceMany")," method from zio-kafka-testkit, then we consume them with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Consumer.plainStream")," method from zio-kafka.",(0,i.kt)("br",{parentName:"p"}),"\n","Finally, we use the ",(0,i.kt)("inlineCode",{parentName:"p"},"hasSameElements")," assertion from zio-test to check that the consumed records are the same as the ones we produced."),(0,i.kt)("p",null,"In this example, we're reusing the ",(0,i.kt)("inlineCode",{parentName:"p"},"producer")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"Kafka.embedded")," layers we've seen in the ",(0,i.kt)("a",{parentName:"p",href:"#testing-a-producer"},"Producer test example"),".",(0,i.kt)("br",{parentName:"p"}),"\n","We're also using the ",(0,i.kt)("inlineCode",{parentName:"p"},"KafkaTestUtils.consumer")," layer from zio-kafka-testkit to instantiate a new ",(0,i.kt)("inlineCode",{parentName:"p"},"Consumer"),".    "),(0,i.kt)("p",null,"Finally, we use the ",(0,i.kt)("inlineCode",{parentName:"p"},"KafkaRandom")," trait from zio-kafka-testkit and its methods to generate random values for the Consumer client ID, the Consumer group ID and the topic name.",(0,i.kt)("br",{parentName:"p"}),"\n","More details about this ",(0,i.kt)("inlineCode",{parentName:"p"},"KafkaRandom")," trait ",(0,i.kt)("a",{parentName:"p",href:"#kafkarandom-trait"},"later in this page"),".",(0,i.kt)("br",{parentName:"p"}),"\n","Using random values for these parameters is important to avoid conflicts between tests as we share one Kafka instance between all the tests of the suite."),(0,i.kt)("h2",{id:"utilities-provided-by-the-zio-kafka-testkit-library"},"Utilities provided by the ",(0,i.kt)("inlineCode",{parentName:"h2"},"zio-kafka-testkit")," library"),(0,i.kt)("h3",{id:"kafka-service"},(0,i.kt)("inlineCode",{parentName:"h3"},"Kafka")," service"),(0,i.kt)("p",null,"This trait represents a Kafka instance in your tests.",(0,i.kt)("br",{parentName:"p"}),"\n","It is used to provide the bootstrap servers to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Producer")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Consumer")," layers."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"trait Kafka {\n  def bootstrapServers: List[String]\n  def stop(): UIO[Unit]\n}\n")),(0,i.kt)("p",null,"The companion object provides a few layers to provide a Kafka instance in your tests:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"object Kafka {\n  /**\n   * Creates an in-memory Kafka instance with a random port.\n   */\n  val embedded: ZLayer[Any, Throwable, Kafka]\n\n  /**\n   * Will connect to a Kafka instance running on localhost:9092 (with Docker, for example).\n   */\n  val local: ULayer[Kafka]\n\n  /**\n   * Creates an in-memory Kafka instance with a random port and SASL authentication configured.\n   */\n  val saslEmbedded: ZLayer[Any, Throwable, Kafka.Sasl]\n\n  /**\n   * Creates an in-memory Kafka instance with a random port and SSL authentication configured.\n   */\n  val sslEmbedded: ZLayer[Any, Throwable, Kafka]\n}\n")),(0,i.kt)("p",null,"The in-memory Kafka instances are created using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/embeddedkafka/embedded-kafka"},"embedded-kafka"),"."),(0,i.kt)("h3",{id:"kafkatestutils-utilities"},(0,i.kt)("inlineCode",{parentName:"h3"},"KafkaTestUtils")," utilities"),(0,i.kt)("p",null,"This object provides several utilities to simplify writing your tests, like layers to boot a ",(0,i.kt)("inlineCode",{parentName:"p"},"Producer"),", a ",(0,i.kt)("inlineCode",{parentName:"p"},"Consumer"),", or an ",(0,i.kt)("inlineCode",{parentName:"p"},"AdminClient"),".",(0,i.kt)("br",{parentName:"p"}),"\n","It also provides several functions to produce records, and more.",(0,i.kt)("br",{parentName:"p"}),"\n","Each utility function is documented in the source code. Please have a look at the source code for more details.",(0,i.kt)("br",{parentName:"p"}),"\n","You can also look at ",(0,i.kt)("inlineCode",{parentName:"p"},"zio-katka")," tests in the ",(0,i.kt)("inlineCode",{parentName:"p"},"zio-kafka-test")," module to have examples on how to use these utilities.    "),(0,i.kt)("h3",{id:"ziospecwithkafka-trait"},(0,i.kt)("inlineCode",{parentName:"h3"},"ZIOSpecWithKafka")," trait"),(0,i.kt)("p",null,"This trait can be used if you want to share one Kafka instance between different test suites.",(0,i.kt)("br",{parentName:"p"}),"\n","This allows you to speed up your tests by booting a Kafka instance only once for all your test suites using this trait."),(0,i.kt)("p",null,"Usage example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'// In `src/test/scala/io/example/producer/ProducerSpec.scala`\nobject ProducerSpec extends ZIOSpecWithKafka { // Note the `ZIOSpecWithKafka` trait usage here instead of `ZIOSpecDefault`\n  override def spec: Spec[TestEnvironment & Kafka, Any] =\n    (\n      suite("Producer test suite")(\n        // ... tests ...\n      )\n        .provideSome[Kafka](producer)             // No need here to provide a Kafka instance, it is already provided by the `ZIOSpecWithKafka` trait\n    ) @@ timeout(2.minutes) @@ sequential\n}\n\n// In `src/test/scala/io/example/consumer/ConsumerSpec.scala`\nobject ConsumerSpec extends ZIOSpecWithKafka { // Note the `ZIOSpecWithKafka` trait usage here instead of `ZIOSpecDefault`\n  override def spec: Spec[TestEnvironment & Kafka, Any] =\n    (\n      suite("Consumer test suite")(\n        // ... tests ...\n      )\n        .provideSome[Kafka](producer)             // No need here to provide a Kafka instance, it is already provided by the `ZIOSpecWithKafka` trait\n    ) @@ timeout(2.minutes) @@ sequential\n}\n')),(0,i.kt)("p",null,"This is a capability offered by ZIO2.",(0,i.kt)("br",{parentName:"p"}),"\n","See related zio-test documentation: ",(0,i.kt)("a",{parentName:"p",href:"https://zio.dev/reference/test/sharing-layers-between-multiple-files/"},"https://zio.dev/reference/test/sharing-layers-between-multiple-files/")),(0,i.kt)("h3",{id:"kafkarandom-trait"},(0,i.kt)("inlineCode",{parentName:"h3"},"KafkaRandom")," trait"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"KafkaRandom")," trait provides a few methods to generate random values.\nTo use it, you need to mix it in your test suite, like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.kafka.consumer.Consumer\nimport zio.kafka.testkit.KafkaRandom\nimport zio.kafka.testkit.Kafka\nimport zio.kafka.testkit.KafkaTestUtils.consumer\nimport zio.test.{ assertTrue, Spec, TestEnvironment, ZIOSpecDefault }\nimport zio._\n\nobject MyServiceSpec extends ZIOSpecDefault with KafkaRandom {\n  // Required when mixing in the `KafkaRandom` trait\n  // The best is to use a different prefix for each test suite\n  override def kafkaPrefix: String = "my-service" \n\n  override def spec: Spec[TestEnvironment & Scope, Any] =\n    suite("MyService")(\n      test("minimal example") {\n        for {\n          group    <- randomGroup // Comes from `KafkaRandom`\n          clientId <- randomClient // Comes from `KafkaRandom`\n          metrics  <- Consumer.metrics\n                        .provideSome[Kafka](\n                          // Comes from `KafkaTestUtils`\n                          consumer(clientId = clientId, groupId = Some(group))\n                        )\n        } yield assertTrue(metrics.nonEmpty)\n      }\n    ).provideSomeShared[Scope](Kafka.embedded)\n}\n')))}k.isMDXComponent=!0}}]);