"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[95216],{3905:(e,r,n)=>{n.d(r,{Zo:()=>p,kt:()=>h});var t=n(67294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=t.createContext({}),l=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},p=function(e){var r=l(e.components);return t.createElement(c.Provider,{value:r},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),f=l(n),m=a,h=f["".concat(c,".").concat(m)]||f[m]||u[m]||o;return n?t.createElement(h,s(s({ref:r},p),{},{components:n})):t.createElement(h,s({ref:r},p))}));function h(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i[f]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},16771:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var t=n(87462),a=(n(67294),n(3905));const o={id:"flipping-error-and-success-channels",title:"Flipping Error and Success Channels"},s=void 0,i={unversionedId:"reference/error-management/operations/flipping-error-and-success-channels",id:"reference/error-management/operations/flipping-error-and-success-channels",title:"Flipping Error and Success Channels",description:"Sometimes, we would like to apply some methods on the error channel which are specific for the success channel, or we want to apply some methods on the success channel which are specific for the error channel. Therefore, we can flip the error and success channel and before flipping back, we can perform the right operator on flipped channels:",source:"@site/docs/reference/error-management/operations/flipping-the-error-and-success-channel.md",sourceDirName:"reference/error-management/operations",slug:"/reference/error-management/operations/flipping-error-and-success-channels",permalink:"/reference/error-management/operations/flipping-error-and-success-channels",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/error-management/operations/flipping-the-error-and-success-channel.md",tags:[],version:"current",frontMatter:{id:"flipping-error-and-success-channels",title:"Flipping Error and Success Channels"},sidebar:"reference-sidebar",previous:{title:"Merging the Error Channel into the Success Channel",permalink:"/reference/error-management/operations/merging-the-error-channel-into-the-success-channel"},next:{title:"Rejecting Some Success Values",permalink:"/reference/error-management/operations/rejecting-some-success-values"}},c={},l=[],p={toc:l},f="wrapper";function u(e){let{components:r,...n}=e;return(0,a.kt)(f,(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Sometimes, we would like to apply some methods on the error channel which are specific for the success channel, or we want to apply some methods on the success channel which are specific for the error channel. Therefore, we can flip the error and success channel and before flipping back, we can perform the right operator on flipped channels:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"trait ZIO[-R, +E, +A] {\n  def flip: ZIO[R, A, E]\n  def flipWith[R1, A1, E1](f: ZIO[R, A, E] => ZIO[R1, A1, E1]): ZIO[R1, E1, A1]\n}\n")),(0,a.kt)("p",null,"Assume we have the following example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nval evens: ZIO[Any, List[String], List[Int]] =\n  ZIO.validate(List(1, 2, 3, 4, 5)) { n =>\n    if (n % 2 == 0)\n      ZIO.succeed(n)\n    else\n      ZIO.fail(s"$n is not even")\n  }\n')),(0,a.kt)("p",null,"We want to reverse the order of errors. In order to do that instead of using ",(0,a.kt)("inlineCode",{parentName:"p"},"ZIO#mapError"),", we can map the error channel by using flip operators:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nval r1: ZIO[Any, List[String], List[Int]] = evens.mapError(_.reverse)\nval r2: ZIO[Any, List[String], List[Int]] = evens.flip.map(_.reverse).flip\nval r3: ZIO[Any, List[String], List[Int]] = evens.flipWith(_.map(_.reverse))\n")))}u.isMDXComponent=!0}}]);