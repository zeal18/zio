"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[34912],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(67294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(r),f=s,d=u["".concat(l,".").concat(f)]||u[f]||m[f]||a;return r?n.createElement(d,i(i({ref:t},p),{},{components:r})):n.createElement(d,i({ref:t},p))}));function d(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,i=new Array(a);i[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:s,i[1]=o;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},10044:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var n=r(87462),s=(r(67294),r(3905));const a={id:"smart-assertions",title:"Smart Assertions"},i=void 0,o={unversionedId:"reference/test/assertions/smart-assertions",id:"reference/test/assertions/smart-assertions",title:"Smart Assertions",description:"The smart assertion is a simple way to assert both ordinary values and ZIO effects. It uses the assertTrue function, which uses macro under the hood.",source:"@site/docs/reference/test/assertions/smart-assertions.md",sourceDirName:"reference/test/assertions",slug:"/reference/test/assertions/smart-assertions",permalink:"/reference/test/assertions/smart-assertions",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/assertions/smart-assertions.md",tags:[],version:"current",frontMatter:{id:"smart-assertions",title:"Smart Assertions"},sidebar:"reference-sidebar",previous:{title:"Introduction",permalink:"/reference/test/assertions/"},next:{title:"Classic Assertions",permalink:"/reference/test/assertions/classic-assertions"}},l={},c=[{value:"Asserting Ordinary Values",id:"asserting-ordinary-values",level:2},{value:"Asserting ZIO effects",id:"asserting-zio-effects",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...r}=e;return(0,s.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The smart assertion is a simple way to assert both ",(0,s.kt)("em",{parentName:"p"},"ordinary values")," and ",(0,s.kt)("em",{parentName:"p"},"ZIO effects"),". It uses the ",(0,s.kt)("inlineCode",{parentName:"p"},"assertTrue")," function, which uses macro under the hood."),(0,s.kt)("h2",{id:"asserting-ordinary-values"},"Asserting Ordinary Values"),(0,s.kt)("p",null,"In the following example, we assert simple ordinary values using the ",(0,s.kt)("inlineCode",{parentName:"p"},"assertTrue")," method:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.test.{test, _}\n\ntest("sum"){\n  assertTrue(1 + 1 == 2)\n}\n')),(0,s.kt)("h2",{id:"asserting-zio-effects"},"Asserting ZIO effects"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertTrue")," method can also be used to assert ZIO effects:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.test.{test, _}\n\ntest("updating ref") {\n  for {\n    r <- Ref.make(0)\n    _ <- r.update(_ + 1)\n    v <- r.get\n  } yield assertTrue(v == 1)\n}\n')),(0,s.kt)("p",null,"Using ",(0,s.kt)("inlineCode",{parentName:"p"},"assertTrue")," with for-comprehension style, we can think of testing as these three steps:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"Set up the test")," \u2014 In this section we should setup the system under test (e.g. ",(0,s.kt)("inlineCode",{parentName:"li"},"Ref.make(0)"),")."),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"Running the test")," \u2014 Then we run the test scenario according to the test specification. (e.g ",(0,s.kt)("inlineCode",{parentName:"li"},"ref.update(_ + 1)"),")"),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"Making assertions about the test")," - Finally, we should assert the result with the right expectations (e.g. ",(0,s.kt)("inlineCode",{parentName:"li"},"assertTrue(v == 1)"),")")))}m.isMDXComponent=!0}}]);