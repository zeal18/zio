"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[88141],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(a),u=r,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},94705:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const o={id:"index",title:"Introduction to ZIO Schema",sidebar_label:"Introduction"},i=void 0,s={unversionedId:"zio-schema/index",id:"zio-schema/index",title:"Introduction to ZIO Schema",description:"ZIO Schema is a ZIO-based library for modeling the schema of data structures as first-class values.",source:"@site/docs/zio-schema/index.md",sourceDirName:"zio-schema",slug:"/zio-schema/",permalink:"/zio-schema/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-schema/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"Introduction to ZIO Schema",sidebar_label:"Introduction"},sidebar:"ecosystem-sidebar",previous:{title:"ZIO SQS",permalink:"/zio-sqs/"},next:{title:"Use cases",permalink:"/zio-schema/use-cases"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2},{value:"Resources",id:"resources",level:2}],p={toc:c},m="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-schema"},"ZIO Schema")," is a ",(0,r.kt)("a",{parentName:"p",href:"https://zio.dev"},"ZIO"),"-based library for modeling the schema of data structures as first-class values."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/zio/zio/wiki/Project-Stages"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Project%20Stage-Development-green.svg",alt:"Development"}))," ",(0,r.kt)("img",{parentName:"p",src:"https://github.com/zio/zio-schema/workflows/CI/badge.svg",alt:"CI Badge"})," ",(0,r.kt)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/releases/dev/zio/zio-schema_2.13/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nexus/r/https/oss.sonatype.org/dev.zio/zio-schema_2.13.svg?label=Sonatype%20Release",alt:"Sonatype Releases"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/snapshots/dev/zio/zio-schema_2.13/"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/dev.zio/zio-schema_2.13.svg?label=Sonatype%20Snapshot",alt:"Sonatype Snapshots"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://javadoc.io/doc/dev.zio/zio-schema-docs_2.13"},(0,r.kt)("img",{parentName:"a",src:"https://javadoc.io/badge2/dev.zio/zio-schema-docs_2.13/javadoc.svg",alt:"javadoc"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-schema"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/github/stars/zio/zio-schema?style=social",alt:"ZIO Schema"}))),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Schema is a structure of a data type. ZIO Schema reifies the concept of structure for data types. It makes a high-level description of any data type and makes them as first-class values."),(0,r.kt)("p",null,"Creating a schema for a data type helps us to write codecs for that data type. So this library can be a host of functionalities useful for writing codecs and protocols like JSON, Protobuf, CSV, and so forth."),(0,r.kt)("p",null,"With schema descriptions that can be automatically derived for case classes and sealed traits, ",(0,r.kt)("em",{parentName:"p"},"ZIO Schema")," will be going to provide powerful features for free (Note that the project is in the development stage and all these features are not supported yet):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Codecs for any supported protocol (JSON, protobuf, etc.), so data structures can be serialized and deserialized in a principled way"),(0,r.kt)("li",{parentName:"ul"},"Diffing, patching, merging, and other generic-data-based operations"),(0,r.kt)("li",{parentName:"ul"},"Migration of data structures from one schema to another compatible schema"),(0,r.kt)("li",{parentName:"ul"},"Derivation of arbitrary type classes (",(0,r.kt)("inlineCode",{parentName:"li"},"Eq"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Show"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Ord"),", etc.) from the structure of the data")),(0,r.kt)("p",null,"When our data structures need to be serialized, deserialized, persisted, or transported across the wire, then ",(0,r.kt)("em",{parentName:"p"},"ZIO Schema")," lets us focus on data modeling and automatically tackle all the low-level, messy details for us."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"ZIO Schema")," is used by a growing number of ZIO libraries, including ",(0,r.kt)("em",{parentName:"p"},"ZIO Flow"),", ",(0,r.kt)("em",{parentName:"p"},"ZIO Redis"),", ",(0,r.kt)("em",{parentName:"p"},"ZIO Web"),", ",(0,r.kt)("em",{parentName:"p"},"ZIO SQL")," and ",(0,r.kt)("em",{parentName:"p"},"ZIO DynamoDB"),"."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"In order to use this library, we need to add the following lines in our ",(0,r.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-schema"          % "0.4.14"\nlibraryDependencies += "dev.zio" %% "zio-schema-bson"     % "0.4.14"\nlibraryDependencies += "dev.zio" %% "zio-schema-json"     % "0.4.14"\nlibraryDependencies += "dev.zio" %% "zio-schema-protobuf" % "0.4.14"\n\n// Required for automatic generic derivation of schemas\nlibraryDependencies += "dev.zio" %% "zio-schema-derivation" % "0.4.14",\nlibraryDependencies += "org.scala-lang" % "scala-reflect"  % scalaVersion.value % "provided"\n')),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"In this simple example first, we create a schema for ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," and then run the ",(0,r.kt)("em",{parentName:"p"},"diff")," operation on two instances of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," data type, and finally we encode a Person instance using ",(0,r.kt)("em",{parentName:"p"},"Protobuf")," protocol:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.console.putStrLn\nimport zio.schema.codec.ProtobufCodec._\nimport zio.schema.{DeriveSchema, Schema}\nimport zio.stream.ZStream\nimport zio.{Chunk, ExitCode, URIO}\n\nfinal case class Person(name: String, age: Int, id: String)\nobject Person {\n  implicit val schema: Schema[Person] = DeriveSchema.gen[Person]\n}\n\nPerson.schema\n\nimport zio.schema.syntax._\n\nPerson("Alex", 31, "0123").diff(Person("Alex", 31, "124"))\n\ndef toHex(chunk: Chunk[Byte]): String =\n  chunk.toArray.map("%02X".format(_)).mkString\n\nzio.Runtime.default.unsafe.run(\n  ZStream\n    .succeed(Person("Thomas", 23, "2354"))\n    .transduce(\n      encoder(Person.schema)\n    )\n    .runCollect\n    .flatMap(x => putStrLn(s"Encoded data with protobuf codec: ${toHex(x)}"))\n).getOrThrowFiberFailure()\n')),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=GfNiDaL5aIM"},"Zymposium - ZIO Schema")," by John A. De Goes, Adam Fraser and Kit Langton (May 2021)")))}d.isMDXComponent=!0}}]);