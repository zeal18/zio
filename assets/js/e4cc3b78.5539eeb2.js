"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[57758],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},17140:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={id:"index",title:"Introduction to ZIO S3",sidebar_label:"ZIO S3"},i=void 0,s={unversionedId:"zio-s3/index",id:"zio-s3/index",title:"Introduction to ZIO S3",description:"Thin wrapper over S3 async client for ZIO",source:"@site/docs/zio-s3/index.md",sourceDirName:"zio-s3",slug:"/zio-s3/",permalink:"/zio-s3/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-s3/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"Introduction to ZIO S3",sidebar_label:"ZIO S3"},sidebar:"ecosystem-sidebar",previous:{title:"ZIO RocksDB",permalink:"/zio-rocksdb/"},next:{title:"ZIO SBT",permalink:"/zio-sbt/"}},l={},p=[{value:"Setup",id:"setup",level:2},{value:"How to use it ?",id:"how-to-use-it-",level:2},{value:"Credentials",id:"credentials",level:2},{value:"Test / Stub",id:"test--stub",level:2},{value:"Examples",id:"examples",level:2},{value:"Support any commands ?",id:"support-any-commands-",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Thin wrapper over S3 async client for ZIO"),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'//support scala 2.12 / 2.13\n\nlibraryDependencies += "dev.zio" %% "zio-s3" % "0.4.2.1"\n')),(0,r.kt)("h2",{id:"how-to-use-it-"},"How to use it ?"),(0,r.kt)("p",null,"ZIO-S3 is a thin wrapper over the s3 async java client. It exposes the main operations of the s3 java client."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import software.amazon.awssdk.auth.credentials.AwsBasicCredentials\nimport zio.Chunk\nimport zio.s3._\nimport zio.stream.{ZSink, ZStream}\nimport software.amazon.awssdk.services.s3.model.S3Exception\n\n  // list all buckets available  \n  listBuckets.provideLayer(\n     live("us-east-1", AwsBasicCredentials.create("accessKeyId", "secretAccessKey"))\n  )\n  \n  // list all objects of all buckets\n  val l2: ZStream[S3, S3Exception, String] = (for {\n     bucket <- ZStream.fromIterableZIO(listBuckets) \n     obj <- listAllObjects(bucket.name)\n  } yield obj.bucketName + "/" + obj.key).provideLayer(\n     live("us-east-1", AwsBasicCredentials.create("accessKeyId", "secretAccessKey"))\n  )  \n')),(0,r.kt)("p",null,"All available s3 combinators and operations are available in the package object ",(0,r.kt)("inlineCode",{parentName:"p"},"zio.s3"),", you only need to ",(0,r.kt)("inlineCode",{parentName:"p"},"import zio.s3._")),(0,r.kt)("h2",{id:"credentials"},"Credentials"),(0,r.kt)("p",null,"zio-s3 expose credentials providers from aws ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/credentials.html"},"https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/credentials.html"),"\nIf credentials cannot be found in one or multiple providers selected the operation will fail with ",(0,r.kt)("inlineCode",{parentName:"p"},"InvalidCredentials")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import software.amazon.awssdk.auth.credentials.AwsBasicCredentials\nimport zio._\nimport software.amazon.awssdk.regions.Region\nimport software.amazon.awssdk.services.s3.model.S3Exception\nimport zio.s3._\nimport zio.s3.providers._\n\n// build S3 Layer from basic credentials\nval s3: Layer[S3Exception, S3] =\n  live(Region.AF_SOUTH_1, AwsBasicCredentials.create("key", "secret"))\n\n// build S3 Layer from System properties or Environment variables\nval s3: Layer[S3Exception, S3] =\n  liveZIO(Region.AF_SOUTH_1, system <> env)\n\n// build S3 Layer  from Instance profile credentials\nval s3: Layer[S3Exception, S3] =\n  liveZIO(Region.AF_SOUTH_1, instanceProfile)\n\n// build S3 Layer from web identity token credentials with STS. awssdk sts module required to be on classpath\nval s3: Layer[S3Exception, S3] = liveZIO(Region.AF_SOUTH_1, webIdentity)\n\n// build S3 Layer from default available credentials providers\nval s3: Layer[S3Exception, S3] = liveZIO(Region.AF_SOUTH_1, default)\n\n// use custom logic to fetch aws credentials\nval zcredentials: ZIO[R, S3Exception, AwsCredentials] = ??? // specific implementation to fetch credentials\nval s3: ZLayer[Any, S3Exception, S3] = settings(Region.AF_SOUTH_1, zcredentials) >>> live\n\n\n')),(0,r.kt)("h2",{id:"test--stub"},"Test / Stub"),(0,r.kt)("p",null,"a stub implementation of s3 storage is provided for testing purpose and use internally a filesystem to simulate s3 storage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.nio.core.file.{Path => ZPath}\nimport zio.s3._\n\n// build s3 Layer\nval stubS3: ZLayer[Any, Nothing, S3] = stub(ZPath("/tmp/s3-data"))\n\n// list all buckets available by using S3 Stub Layer \n// will list all directories of `/tmp/s3-data`\nlistBuckets.provideLayer(stubS3) \n')),(0,r.kt)("p",null,"More information here on how to use ",(0,r.kt)("a",{parentName:"p",href:"https://zio.dev/docs/howto/howto_use_layers"},"ZLayer https://zio.dev/docs/howto/howto_use_layers")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import software.amazon.awssdk.services.s3.model.S3Exception\nimport zio._\nimport zio.stream.{ ZSink, ZStream }\nimport zio.s3._\n\n// upload\nval json: Chunk[Byte] = Chunk.fromArray("""{  "id" : 1 , "name" : "A1" }""".getBytes)\nval up: ZIO[S3, S3Exception, Unit] = putObject(\n  "bucket-1",\n  "user.json",\n  json.length,\n  ZStream.fromChunk(json),\n  UploadOptions.fromContentType("application/json")\n)\n\n// multipartUpload \nimport java.io.FileInputStream\nimport java.nio.file.Paths\n\nval is = ZStream.fromInputStream(new FileInputStream(Paths.get("/my/path/to/myfile.zip").toFile))\nval proc2: ZIO[S3, S3Exception, Unit] =\n  multipartUpload(\n    "bucket-1",\n    "upload/myfile.zip",\n    is,\n    MultipartUploadOptions.fromUploadOptions(UploadOptions.fromContentType("application/zip"))\n  )(4)\n\n// download\nimport java.io.OutputStream\n\nval os: OutputStream = ???\nval proc3: ZIO[S3, Exception, Long] = getObject("bucket-1", "upload/myfile.zip").run(ZSink.fromOutputStream(os))\n')),(0,r.kt)("h2",{id:"support-any-commands-"},"Support any commands ?"),(0,r.kt)("p",null,"If you need a method which is not wrapped by the library, you can have access to underlying S3 client in a safe manner by using"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import java.util.concurrent.CompletableFuture\nimport zio.s3._\nimport software.amazon.awssdk.services.s3.S3AsyncClient\n \ndef execute[T](f: S3AsyncClient => CompletableFuture[T]) \n")))}d.isMDXComponent=!0}}]);