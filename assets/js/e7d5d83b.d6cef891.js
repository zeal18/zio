"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[86905],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,d=u["".concat(p,".").concat(m)]||u[m]||g[m]||l;return n?i.createElement(d,o(o({ref:t},c),{},{components:n})):i.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a[u]="string"==typeof e?e:r,o[1]=a;for(var s=2;s<l;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},42360:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>l,metadata:()=>a,toc:()=>s});var i=n(87462),r=(n(67294),n(3905));const l={id:"logging",title:"Logging"},o=void 0,a={unversionedId:"zio-quill/logging",id:"zio-quill/logging",title:"Logging",description:"Logging to a File at Compile-Time",source:"@site/docs/zio-quill/logging.md",sourceDirName:"zio-quill",slug:"/zio-quill/logging",permalink:"/zio-quill/logging",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-quill/logging.md",tags:[],version:"current",frontMatter:{id:"logging",title:"Logging"},sidebar:"ecosystem-sidebar",previous:{title:"Code Generation",permalink:"/zio-quill/code-generation"},next:{title:"Additional Resources",permalink:"/zio-quill/additional-resources"}},p={},s=[{value:"Logging to a File at Compile-Time",id:"logging-to-a-file-at-compile-time",level:2},{value:"Disable Compile-Time Console Logging",id:"disable-compile-time-console-logging",level:2},{value:"Runtime",id:"runtime",level:2},{value:"Pretty Printing",id:"pretty-printing",level:2}],c={toc:s},u="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"logging-to-a-file-at-compile-time"},"Logging to a File at Compile-Time"),(0,r.kt)("p",null,"To write compile-time queries to a log, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"-Dquill.log.file=queries.sql")," and specify\nthe file to be written (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"queries.sql"),"). The path is based on the build root (i.e. the current-working-directory of the Java build)."),(0,r.kt)("p",null,"When using SBT, this parameter can be set either in your SBT_OPTS, the project-specific .sbtopts file or directly passed to the SBT command.\nIn Intellij this can be set under settings -> sbt -> VM Parameters."),(0,r.kt)("p",null,"(Also make sure that ",(0,r.kt)("inlineCode",{parentName:"p"},'use for: "Builds"')," is selected otherwise Intellij will not use SBT for the build in the first place.)"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/1369480/163513653-b5266cd6-1bff-4792-b0d2-936d24b7e0f1.png",alt:"Screenshot from 2022-04-14 23-28-47"})),(0,r.kt)("p",null,"Also note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"-Dquill.macro.log.pretty=true")," parameter works together with ",(0,r.kt)("inlineCode",{parentName:"p"},"-Dquill.log.file")," and will output pretty-printed\nqueries to the specified file."),(0,r.kt)("p",null,"For a file that looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// Example.scala\npackage io.getquill\n\nobject Example {\n  case class Person(id: Int, name: String, age: Int)\n  case class Address(owner:Int, street: String)\n  val ctx = new SqlMirrorContext(PostgresDialect, Literal)\n  import ctx._\n\n  val people = run(query[Person])\n  val addresses = run(query[Person])\n}\n")),(0,r.kt)("p",null,"The following log will be produced:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"\n-- file: /home/me/quill-example/src/main/scala/io/getquill/Example.scala:9:19\n-- time: 2022-04-14T23:18:19.533\n\n SELECT\n   x.id,\n   x.name,\n   x.age\n FROM\n   Person x\n\n;\n\n\n-- file: /home/me/quill-example/src/main/scala/io/getquill/Example.scala:10:22\n-- time: 2022-04-14T23:18:19.9\n\n SELECT\n   x.id,\n   x.name,\n   x.age\n FROM\n   Person x\n\n;\n")),(0,r.kt)("h2",{id:"disable-compile-time-console-logging"},"Disable Compile-Time Console Logging"),(0,r.kt)("p",null,"To disable the console logging of queries during compilation use ",(0,r.kt)("inlineCode",{parentName:"p"},"quill.macro.log")," option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sbt -Dquill.macro.log=false\n")),(0,r.kt)("h2",{id:"runtime"},"Runtime"),(0,r.kt)("p",null,"Quill uses SLF4J for logging. Each context logs queries which are currently executed.\nIt also logs the list of parameters that are bound into a prepared statement if any.\nTo enable that use ",(0,r.kt)("inlineCode",{parentName:"p"},"quill.binds.log")," option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"java -Dquill.binds.log=true -jar myapp.jar\n")),(0,r.kt)("h2",{id:"pretty-printing"},"Pretty Printing"),(0,r.kt)("p",null,"Quill can pretty print compile-time produced queries by leveraging a great library\nproduced by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/vertical-blank"},"@vertical-blank")," which is compatible\nwith both Scala and ScalaJS. To enable this feature use the ",(0,r.kt)("inlineCode",{parentName:"p"},"quill.macro.log.pretty")," option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sbt -Dquill.macro.log.pretty=true\n")),(0,r.kt)("p",null,"Before:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[info] /home/me/project/src/main/scala/io/getquill/MySqlTestPerson.scala:20:18: SELECT p.id, p.name, p.age, a.ownerFk, a.street, a.state, a.zip FROM Person p INNER JOIN Address a ON a.ownerFk = p.id\n")),(0,r.kt)("p",null,"After:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[info] /home/me/project/src/main/scala/io/getquill/MySqlTestPerson.scala:20:18:\n[info]   | SELECT\n[info]   |   p.id,\n[info]   |   p.name,\n[info]   |   p.age,\n[info]   |   a.ownerFk,\n[info]   |   a.street,\n[info]   |   a.state,\n[info]   |   a.zip\n[info]   | FROM\n[info]   |   Person p\n[info]   |   INNER JOIN Address a ON a.ownerFk = p.id\n")))}g.isMDXComponent=!0}}]);