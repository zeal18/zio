"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[61126],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(n),u=a,h=c["".concat(l,".").concat(u)]||c[u]||d[u]||o;return n?r.createElement(h,i(i({ref:t},m),{},{components:n})):r.createElement(h,i({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},82574:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={id:"how-generators-work",title:"How Generators Work?"},i=void 0,s={unversionedId:"reference/test/property-testing/how-generators-work",id:"reference/test/property-testing/how-generators-work",title:"How Generators Work?",description:"A Gen[R, A] represents a generator of values of type A, which requires an environment R. The Gen data type is the base functionality for generating test data for property-based testing. We use them to produce deterministic and non-deterministic (PRNG) random values.",source:"@site/docs/reference/test/property-testing/how-generators-work.md",sourceDirName:"reference/test/property-testing",slug:"/reference/test/property-testing/how-generators-work",permalink:"/reference/test/property-testing/how-generators-work",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/property-testing/how-generators-work.md",tags:[],version:"current",frontMatter:{id:"how-generators-work",title:"How Generators Work?"},sidebar:"reference-sidebar",previous:{title:"Getting Started",permalink:"/reference/test/property-testing/getting-started"},next:{title:"Built-in Generators",permalink:"/reference/test/property-testing/built-in-generators"}},l={},p=[{value:"How Generators Work?",id:"how-generators-work",level:2},{value:"Two Types of Generators",id:"two-types-of-generators",level:2},{value:"Random Generators Are Deterministic by Default",id:"random-generators-are-deterministic-by-default",level:2},{value:"How Samples Are Generated?",id:"how-samples-are-generated",level:2},{value:"Running a Generator For Debugging Purpose",id:"running-a-generator-for-debugging-purpose",level:2}],m={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"Gen[R, A]")," represents a generator of values of type ",(0,a.kt)("inlineCode",{parentName:"p"},"A"),", which requires an environment ",(0,a.kt)("inlineCode",{parentName:"p"},"R"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"Gen")," data type is the base functionality for generating test data for property-based testing. We use them to produce deterministic and non-deterministic (PRNG) random values."),(0,a.kt)("p",null,"It is encoded as a stream of optional samples:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"case class Gen[-R, +A](sample: ZStream[R, Nothing, Option[Sample[R, A]]])\n")),(0,a.kt)("p",null,"Before deep into the generators, let's see what is property-based testing and what problem it solves in the testing world."),(0,a.kt)("h2",{id:"how-generators-work"},"How Generators Work?"),(0,a.kt)("p",null,"We can think of ",(0,a.kt)("inlineCode",{parentName:"p"},"Gen[R, A]")," as a ",(0,a.kt)("inlineCode",{parentName:"p"},"ZStream[R, Nothing, A]"),". For example the ",(0,a.kt)("inlineCode",{parentName:"p"},"Gen.int")," is a stream of random integers ",(0,a.kt)("inlineCode",{parentName:"p"},"ZStream.fromZIO(Random.nextInt)"),"."),(0,a.kt)("p",null,"To find out how a generator works, Let's take a look at the following snippet.  It shows how the ",(0,a.kt)("inlineCode",{parentName:"p"},"Gen")," data type is implemented."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},'Although it doesn\'t provide the exact implementation, this condensed edition of the "Gen" data type is sufficient to grasp how generators operate.'),(0,a.kt)("p",{parentName:"admonition"},"For instance, we don't use a ",(0,a.kt)("a",{parentName:"p",href:"#random-generators-are-deterministic-by-default"},"pseudo-random generator")," throughout the following implementation. We haven't encoded the ",(0,a.kt)("a",{parentName:"p",href:"/reference/test/property-testing/shrinking"},"shrinking algorithm"),", either.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.test._\nimport zio.stream._\n\ncase class Gen[R, A](sample: ZStream[R, Nothing, A]) {\n  def map[B](f: A => B): Gen[R, B] = Gen(sample.map(f))\n\n  def flatMap[R1 <: R, B](f: A => Gen[R1, B]): Gen[R1, B] = ???\n\n  def runCollect: ZIO[R, Nothing, List[A]] = sample.runCollect.map(_.toList)\n}\n\nobject Gen {\n  // A constant generator of the specified value.\n  def const[A](a: => A): Gen[Any, A] = \n    Gen(ZStream.succeed(a))\n  \n  // A random generator of integers.\n  def int: Gen[Any, Int] = \n    Gen(ZStream.fromZIO(Random.nextInt))\n  def int(min: Int, max: Int): Gen[Any, Int] = \n    ???\n  \n  // A random generator of specified values.\n  def elements[A](as: A*): Gen[Any, A] = \n    if (as.isEmpty) Gen(ZStream.empty) else int(0, as.length - 1).map(as)\n  \n  // A constant generator of fixed values.\n  def fromIterable[A](xs: Iterable[A]): Gen[Any, A] = \n    Gen(ZStream.fromIterable(xs))\n}\n\nGen.const(42).runCollect.debug\n// Output: List(42)\n\nGen.int.runCollect.debug\n// Output: List(82) or List(3423) or List(-352) or ...\n\nGen.elements(1, 2, 3).runCollect.debug\n// Output: List(1) or List(2) or List(3)\n\nGen.fromIterable(List(1, 2, 3))\n")),(0,a.kt)("p",null,"So we can see that the ",(0,a.kt)("inlineCode",{parentName:"p"},"Gen")," data type is nothing more than the stream of random/constant values."),(0,a.kt)("h2",{id:"two-types-of-generators"},"Two Types of Generators"),(0,a.kt)("p",null,"We have two types of generators:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Deterministic Generators"),"\u2014 Generators that produce constant fixed values, such as ",(0,a.kt)("inlineCode",{parentName:"li"},"Gen.empty"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Gen.const(42)")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"Gen.fromIterable(List(1, 2, 3))"),"."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Random Generators"),"\u2014 Generators that produce random values, such as ",(0,a.kt)("inlineCode",{parentName:"li"},"Gen.boolean"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"Gen.int"),", and ",(0,a.kt)("inlineCode",{parentName:"li"},"Gen.elements(1, 2, 3)"),".")),(0,a.kt)("h2",{id:"random-generators-are-deterministic-by-default"},"Random Generators Are Deterministic by Default"),(0,a.kt)("p",null,"The important fact about random generators is that they produce deterministic values by default. This means that if we run the same random generator multiple times, it will always produce the same sequence of values to achieve reproducibility."),(0,a.kt)("p",null,"So the let's add some debugging print lines inside a test and see what values are produced:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.test._\nimport zio.test.TestAspect._\n\nobject ExampleSpec extends ZIOSpecDefault {\n  def spec =\n    test("example test") {\n      check(Gen.int(0, 10)) { n =>\n        println(n)\n        assertTrue(n + n == 2 * n)\n      }\n    } @@ samples(5)\n}\n')),(0,a.kt)("p",null,"We can see, even though the ",(0,a.kt)("inlineCode",{parentName:"p"},"Gen.int")," is a non-deterministic generator, every time we run the test, the generator will produce the same sequence of values:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"runSpec\n9\n3\n0\n9\n6\n+ example test\n")),(0,a.kt)("p",null,"This is due to the fact that the generator uses a pseudo-random number generator which uses a deterministic algorithm."),(0,a.kt)("p",null,"The generator provides a fixed seed number to its underlying deterministic algorithm to generate random numbers. As the seed number is fixed, the generator will always produce the same sequence of values."),(0,a.kt)("p",null,"For more information, there is a separate page about this on ",(0,a.kt)("a",{parentName:"p",href:"/reference/test/services/random"},"TestRandom")," which is the underlying service for generating test values."),(0,a.kt)("p",null,"This behavior helps us to have reproducible tests. However, if we need non-deterministic tests values, we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"TestAspect.nondeterministic")," to change the default behavior:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.test._\nimport zio.test.TestAspect._\n\nobject ExampleSpec extends ZIOSpecDefault {\n  def spec =\n    test("example test") {\n      check(Gen.int(0, 10)) { n =>\n        println(n)\n        assertTrue(n + n == 2 * n)\n      }\n    } @@ samples(5) @@ nondeterministic\n}\n')),(0,a.kt)("h2",{id:"how-samples-are-generated"},"How Samples Are Generated?"),(0,a.kt)("p",null,"When we run the ",(0,a.kt)("inlineCode",{parentName:"p"},"check")," function, the ",(0,a.kt)("inlineCode",{parentName:"p"},"check")," function repeatedly run the underlying stream of generators (using the ",(0,a.kt)("inlineCode",{parentName:"p"},"forever")," combinator), and then it takes ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," samples from the stream, where ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," is by default 200."),(0,a.kt)("p",null,"We can modify the default sample size by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"samples")," test aspect. So if we the ",(0,a.kt)("inlineCode",{parentName:"p"},"check")," function, with ",(0,a.kt)("inlineCode",{parentName:"p"},"TestAspect.samples(5)"),". Let's see how the samples are produced for each of the following generators:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"check(Gen.const(42))(n => ???)")," it will repeatedly run the ",(0,a.kt)("inlineCode",{parentName:"li"},"Zstream.succeed(42)")," stream, and then take ",(0,a.kt)("inlineCode",{parentName:"li"},"n")," samples from it: 42, 42, 42, 42, 42."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"check(Gen.int)(n => ???)")," it will repeatedly run the ",(0,a.kt)("inlineCode",{parentName:"li"},"ZStream.fromZIO(Random.nextInt)")," stream, and then take ",(0,a.kt)("inlineCode",{parentName:"li"},"n")," samples from it: e.g. 2, -3422, 33, 3991334, 98138."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"check(Gen.elements(1, 2, 3))(n => ???)")," it will repeatedly run the ",(0,a.kt)("inlineCode",{parentName:"li"},"ZStream.fromZIO(Random.nextInt(2).flatMap(Chunk(1, 2, 3)))")," stream, and then take ",(0,a.kt)("inlineCode",{parentName:"li"},"n")," samples from it: e.g. 3, 1, 1, 3, 2."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"check(Gen.fromIterable(List(1, 2, 3)))(n => ???)")," it will repeatedly run the ",(0,a.kt)("inlineCode",{parentName:"li"},"ZStream.fromIterable(List(1, 2, 3))")," stream, and then take ",(0,a.kt)("inlineCode",{parentName:"li"},"n")," samples from it: 1, 2, 3, 1, 2.")),(0,a.kt)("p",null,"When we run the ",(0,a.kt)("inlineCode",{parentName:"p"},"check")," function with multiple generators, the samples will be the cartesian product of their streams. Let's try some examples:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.test._\n\ntest("two deterministic generators") {\n  check(Gen.const(1), Gen.fromIterable(List("a", "b", "c"))) { (a, b) =>\n    println((a, b))\n    assertTrue(true)\n  }\n} @@ TestAspect.samples(5)\n')),(0,a.kt)("p",null,"The output will be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"(1,a)\n(1,b)\n(1,c)\n(1,a)\n(1,b)\n+ two deterministic generators\n1 tests passed. 0 tests failed. 0 tests ignored.\n")),(0,a.kt)("p",null,"So the example above is something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.stream._\n\n{\n  for {\n    a <- ZStream.succeed(1)\n    b <- ZStream.fromIterable(List("a", "b", "c"))\n  } yield (a, b)\n}.forever.take(5).runCollect.debug\n')),(0,a.kt)("p",null,"Now let's try use one non-deterministic generator and one deterministic generator:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.test._\n\ntest("one non-deterministic generator and one deterministic generator") {\n  check(Gen.int(1, 3), Gen.fromIterable(List("a", "b", "c"))) { (a, b) =>\n    println((a, b))\n    assertTrue(true)\n  }\n} @@ TestAspect.samples(5)\n')),(0,a.kt)("p",null,"Here is one example output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"(3,a)\n(3,b)\n(3,c)\n(2,a)\n(2,b)\n+ one non-deterministic generator and one deterministic generator\n1 tests passed. 0 tests failed. 0 tests ignored.\n")),(0,a.kt)("p",null,"This is the same as the previous example, it is like we have the following stream:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.stream._\n\n{\n  for {\n    a <- ZStream.fromZIO(Random.nextIntBetween(1, 3))\n    b <- ZStream.fromIterable(List("a", "b", "c"))\n  } yield (a, b)\n}.forever.take(5).runCollect.debug\n')),(0,a.kt)("h2",{id:"running-a-generator-for-debugging-purpose"},"Running a Generator For Debugging Purpose"),(0,a.kt)("p",null,"To run a generator, we can call ",(0,a.kt)("inlineCode",{parentName:"p"},"runCollect")," operation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.test._\n\nval ints: ZIO[Any, Nothing, List[Int]] = Gen.int.runCollect.debug\n// Output: List(-2090696713)\n")),(0,a.kt)("p",null,"This will return a ",(0,a.kt)("inlineCode",{parentName:"p"},"ZIO")," effect containing all its values in a list, which in this example it contains only one element."),(0,a.kt)("p",null,"To create more samples, we can use ",(0,a.kt)("inlineCode",{parentName:"p"},"Gen#runCollectN"),", which repeatedly runs the generator as much as we need. In this example, it will generate a list of containing 5 integer elements:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"Gen.int.runCollectN(5).debug\n")),(0,a.kt)("p",null,"In addition, there is an operator called ",(0,a.kt)("inlineCode",{parentName:"p"},"Gen#runHead"),", which returns the first value generated by the generator."))}d.isMDXComponent=!0}}]);