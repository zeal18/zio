"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[23366],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),f=a,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||o;return n?r.createElement(m,s(s({ref:t},c),{},{components:n})):r.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=f;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},905:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={id:"how-it-works",title:"How it Works?"},s=void 0,i={unversionedId:"reference/test/assertions/how-it-works",id:"reference/test/assertions/how-it-works",title:"How it Works?",description:"In this section we are going to learn about the internals of the Assertion data type. So feel free to skip this section if you are not interested.",source:"@site/docs/reference/test/assertions/how-it-works.md",sourceDirName:"reference/test/assertions",slug:"/reference/test/assertions/how-it-works",permalink:"/reference/test/assertions/how-it-works",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/assertions/how-it-works.md",tags:[],version:"current",frontMatter:{id:"how-it-works",title:"How it Works?"},sidebar:"reference-sidebar",previous:{title:"Examples",permalink:"/reference/test/assertions/examples"},next:{title:"Test Hierarchies and Organization",permalink:"/reference/test/test-hierarchies-and-organization"}},l={},p=[{value:"The <code>test</code> Function",id:"the-test-function",level:2},{value:"The <code>assert</code> Function",id:"the-assert-function",level:2},{value:"The <code>Assertion</code> data type",id:"the-assertion-data-type",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"In this section we are going to learn about the internals of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Assertion")," data type. So feel free to skip this section if you are not interested.")),(0,a.kt)("h2",{id:"the-test-function"},"The ",(0,a.kt)("inlineCode",{parentName:"h2"},"test")," Function"),(0,a.kt)("p",null,"In order to understand the ",(0,a.kt)("inlineCode",{parentName:"p"},"Assertion")," data type, let's first look at the ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"def test[In](label: String)(assertion: => In)(implicit testConstructor: TestConstructor[Nothing, In]): testConstructor.Out\n")),(0,a.kt)("p",null,"Its signature is a bit complicated and uses ",(0,a.kt)("em",{parentName:"p"},"path dependent types"),", but it doesn't matter. We can think of a ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," as a function from ",(0,a.kt)("inlineCode",{parentName:"p"},"TestResult")," (or its effectful versions such as ",(0,a.kt)("inlineCode",{parentName:"p"},"ZIO[R, E, TestResult]")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"ZSTM[R, E, TestResult]"),") to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Spec[R, E]")," data type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"def test(label: String)(assertion: => TestResult): Spec[Any, Nothing]\ndef test(label: String)(assertion: => ZIO[R, E, TestResult]): Spec[R, E]\n")),(0,a.kt)("p",null,"Therefore, the function ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," needs a ",(0,a.kt)("inlineCode",{parentName:"p"},"TestResult"),". The most common way to produce a ",(0,a.kt)("inlineCode",{parentName:"p"},"TestResult")," is to resort to ",(0,a.kt)("inlineCode",{parentName:"p"},"assert")," or its effectful counterpart ",(0,a.kt)("inlineCode",{parentName:"p"},"assertZIO"),". The former one is for creating ordinary ",(0,a.kt)("inlineCode",{parentName:"p"},"TestResult")," values and the latter one is for producing effectful ",(0,a.kt)("inlineCode",{parentName:"p"},"TestResult")," values. Both of them accept a value of type ",(0,a.kt)("inlineCode",{parentName:"p"},"A")," (effectful version wrapped in a ",(0,a.kt)("inlineCode",{parentName:"p"},"ZIO"),") and an ",(0,a.kt)("inlineCode",{parentName:"p"},"Assertion[A]"),"."),(0,a.kt)("h2",{id:"the-assert-function"},"The ",(0,a.kt)("inlineCode",{parentName:"h2"},"assert")," Function"),(0,a.kt)("p",null,"Let's look at the ",(0,a.kt)("inlineCode",{parentName:"p"},"assert")," function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"def assert[A](expr: => A)(assertion: Assertion[A]): TestResult\n")),(0,a.kt)("p",null,"It takes an expression of type ",(0,a.kt)("inlineCode",{parentName:"p"},"A")," and an ",(0,a.kt)("inlineCode",{parentName:"p"},"Assertion[A]")," and returns the ",(0,a.kt)("inlineCode",{parentName:"p"},"TestResult")," which is the boolean algebra of the ",(0,a.kt)("inlineCode",{parentName:"p"},"AssertionResult"),". Furthermore, we have an ",(0,a.kt)("inlineCode",{parentName:"p"},"Assertion[A]")," which is capable of producing ",(0,a.kt)("em",{parentName:"p"},"assertion results")," on any value of type ",(0,a.kt)("inlineCode",{parentName:"p"},"A"),". So the ",(0,a.kt)("inlineCode",{parentName:"p"},"assert")," function can apply the expression to the assertion and produce the ",(0,a.kt)("inlineCode",{parentName:"p"},"TestResult"),"."),(0,a.kt)("h2",{id:"the-assertion-data-type"},"The ",(0,a.kt)("inlineCode",{parentName:"h2"},"Assertion")," data type"),(0,a.kt)("p",null,"We can think of an ",(0,a.kt)("inlineCode",{parentName:"p"},"Assertion[A]")," as a function of type ",(0,a.kt)("inlineCode",{parentName:"p"},"A => Boolean"),"."),(0,a.kt)("p",null,"As a proposition, assertions compose using logical conjunction and disjunction and can be negated:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.test._\n\nval greaterThanZero: Assertion[Int] = Assertion.isPositive\nval lessThanFive   : Assertion[Int] = Assertion.isLessThan(5)\nval equalTo10      : Assertion[Int] = Assertion.equalTo(10)\n\nval assertion: Assertion[Int] = greaterThanZero && lessThanFive || equalTo10.negate\n")),(0,a.kt)("p",null,"After composing them, we can run it on any expression:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nval result: TestResult = assertion.run(10)\n")))}d.isMDXComponent=!0}}]);