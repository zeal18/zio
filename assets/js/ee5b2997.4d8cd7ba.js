"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[69422],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(t),d=r,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return t?a.createElement(f,p(p({ref:n},c),{},{components:t})):a.createElement(f,p({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,p=new Array(o);p[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[m]="string"==typeof e?e:r,p[1]=i;for(var s=2;s<o;s++)p[s]=t[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},35129:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=t(87462),r=(t(67294),t(3905));const o={id:"map-operations",title:"Map Operations"},p=void 0,i={unversionedId:"reference/error-management/operations/map-operations",id:"reference/error-management/operations/map-operations",title:"Map Operations",description:"Other than ZIO#map and ZIO#flatMap, ZIO has several other operators to manage errors while mapping:",source:"@site/docs/reference/error-management/operations/map-operations.md",sourceDirName:"reference/error-management/operations",slug:"/reference/error-management/operations/map-operations",permalink:"/reference/error-management/operations/map-operations",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/error-management/operations/map-operations.md",tags:[],version:"current",frontMatter:{id:"map-operations",title:"Map Operations"},sidebar:"reference-sidebar",previous:{title:"Error Accumulation",permalink:"/reference/error-management/error-accumulation"},next:{title:"Chaining Effects Based on Errors",permalink:"/reference/error-management/operations/chaining-effects-based-on-errors"}},l={},s=[{value:"<code>ZIO#mapError</code>/<code>ZIO#mapErrorCause</code>",id:"ziomaperrorziomaperrorcause",level:2},{value:"<code>ZIO#mapAttempt</code>",id:"ziomapattempt",level:2},{value:"<code>ZIO#mapBoth</code>",id:"ziomapboth",level:2}],c={toc:s},m="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Other than ",(0,r.kt)("inlineCode",{parentName:"p"},"ZIO#map")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ZIO#flatMap"),", ZIO has several other operators to manage errors while mapping:"),(0,r.kt)("h2",{id:"ziomaperrorziomaperrorcause"},(0,r.kt)("inlineCode",{parentName:"h2"},"ZIO#mapError"),"/",(0,r.kt)("inlineCode",{parentName:"h2"},"ZIO#mapErrorCause")),(0,r.kt)("p",null,"Let's begin with ",(0,r.kt)("inlineCode",{parentName:"p"},"ZIO#mapError")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ZIO#mapErrorCause"),". These operators help us to access the error channel as a raw error value or as a type of ",(0,r.kt)("inlineCode",{parentName:"p"},"Cause")," and map their values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"trait ZIO[-R, +E, +A] {\n  def mapError[E2](f: E => E2): ZIO[R, E2, A]\n  def mapErrorCause[E2](h: Cause[E] => Cause[E2]): ZIO[R, E2, A]\n}\n")),(0,r.kt)("p",null,"Here are two simple examples for these operators:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\ndef parseInt(input: String): ZIO[Any, NumberFormatException, Int] = ???\n\n// mapping the error of the original effect to its message\nval r1: ZIO[Any, String, Int] =\n  parseInt("five")                // ZIO[Any, NumberFormatException, Int]\n    .mapError(e => e.getMessage)  // ZIO[Any, String, Int]  // ZIO[Any, String, Int]\n\n// mapping the cause of the original effect to be untraced\nval r2 = parseInt("five")         // ZIO[Any, NumberFormatException, Int]\n  .mapErrorCause(_.untraced)      // ZIO[Any, NumberFormatException, Int]\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"Note:"))),(0,r.kt)("p",{parentName:"blockquote"},"Note that mapping over an effect's success or error channel does not change the success or failure of the effect, in the same way that mapping over an ",(0,r.kt)("inlineCode",{parentName:"p"},"Either")," does not change whether the ",(0,r.kt)("inlineCode",{parentName:"p"},"Either")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"Left")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Right"),".")),(0,r.kt)("h2",{id:"ziomapattempt"},(0,r.kt)("inlineCode",{parentName:"h2"},"ZIO#mapAttempt")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ZIO#mapAttempt")," returns an effect whose success is mapped by the specified side-effecting ",(0,r.kt)("inlineCode",{parentName:"p"},"f")," function, translating any thrown exceptions into typed failed effects. So it converts an unchecked exception to a checked one by returning the ",(0,r.kt)("inlineCode",{parentName:"p"},"RIO")," effect."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"  trait ZIO[-R, +E, +A] {\n    def map[B](f: A => B): ZIO[R, E, B]\n    def mapAttempt[B](f: A => B): ZIO[R, Throwable, B]\n  }\n")),(0,r.kt)("p",null,"Using operations that can throw exceptions inside of ",(0,r.kt)("inlineCode",{parentName:"p"},"ZIO#map")," such as ",(0,r.kt)("inlineCode",{parentName:"p"},"effect.map(_.unsafeOpThatThrows)")," will result in a defect (an unexceptional effect that will die). In the following example, when we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ZIO#map")," operation. So, if the ",(0,r.kt)("inlineCode",{parentName:"p"},"String#toInt")," operation throws ",(0,r.kt)("inlineCode",{parentName:"p"},"NumberFormatException")," it will be converted to a defect:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nval result: ZIO[Any, Nothing, Int] =\n  Console.readLine.orDie.map(_.toInt)\n")),(0,r.kt)("p",null,"As a result, when the map operation is unsafe, it may lead to buggy programs that may crash, as shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nobject MainApp extends ZIOAppDefault {\n  val myApp: ZIO[Any, Nothing, Unit] =\n    Console.print("Please enter a number: ").orDie *>\n      Console.readLine.orDie\n        .map(_.toInt)\n        .map(_ % 2 == 0)\n        .flatMap {\n          case true =>\n            Console.printLine("You have entered an even number.").orDie\n          case false =>\n            Console.printLine("You have entered an odd number.").orDie\n        }\n\n  def run = myApp\n}\n')),(0,r.kt)("p",null,'Converting literal "five" String to Int by calling ',(0,r.kt)("inlineCode",{parentName:"p"},"toInt")," is a side effecting operation because it will throw ",(0,r.kt)("inlineCode",{parentName:"p"},"NumberFormatException"),' exception. So in the previous example, if we enter a non-integer number, e.g. "five", it will die because of a ',(0,r.kt)("inlineCode",{parentName:"p"},"NumberFormatException")," defect:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'Please enter a number: five\ntimestamp=2022-03-17T14:01:33.323639073Z level=ERROR thread=#zio-fiber-0 message="Exception in thread "zio-fiber-2" java.lang.NumberFormatException: For input string: "five"\n    at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n    at java.base/java.lang.Integer.parseInt(Integer.java:660)\n    at java.base/java.lang.Integer.parseInt(Integer.java:778)\n    at scala.collection.StringOps$.toInt$extension(StringOps.scala:910)\n    at MainApp$.$anonfun$myApp$3(MainApp.scala:7)\n    at MainApp$.$anonfun$myApp$3$adapted(MainApp.scala:7)\n    at zio.ZIO.$anonfun$map$1(ZIO.scala:1168)\n    at zio.ZIO$FlatMap.apply(ZIO.scala:6182)\n    at zio.ZIO$FlatMap.apply(ZIO.scala:6171)\n    at zio.internal.FiberContext.runUntil(FiberContext.scala:885)\n    at zio.internal.FiberContext.run(FiberContext.scala:115)\n    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)\n    at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)\n    at java.base/java.lang.Thread.run(Thread.java:831)\n    at zio.internal.FiberContext.runUntil(FiberContext.scala:538)\n    at <empty>.MainApp.myApp(MainApp.scala:8)\n    at <empty>.MainApp.myApp(MainApp.scala:9)"\n')),(0,r.kt)("p",null,"We can see that the error channel of ",(0,r.kt)("inlineCode",{parentName:"p"},"myApp")," is typed as ",(0,r.kt)("inlineCode",{parentName:"p"},"Nothing"),", so it's not an exceptional error. If we want typed effects, this behavior is not intended. So instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"ZIO#map")," we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"mapAttempt")," combinator which is a safe map operator that translates all thrown exceptions into typed exceptional effect."),(0,r.kt)("p",null,"To prevent converting exceptions to defects, we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"ZIO#mapAttempt")," which converts any exceptions to exceptional effects:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nval result: ZIO[Any, Throwable, Int] =\n  Console.readLine.orDie.mapAttempt(_.toInt)\n")),(0,r.kt)("p",null,"Having typed errors helps us to catch errors explicitly and handle them in the right way:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nobject MainApp extends ZIOAppDefault {\n  val myApp: ZIO[Any, Nothing, Unit] =\n    Console.print("Please enter a number: ").orDie *>\n      Console.readLine.orDie\n        .mapAttempt(_.toInt)\n        .map(_ % 2 == 0)\n        .flatMap {\n          case true =>\n            Console.printLine("You have entered an even number.").orDie\n          case false =>\n            Console.printLine("You have entered an odd number.").orDie\n        }.catchAll(_ => myApp)\n\n  def run = myApp\n}\n')),(0,r.kt)("h2",{id:"ziomapboth"},(0,r.kt)("inlineCode",{parentName:"h2"},"ZIO#mapBoth")),(0,r.kt)("p",null,"It takes two map functions, one for the error channel and the other for the success channel, and maps both sides of a ZIO effect:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"trait ZIO[-R, +E, +A] {\n  def mapBoth[E2, B](f: E => E2, g: A => B): ZIO[R, E2, B]\n}\n")),(0,r.kt)("p",null,"Here is a simple example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nval result: ZIO[Any, String, Int] =\n  Console.readLine.orDie.mapAttempt(_.toInt).mapBoth(\n    _ => "non-integer input",\n    n => Math.abs(n)\n  )\n')))}u.isMDXComponent=!0}}]);