"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[54340],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),h=i,u=m["".concat(s,".").concat(h)]||m[h]||d[h]||r;return n?a.createElement(u,o(o({ref:t},c),{},{components:n})):a.createElement(u,o({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},149:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const r={id:"internals",title:"Internals"},o="Internals",l={unversionedId:"zio-flow/internals",id:"zio-flow/internals",title:"Internals",description:"This page contains information about some implementation details of ZIO Flow which are not necessary to know about for",source:"@site/docs/zio-flow/internals.md",sourceDirName:"zio-flow",slug:"/zio-flow/internals",permalink:"/zio-flow/internals",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-flow/internals.md",tags:[],version:"current",frontMatter:{id:"internals",title:"Internals"},sidebar:"ecosystem-sidebar",previous:{title:"Examples",permalink:"/zio-flow/examples"},next:{title:"ZIO Http",permalink:"/zio-http/"}},s={},p=[{value:"The Remote type",id:"the-remote-type",level:2},{value:"Schemas and dynamic values",id:"schemas-and-dynamic-values",level:3},{value:"Remote function application",id:"remote-function-application",level:3},{value:"What is implemented as a Remote and what not?",id:"what-is-implemented-as-a-remote-and-what-not",level:3},{value:"Persistent variables and promises",id:"persistent-variables-and-promises",level:2},{value:"Executor state management",id:"executor-state-management",level:2},{value:"Transactions",id:"transactions",level:2},{value:"Scoping rules",id:"scoping-rules",level:2},{value:"Workflows",id:"workflows",level:3},{value:"Fibers",id:"fibers",level:3},{value:"Transactions",id:"transactions-1",level:3},{value:"Garbage collection",id:"garbage-collection",level:2}],c={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"internals"},"Internals"),(0,i.kt)("p",null,"This page contains information about some implementation details of ZIO Flow which are not necessary to know about for\nregular use of the system."),(0,i.kt)("h2",{id:"the-remote-type"},"The Remote type"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Remote")," data type is a core concept in ZIO Flow. The most important feature a ",(0,i.kt)("inlineCode",{parentName:"p"},"Remote")," provides is that it can be\n",(0,i.kt)("em",{parentName:"p"},"evaluated"),". It is important to understand that evaluating a ",(0,i.kt)("inlineCode",{parentName:"p"},"Remote[A]")," does not produce a type of ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),"!\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"evaluateDynamic")," function provides a ",(0,i.kt)("inlineCode",{parentName:"p"},"DynamicValue"),", which is a generic data type from ",(0,i.kt)("inlineCode",{parentName:"p"},"zio-schema"),".\nThis ",(0,i.kt)("inlineCode",{parentName:"p"},"DynamicValue")," must be something isomorphic to the ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," type the remote value represents. So in case we have\na ",(0,i.kt)("inlineCode",{parentName:"p"},"Schema[A]")," we can convert this ",(0,i.kt)("inlineCode",{parentName:"p"},"DynamicValue")," back to a typed ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"Remote")," itself contains a helper method\ncalled ",(0,i.kt)("inlineCode",{parentName:"p"},".eval")," that requires an implicit schema for ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," and thus it returns with a typed value instead of\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"DynamicValue"),". This method is only used in special cases in the executor though, because the executor does not\nalways have a ",(0,i.kt)("em",{parentName:"p"},"schema")," for the values it is working with."),(0,i.kt)("h3",{id:"schemas-and-dynamic-values"},"Schemas and dynamic values"),(0,i.kt)("p",null,'This "limitation" allows us to work with user-defined types in ZIO Flow programs without the need to inject these types\ninto the server\'s classpath! Another reason is that we cannot serialize a ',(0,i.kt)("inlineCode",{parentName:"p"},"Schema")," that defines transformations via\nScala functions. If we just use the dynamic values on the server side we can run all the flow steps and only convert to\nactual typed representation when necessary."),(0,i.kt)("p",null,"There are three main cases when converting to typed value is required:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'When a flow finishes running, the user may want to get a typed result. This is OK because it happens on the "client\nside" (where the flow is defined, not on the executor). This is the process where our custom types are defined so we\nhave the necessary ',(0,i.kt)("inlineCode",{parentName:"li"},"Schema")," to convert the dynamic result value to the expected one."),(0,i.kt)("li",{parentName:"ul"},"When calling external services, for example using ",(0,i.kt)("inlineCode",{parentName:"li"},"Operation.Http"),", the serialization of the parameters like request\nbody needs to know its ",(0,i.kt)("inlineCode",{parentName:"li"},"Schema"),". This is a schema that is serialized as part of the flow, because it is used on the\nserver side. So this is ",(0,i.kt)("em",{parentName:"li"},"not")," the same schema that the client side has, but it is still necessary because it may\ncontain some additional information required for the serialization codec to produce the expected format."),(0,i.kt)("li",{parentName:"ul"},'When performing some server-side operations that are "native". For example performing numerical operations is\nsomething that is implemented by calling the underlying Java implementation for those numeric operations. To do so, we\nneed to convert the ',(0,i.kt)("inlineCode",{parentName:"li"},"DynamicValue")," to the given numeric type to be able to call the native implementation.")),(0,i.kt)("p",null,"Let's go through an example!"),(0,i.kt)("p",null,"We define a case class with a schema:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.durationInt\nimport zio.flow._\nimport zio.flow.operation.http._\nimport zio.schema._\n\nfinal case class Example1(name: String, value: Int)\nobject Example1 {\n  implicit val schema = DeriveSchema.gen[Example1]\n}\n")),(0,i.kt)("p",null,"then we store this as a ",(0,i.kt)("inlineCode",{parentName:"p"},"Remote")," value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val remote1 = Remote(Example1("something", 1))\n// remote1: Remote[Example1] = Literal(\n//   value = Record(\n//     id = Nominal(\n//       packageName = IndexedSeq("repl"),\n//       objectNames = IndexedSeq("MdocSession", "MdocApp"),\n//       typeName = "Example1"\n//     ),\n//     values = ListMap(\n//       "name" -> Primitive(value = "something", standardType = string),\n//       "value" -> Primitive(value = 1, standardType = int)\n//     )\n//   )\n// )\n')),(0,i.kt)("p",null,"This will first convert the ",(0,i.kt)("inlineCode",{parentName:"p"},"Example1")," value to a ",(0,i.kt)("inlineCode",{parentName:"p"},"DynamicValue")," and then wrap it in a ",(0,i.kt)("inlineCode",{parentName:"p"},"Remote.Literal")," constructor.\nThis particular remote constructor does not store anything else than the dynamic value. The schema of ",(0,i.kt)("inlineCode",{parentName:"p"},"Example1")," is not\ntransferred to the executor. Evaluating it just returns the dynamic value itself. To call ",(0,i.kt)("inlineCode",{parentName:"p"},".eval")," and get\nback ",(0,i.kt)("inlineCode",{parentName:"p"},"Example1")," we need to provide the schema, which we only have on the definition side."),(0,i.kt)("p",null,"Now let's assume that we have an ",(0,i.kt)("em",{parentName:"p"},"activity")," that requires an ",(0,i.kt)("inlineCode",{parentName:"p"},"Example1")," value as its input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val activity1: Activity[Example1, Unit] =\n  Activity(\n    "example activity",\n    "",\n    operation = Operation.Http(\n      host = "https://example.com",\n      API\n        .post("test")\n        .input[Example1]\n        .output[Unit]\n    ),\n    check = Activity.checkNotSupported,\n    compensate = Activity.compensateNotSupported\n  )\n')),(0,i.kt)("p",null,"We can pass ",(0,i.kt)("inlineCode",{parentName:"p"},"remote1")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"activity1")," to perform the HTTP request:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val flow1 = activity1(remote1)\n")),(0,i.kt)("p",null,"This translates to a ",(0,i.kt)("inlineCode",{parentName:"p"},"ZFlow.RunActivity")," value that connects a ",(0,i.kt)("inlineCode",{parentName:"p"},"Remote")," and an ",(0,i.kt)("inlineCode",{parentName:"p"},"Activity"),". The activity, however,\nthrough the ",(0,i.kt)("inlineCode",{parentName:"p"},"operation")," field, stores the input and output schema. This means that when we serialize ",(0,i.kt)("inlineCode",{parentName:"p"},"flow1"),", we also\nserialize ",(0,i.kt)("inlineCode",{parentName:"p"},"Example1.schema")," as part of it. Serializing a schema means converting it to a ",(0,i.kt)("inlineCode",{parentName:"p"},"MetaSchema"),", then on the\nserver side we deserialize a ",(0,i.kt)("inlineCode",{parentName:"p"},"MetaSchema")," and produce a ",(0,i.kt)("inlineCode",{parentName:"p"},"Schema")," from it. On the server side, however, we don't know\nanything about the ",(0,i.kt)("inlineCode",{parentName:"p"},"Example1")," Scala class at all! So the deserialized schema on the server side will be\na ",(0,i.kt)("inlineCode",{parentName:"p"},"GenericRecord"),", which stores its fields in a ",(0,i.kt)("inlineCode",{parentName:"p"},"ListMap[String, _]"),". That's a representation isomorphic to the original\ncase class, so the server can work with it."),(0,i.kt)("h3",{id:"remote-function-application"},"Remote function application"),(0,i.kt)("p",null,"Let's see how ",(0,i.kt)("em",{parentName:"p"},"remote function application works"),"."),(0,i.kt)("p",null,"First we define a remote function as a regular Scala function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val f1 = (x: Remote[Int]) => x + 1 \n// f1: Remote[Int] => Remote[Int] = <function1>\n")),(0,i.kt)("p",null,"This is not a serializable ",(0,i.kt)("inlineCode",{parentName:"p"},"Remote")," value yet, it is a Scala function. So we have to first convert it to\na ",(0,i.kt)("inlineCode",{parentName:"p"},"Remote.UnboundRemoteFunction"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val f2 = Remote.UnboundRemoteFunction.make(f1)\n// f2: Remote.UnboundRemoteFunction[Int, Int] = UnboundRemoteFunction(\n//   input = Unbound(identifier = ce0fdfae-90df-4cf5-b49d-c165ff9c1b2b),\n//   result = Binary(\n//     left = Unbound(identifier = ce0fdfae-90df-4cf5-b49d-c165ff9c1b2b),\n//     right = Literal(value = Primitive(value = 1, standardType = int)),\n//     operator = Numeric(\n//       operator = Add,\n//       numeric = zio.flow.remote.numeric.Numeric$NumericInt$@6533bc8e\n//     )\n//   )\n// )\n")),(0,i.kt)("p",null,"This creates a ",(0,i.kt)("inlineCode",{parentName:"p"},"Remote.Unbound")," representing the unbound input parameter of the function, and ",(0,i.kt)("em",{parentName:"p"},"calls"),' the function with\nit, injecting this "hole" in our expression tree.'),(0,i.kt)("p",null,"Then we can ",(0,i.kt)("em",{parentName:"p"},"bind")," the parameter of this function by calling ",(0,i.kt)("inlineCode",{parentName:"p"},".apply")," on ",(0,i.kt)("inlineCode",{parentName:"p"},"f2"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val f3 = f2(100)\n// f3: Remote[Int] = Bind(\n//   unbound = Unbound(identifier = ce0fdfae-90df-4cf5-b49d-c165ff9c1b2b),\n//   value = Literal(value = Primitive(value = 100, standardType = int)),\n//   inner = Binary(\n//     left = Unbound(identifier = ce0fdfae-90df-4cf5-b49d-c165ff9c1b2b),\n//     right = Literal(value = Primitive(value = 1, standardType = int)),\n//     operator = Numeric(\n//       operator = Add,\n//       numeric = zio.flow.remote.numeric.Numeric$NumericInt$@6533bc8e\n//     )\n//   )\n// )\n")),(0,i.kt)("p",null,"This way we get a ",(0,i.kt)("inlineCode",{parentName:"p"},"Remote.Bind")," which stores the parameter value (a ",(0,i.kt)("inlineCode",{parentName:"p"},"Remote.Literal")," holding ",(0,i.kt)("inlineCode",{parentName:"p"},"100"),")"),(0,i.kt)("p",null,"Let's see what happens when we evaluate this:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"First we evaluate the ",(0,i.kt)("em",{parentName:"li"},"parameter value")," and get a ",(0,i.kt)("inlineCode",{parentName:"li"},"DynamicValue")," back"),(0,i.kt)("li",{parentName:"ul"},"Then we generate a ",(0,i.kt)("em",{parentName:"li"},"fresh")," ",(0,i.kt)("inlineCode",{parentName:"li"},"RemoteVariableName"),", a new ID that is guaranteed that was not used before"),(0,i.kt)("li",{parentName:"ul"},"We store the parameter value in a ",(0,i.kt)("em",{parentName:"li"},"remote variable")," with this new ID. When this evaluation is part of a persistent\nflow execution, in this case the ",(0,i.kt)("em",{parentName:"li"},"remote context")," is not persisting the remote variable yet. It is just storing it in\nmemory."),(0,i.kt)("li",{parentName:"ul"},"We push a ",(0,i.kt)("em",{parentName:"li"},"binding")," in the ",(0,i.kt)("em",{parentName:"li"},"local context"),". The local context belongs to a single remote evaluation, while the remote\ncontext for a whole persistent execution step. By pushing the local binding to the local context we are able to\nevaluate the ",(0,i.kt)("inlineCode",{parentName:"li"},"Remote.Unbound")," nodes."),(0,i.kt)("li",{parentName:"ul"},"We evaluate the ",(0,i.kt)("inlineCode",{parentName:"li"},"Bind"),"'s inner remote, which is the ",(0,i.kt)("inlineCode",{parentName:"li"},"UnboundRemoteFunction"),". This is a remote expression tree which\nhas ",(0,i.kt)("inlineCode",{parentName:"li"},"Remote.Unbound")," in it, which we can now evaluate to the evaluated input because it is stored in the local\ncontext."),(0,i.kt)("li",{parentName:"ul"},"After that we remove the binding from the local context.")),(0,i.kt)("p",null,"At this point we have a result of the applied function, but we are not done yet. It is possible that the ",(0,i.kt)("em",{parentName:"p"},"result")," of the\nfunction is a remote that captures the original ",(0,i.kt)("inlineCode",{parentName:"p"},"Unbound")," remote node, but the binding is only active during evaluating\nthis particular remote ",(0,i.kt)("inlineCode",{parentName:"p"},"Bind"),". So that would lead into an invalid continuation. To help imagine this situation, consider\nthis very simple and unusual example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val f4 = (x: Remote[Int]) => ZFlow.succeed(x)\n// f4: Remote[Int] => ZFlow[Any, zio.package.ZNothing, Int] = <function1>\n")),(0,i.kt)("p",null,"This could be a function passed to a ",(0,i.kt)("inlineCode",{parentName:"p"},"flatMap")," in a ZIO Flow program."),(0,i.kt)("p",null,"When we evaluate the function we just get back a new ",(0,i.kt)("inlineCode",{parentName:"p"},"ZFlow")," value, that refers to a ",(0,i.kt)("inlineCode",{parentName:"p"},"Remote.Unbound")," node (by using ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),"\nin ",(0,i.kt)("inlineCode",{parentName:"p"},"succeed"),"). But the binding is only active during the actual function evaluation. So the solution ZIO Flow has is\nthat once we evaluated a function, we check if the ",(0,i.kt)("em",{parentName:"p"},"result")," refers to the input ",(0,i.kt)("inlineCode",{parentName:"p"},"Unbound")," identifier. All ",(0,i.kt)("inlineCode",{parentName:"p"},"ZFlow"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"Remote")," nodes are tracking their used variables so this does not require traversing the whole continuation. If it\ndoes not contain it, we are done. Otherwise we ",(0,i.kt)("em",{parentName:"p"},"substitute")," the ",(0,i.kt)("inlineCode",{parentName:"p"},"Unbound")," node in the result tree to the ",(0,i.kt)("em",{parentName:"p"},"remote\nvariable")," we generated. This way we moved out the local binding to be a persisted binding, as remote variables are\npersisted; now it can be accessed in the continuation safely, even if the executor restarts."),(0,i.kt)("h3",{id:"what-is-implemented-as-a-remote-and-what-not"},"What is implemented as a Remote and what not?"),(0,i.kt)("p",null,"There are many ",(0,i.kt)("inlineCode",{parentName:"p"},"Remote")," constructors for some primitive operations we support, but there are even more functionalities\nimplemented in other classes, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"BinaryOperators"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"RemoteConversions"),", etc. The primary distinction is that if\nsomething can be implemented by staying on the level of ",(0,i.kt)("inlineCode",{parentName:"p"},"DynamicValue"),"s, it is a ",(0,i.kt)("inlineCode",{parentName:"p"},"Remote")," constructor. If the\ncalculation requires converting the dynamic values to some typed value first, it is implemented in one of the supporting\nclasses such as the ones mentioned above."),(0,i.kt)("h2",{id:"persistent-variables-and-promises"},"Persistent variables and promises"),(0,i.kt)("p",null,"From the ZIO Flow program's perspective a persistent variables has a name typed as ",(0,i.kt)("inlineCode",{parentName:"p"},"RemoteVariableName"),", which is just a\nwrapper over ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),". The name used to store the variable in the ",(0,i.kt)("em",{parentName:"p"},"key-value store")," is derived from this name but\ncontains more information."),(0,i.kt)("p",null,"Each variable is defined in a given ",(0,i.kt)("a",{parentName:"p",href:"#scoping-rules"},"scope"),". In short, the scope identifies the flow/fiber/transaction\nthe variable was defined in. When accessing a remote variable there are scoping rules (defined below) defining how\nvariables can be accessed from parent scopes."),(0,i.kt)("p",null,"The actual variable name used for storing the variable is described by ",(0,i.kt)("inlineCode",{parentName:"p"},"ScopedRemoteVariableName"),", which associates\na ",(0,i.kt)("inlineCode",{parentName:"p"},"RemoteVariableScope")," with a ",(0,i.kt)("inlineCode",{parentName:"p"},"RemoteVariableName"),". The ",(0,i.kt)("em",{parentName:"p"},"key")," has to be invertible\nfor ",(0,i.kt)("a",{parentName:"p",href:"#garbage-collection"},"garbage collection")," to be able to identify all the stored variables."),(0,i.kt)("p",null,"The persistent executor is not storing the variables directly using the ",(0,i.kt)("inlineCode",{parentName:"p"},"KeyValueStore")," interface, but uses a wrapper on\ntop of it called ",(0,i.kt)("inlineCode",{parentName:"p"},"RemoteVariableKeyValueStore"),". This wrapper is responsible for dealing with the scoping rules,\npublishing change events for watched variables, and to handle ",(0,i.kt)("em",{parentName:"p"},"timestamps"),"."),(0,i.kt)("p",null,"Each variable has a timestamp. Setting a new value for a remote variable does not overwrite the old value, but instead\nwrites a new value with a new timestamp. Timestamps are essential for ",(0,i.kt)("a",{parentName:"p",href:"#transactions"},"transactions")," to be able to detect\nconflicts in accessing the variables. The Timestamp values are coming from a ",(0,i.kt)("em",{parentName:"p"},"virtual clock")," which is basically\nincrementing at each flow step. Forked flows inherit the current parent timestamp. In case a forked flow is joined, the\nparent fiber's virtual clock will be advanced to the maximum of the parent and the child fiber's clock."),(0,i.kt)("h2",{id:"executor-state-management"},"Executor state management"),(0,i.kt)("p",null,"The persistent executor persists its state and any new/changed persisted remote variables after each ",(0,i.kt)("em",{parentName:"p"},"step"),". One step is\nthe processing of one ",(0,i.kt)("inlineCode",{parentName:"p"},"ZFlow")," instruction."),(0,i.kt)("p",null,"While processing the step the executor collects a sequence of ",(0,i.kt)("inlineCode",{parentName:"p"},"StateChange")," values. At the end of each execution step\nthe following major steps are performed:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"applying the ",(0,i.kt)("inlineCode",{parentName:"li"},"StateChange")," changes to the executor's state (in memory)"),(0,i.kt)("li",{parentName:"ul"},"collecting the remote variables which were accessed (read or modified) during the step"),(0,i.kt)("li",{parentName:"ul"},"saving the modified persistent variables to the key-value store"),(0,i.kt)("li",{parentName:"ul"},"applying some more ",(0,i.kt)("inlineCode",{parentName:"li"},"StateChange")," values to the executor's state, like recording the modified variables and advancing\nthe virtual clock"),(0,i.kt)("li",{parentName:"ul"},"persisting the new executor's state to the key-value store")),(0,i.kt)("p",null,"Currently after each step we save a the full executor state into the key-value store. This is not optimal, but the\nexecutor is designed in a way by working with ",(0,i.kt)("inlineCode",{parentName:"p"},"StateChange")," values that in the future it is going to support saving only\nthe changes into a journal instead."),(0,i.kt)("h2",{id:"transactions"},"Transactions"),(0,i.kt)("p",null,"In transactions every time a variable is accessed, it's current timestamp gets recorded. When the transaction is\ncommitted, these timestamps are compared to the actual timestamps and in case there is a difference that means there is\na conflict and the transaction has to be retried."),(0,i.kt)("p",null,"Retry can also be triggered by the ",(0,i.kt)("inlineCode",{parentName:"p"},"retryUntil")," operator - it is implemented as special kind of failure. In fact within\na\ntransaction each user error ",(0,i.kt)("inlineCode",{parentName:"p"},"E")," is wrapped in a ",(0,i.kt)("inlineCode",{parentName:"p"},"TransactionalFailure[E] = UserError[E] | Retry")," type."),(0,i.kt)("p",null,"Retry can be captured by the ",(0,i.kt)("inlineCode",{parentName:"p"},"orTry")," operator in which case it works exactly like handling an error with ",(0,i.kt)("inlineCode",{parentName:"p"},"Fold"),"."),(0,i.kt)("p",null,"In case the retry is not handled when it reaches a ",(0,i.kt)("inlineCode",{parentName:"p"},"CommitTransaction")," instruction in the stack, the transaction gets\nrestarted."),(0,i.kt)("p",null,"Retrying or failing in a transaction also causes all the ",(0,i.kt)("em",{parentName:"p"},"activities")," to get compensated by running their compensate\nflows in reverse order."),(0,i.kt)("h2",{id:"scoping-rules"},"Scoping rules"),(0,i.kt)("h3",{id:"workflows"},"Workflows"),(0,i.kt)("p",null,"A top level workflow defines the top level scope by its unique flow identifier. This guarantees that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"separate workflows cannot see each other's variables"),(0,i.kt)("li",{parentName:"ul"},"restarted workflows see the same set of variables as the previous run as\nthey share the flow id")),(0,i.kt)("p",null,"Operation semantics on the top level of workflows (not in a forked fiber and\nnot in an active transaction):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"New(name): creates a new remote variable in the KV store's variable\nnamespace called ",(0,i.kt)("inlineCode",{parentName:"li"},'"$flowid__$name"')),(0,i.kt)("li",{parentName:"ul"},"Get(name): reads ",(0,i.kt)("inlineCode",{parentName:"li"},'"$flowid__$name"')),(0,i.kt)("li",{parentName:"ul"},"Set(name): writes ",(0,i.kt)("inlineCode",{parentName:"li"},'"$flowid__$name"'))),(0,i.kt)("h3",{id:"fibers"},"Fibers"),(0,i.kt)("p",null,"Forked workflows are like regular workflows but they are not individually submitted, instead created by the executor by\nthe Fork operator. Each workflow maintains a fork counter and generates new workflow ids based\non that. So a forked workflow's flow identifier will be\n",(0,i.kt)("inlineCode",{parentName:"p"},'"$parentId_fork$parentForkCounter"'),"."),(0,i.kt)("p",null,"Desired semantics:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Forked workflows should have read/write access to variables accessible to\nthe parent workflow"),(0,i.kt)("li",{parentName:"ul"},"Creating new variables in a forked workflow should not be accessible to\nthe parent and sibling workflows"),(0,i.kt)("li",{parentName:"ul"},"Parallel forked workflows should be able to create independent variables\nwith the same name")),(0,i.kt)("p",null,"Operation semantics in forked workflows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"New(name): creates a new remote variable in the KV store's variable\nnamespace prefixed by the active workflow identifier ",(0,i.kt)("inlineCode",{parentName:"li"},'"$flowid__$name"'),"\n(which is ",(0,i.kt)("inlineCode",{parentName:"li"},'"$parentId_fork$parentForkCounter__$$name"'),")."),(0,i.kt)("li",{parentName:"ul"},"Get(name): first finds the variable's scope by first looking in the\ncurrent fiber's scope (using ",(0,i.kt)("inlineCode",{parentName:"li"},'"$flowid__$name"'),") - if it does not\nexist, it recursively tries to access the variable in the parent scope\n(",(0,i.kt)("inlineCode",{parentName:"li"},'"$parentid__$name"'),")."),(0,i.kt)("li",{parentName:"ul"},"Set(name): same lookup as for Get - Get and Set must always select the\nsame variable in an executor step")),(0,i.kt)("h3",{id:"transactions-1"},"Transactions"),(0,i.kt)("p",null,"In transactions we have to delay the effect of Set (but within the\ntransaction still see that value in Get) until the transaction is committed.\nThis means that we need to store values for the same remote variable name per\ntransaction beside its original value - which means transactions define their\nown scope."),(0,i.kt)("p",null,"Desired semantics:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Creating a new variable in a transaction: should not behave differently\nthan in a regular scope",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'transactional variable updates are only interesting if there are\nmultiple fibers running transactions modifying the same variable. This\nmeans that even if there are "colliding" new variables in parallel\ntransactions, their parent scope will be different (because fibers are\nalso defining scopes) so they would never collide.'))),(0,i.kt)("li",{parentName:"ul"},"Within the transaction, Get and Set should work as usual, but the effect\nof Set should not be visible for other fibers, even if the changed\nvariable is in a shared scope."),(0,i.kt)("li",{parentName:"ul"},"When the transaction is committed, the changes are either applied to\nthese shared variables, or the transaction gets reverted.")),(0,i.kt)("p",null,"Flow state contains a transaction counter that can be used as a unique\nidentifier for transaction scopes, similar to how fiber scopes are generated:\n",(0,i.kt)("inlineCode",{parentName:"p"},'"parentId_tx$transactionCounter"'),"."),(0,i.kt)("p",null,"Operation semantics in transaction scopes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"New(name): creates a new remote variable in the parent scope"),(0,i.kt)("li",{parentName:"ul"},"Get(name): acts the same way as in forked workflows, but also records the\naccessed variable's version if necessary"),(0,i.kt)("li",{parentName:"ul"},"Set(name): always sets the value in the transaction scope\n(",(0,i.kt)("inlineCode",{parentName:"li"},"$parentid__$name"),")")),(0,i.kt)("h2",{id:"garbage-collection"},"Garbage collection"),(0,i.kt)("p",null,"The garbage collector of the persisted executor runs periodically and performs the following steps:"),(0,i.kt)("p",null,"First we get all the persisted remote variables from the key-value store. The encoding of scopes in the variable names\nis invertible so we can recover a set of scoped remote variable names by scanning the keys."),(0,i.kt)("p",null,"For each running flow we gather the known set of remote variables referenced by the remaining of that flow. For this we\nget each flow's state and get the referenced remote variables from it's current stack (variable usage is already tracked\non ZFlow and Remote level)."),(0,i.kt)("p",null,"Because of how variable ",(0,i.kt)("a",{parentName:"p",href:"#scoping-rules"},"scoping")," works, we don't know in the GC in advance exactly which scoped remote\nvariable a given\nremote variable name refers to - it is possible that a fiber refers to its parent fiber's remote variable, etc."),(0,i.kt)("p",null,"Transactions are also generating scoped variables. To work around this the garbage collector is following a pessimistic\nbut safe logic: if a flow refers to variable A, it prevents the removal of A from that flow and all its parent flows.\nFor\nvariables with transactional scope, we know them from the list of all existing scoped remote variables, and we simply\nkeep all of them belonging to the flow where the referenced name is coming from. So if flow X references variable A and\nin the key-value store we have two variables with name A in scope ",(0,i.kt)("inlineCode",{parentName:"p"},"X/transaction1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"X/transaction2")," we simply keep\nboth."))}d.isMDXComponent=!0}}]);