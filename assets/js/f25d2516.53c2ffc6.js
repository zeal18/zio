"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[23063],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),c=r,h=u["".concat(l,".").concat(c)]||u[c]||m[c]||i;return n?a.createElement(h,s(s({ref:t},d),{},{components:n})):a.createElement(h,s({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},53652:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={id:"request",title:"Request"},s=void 0,o={unversionedId:"zio-http/dsl/request",id:"zio-http/dsl/request",title:"Request",description:"ZIO HTTP Request is designed in the simplest way possible to decode HTTP Request into a ZIO HTTP request.",source:"@site/docs/zio-http/dsl/request.md",sourceDirName:"zio-http/dsl",slug:"/zio-http/dsl/request",permalink:"/zio-http/dsl/request",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/dsl/request.md",tags:[],version:"current",frontMatter:{id:"request",title:"Request"},sidebar:"ecosystem-sidebar",previous:{title:"Http",permalink:"/zio-http/dsl/http"},next:{title:"Response",permalink:"/zio-http/dsl/response"}},l={},p=[{value:"Creating a Request",id:"creating-a-request",level:2},{value:"Matching and Extracting Requests",id:"matching-and-extracting-requests",level:2},{value:"Method",id:"method",level:3},{value:"Path",id:"path",level:3},{value:"Accessing the Request",id:"accessing-the-request",level:2},{value:"Creating and reading a Request with query params",id:"creating-and-reading-a-request-with-query-params",level:2}],d={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"ZIO HTTP")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Request")," is designed in the simplest way possible to decode HTTP Request into a ZIO HTTP request.\nIt supports all HTTP request methods (as defined in ",(0,r.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc2616"},"RFC2616")," ) and headers along with custom methods and headers."),(0,r.kt)("h2",{id:"creating-a-request"},"Creating a Request"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Request")," can be created with ",(0,r.kt)("inlineCode",{parentName:"p"},"method"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"url"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"headers"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"remoteAddress")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"data"),".\nCreating requests using ",(0,r.kt)("inlineCode",{parentName:"p"},"Request")," is useful while writing unit tests."),(0,r.kt)("p",null,"The below snippet creates a request with default params, ",(0,r.kt)("inlineCode",{parentName:"p"},"headers")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"Headers.empty"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"Body.Empty"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"remoteAddress")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"None")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.http._\nimport zio._\n\nRequest.default(Method.GET, URL(Root))\n// res0: Request = Request(\n//   body = Body.empty,\n//   headers = Iterable(),\n//   method = GET,\n//   url = URL(\n//     path = Path(segments = Vector(Root)),\n//     kind = Relative,\n//     queryParams = QueryParams(map = Map()),\n//     fragment = None\n//   ),\n//   version = Http_1_1,\n//   remoteAddress = None\n// )\n")),(0,r.kt)("h2",{id:"matching-and-extracting-requests"},"Matching and Extracting Requests"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Request")," can be extracted into an HTTP Method and Path via ",(0,r.kt)("inlineCode",{parentName:"p"},"->"),". On the left side is the ",(0,r.kt)("inlineCode",{parentName:"p"},"Method"),", and on the right side, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Path"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'Method.GET -> Root / "text"\n')),(0,r.kt)("h3",{id:"method"},"Method"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Method")," represents HTTP methods like POST, GET, PUT, PATCH, and DELETE. You can create existing HTTP methods such as ",(0,r.kt)("inlineCode",{parentName:"p"},"Method.GET"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Method.POST")," etc or create a custom one."),(0,r.kt)("h3",{id:"path"},"Path"),(0,r.kt)("p",null," ",(0,r.kt)("inlineCode",{parentName:"p"},"Path")," can be created using"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Root")," which represents the root"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/")," which represents the path delimiter and starts the extraction from the left-hand side of the expression"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/:")," which represents the path delimiter and starts the extraction from the right-hand side of the expression and can match paths partially ")),(0,r.kt)("p",null,"The below snippet creates an ",(0,r.kt)("inlineCode",{parentName:"p"},"HttpApp")," that accepts an input of type ",(0,r.kt)("inlineCode",{parentName:"p"},"Request")," and output of type ",(0,r.kt)("inlineCode",{parentName:"p"},"Response")," with two paths.\nAccording to the request path, it will respond with the corresponding response:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"if the request has path ",(0,r.kt)("inlineCode",{parentName:"li"},"/name")," it will match the first route."),(0,r.kt)("li",{parentName:"ul"},"if the request has path ",(0,r.kt)("inlineCode",{parentName:"li"},"/name/joe/wilson")," it will match the second route as ",(0,r.kt)("inlineCode",{parentName:"li"},"/:")," matches the path partially as well.  ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'  val app: HttpApp[Any, Nothing] = Http.collect[Request] {\n     case Method.GET -> Root / a => Response.text(s"$a")\n     case Method.GET -> "" /: "name" /: a => Response.text(s"$a")\n   }\n')),(0,r.kt)("h2",{id:"accessing-the-request"},"Accessing the Request"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"body")," to access the content of request as a ",(0,r.kt)("inlineCode",{parentName:"li"},"Body")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"headers")," to get all the headers in the Request"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"method")," to access request method"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"url")," to access request URL"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"remoteAddress")," to access request's remote address if available"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"version")," to access the HTTP version")),(0,r.kt)("h2",{id:"creating-and-reading-a-request-with-query-params"},"Creating and reading a Request with query params"),(0,r.kt)("p",null,"Query params can be added in the request using ",(0,r.kt)("inlineCode",{parentName:"p"},"url")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"Request"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"URL")," stores query params as ",(0,r.kt)("inlineCode",{parentName:"p"},"Map[String, List[String]]"),"."),(0,r.kt)("p",null,"The below snippet creates a request with query params: ",(0,r.kt)("inlineCode",{parentName:"p"},"?q=a&q=b&q=c")," "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'Request.get(url = URL(Root, queryParams = QueryParams("q" -> Chunk("a","b","c"))))\n// res1: Request = Request(\n//   body = Body.empty,\n//   headers = Iterable(),\n//   method = GET,\n//   url = URL(\n//     path = Path(segments = Vector(Root)),\n//     kind = Relative,\n//     queryParams = QueryParams(map = HashMap("q" -> IndexedSeq("a", "b", "c"))),\n//     fragment = None\n//   ),\n//   version = Http_1_1,\n//   remoteAddress = None\n// )\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"url.queryParams")," can be used to read query params from the request"))}m.isMDXComponent=!0}}]);