"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[43040],{3905:(e,t,n)=>{n.d(t,{Zo:()=>f,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},f=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,d=u["".concat(p,".").concat(m)]||u[m]||s[m]||a;return n?r.createElement(d,i(i({ref:t},f),{},{components:n})):r.createElement(d,i({ref:t},f))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},20587:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={id:"zrefm",title:"ZRefM"},i=void 0,l={unversionedId:"reference/concurrency/zrefm",id:"version-1.0.18/reference/concurrency/zrefm",title:"ZRefM",description:"A ZRefM[RA, RB, EA, EB, A, B] is a polymorphic, purely functional description of a mutable reference.",source:"@site/versioned_docs/version-1.0.18/reference/concurrency/zrefm.md",sourceDirName:"reference/concurrency",slug:"/reference/concurrency/zrefm",permalink:"/1.0.18/reference/concurrency/zrefm",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.0.18/reference/concurrency/zrefm.md",tags:[],version:"1.0.18",frontMatter:{id:"zrefm",title:"ZRefM"},sidebar:"overview_sidebar",previous:{title:"Ref",permalink:"/1.0.18/reference/concurrency/ref"},next:{title:"RefM",permalink:"/1.0.18/reference/concurrency/refm"}},p={},c=[],f={toc:c},u="wrapper";function s(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"ZRefM[RA, RB, EA, EB, A, B]")," is a polymorphic, purely functional description of a mutable reference. "),(0,o.kt)("p",null,"The fundamental operations of a ",(0,o.kt)("inlineCode",{parentName:"p"},"ZRefM"),"are ",(0,o.kt)("inlineCode",{parentName:"p"},"set")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"get"),". "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"set"))," takes a value of type ",(0,o.kt)("inlineCode",{parentName:"li"},"A")," and sets the reference to a new value, requiring an environment of type ",(0,o.kt)("inlineCode",{parentName:"li"},"RA")," and potentially failing with an error of type ",(0,o.kt)("inlineCode",{parentName:"li"},"EA"),". "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"get"))," gets the current value of the reference and returns a value of type ",(0,o.kt)("inlineCode",{parentName:"li"},"B"),", requiring an environment of type\n",(0,o.kt)("inlineCode",{parentName:"li"},"RB")," and potentially failing with an error of type ",(0,o.kt)("inlineCode",{parentName:"li"},"EB"),".")),(0,o.kt)("p",null,"When the error and value types of the ",(0,o.kt)("inlineCode",{parentName:"p"},"ZRefM")," are unified, that is, it is a ",(0,o.kt)("inlineCode",{parentName:"p"},"ZRefM[E, E, A, A]"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"ZRefM")," also supports atomic ",(0,o.kt)("inlineCode",{parentName:"p"},"modify")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"update")," operations."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("em",{parentName:"p"},(0,o.kt)("strong",{parentName:"em"},"Note:"))),(0,o.kt)("p",{parentName:"blockquote"},"Unlike ",(0,o.kt)("inlineCode",{parentName:"p"},"ZRef"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ZRefM")," allows performing effects within update operations, at some cost to performance. Writes will semantically block other writers, while multiple readers can read simultaneously.")))}s.isMDXComponent=!0}}]);