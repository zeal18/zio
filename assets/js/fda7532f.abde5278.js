"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[23237],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>y});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),f=c(n),m=o,y=f["".concat(l,".").concat(m)]||f[m]||u[m]||a;return n?r.createElement(y,i(i({ref:t},s),{},{components:n})):r.createElement(y,i({ref:t},s))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[f]="string"==typeof e?e:o,i[1]=p;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},18899:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={id:"flattening-optional-error-types",title:"Flattening Optional Error Types"},i=void 0,p={unversionedId:"reference/error-management/operations/flattening-optional-error-types",id:"reference/error-management/operations/flattening-optional-error-types",title:"Flattening Optional Error Types",description:"If we have an optional error of type E in the error channel, we can flatten it to the E type using the ZIO#flattenErrorOption operator:",source:"@site/docs/reference/error-management/operations/flattening-optional-error-types.md",sourceDirName:"reference/error-management/operations",slug:"/reference/error-management/operations/flattening-optional-error-types",permalink:"/reference/error-management/operations/flattening-optional-error-types",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/error-management/operations/flattening-optional-error-types.md",tags:[],version:"current",frontMatter:{id:"flattening-optional-error-types",title:"Flattening Optional Error Types"},sidebar:"reference-sidebar",previous:{title:"Error Refinement",permalink:"/reference/error-management/operations/error-refinement"},next:{title:"Merging the Error Channel into the Success Channel",permalink:"/reference/error-management/operations/merging-the-error-channel-into-the-success-channel"}},l={},c=[],s={toc:c},f="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(f,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"If we have an optional error of type ",(0,o.kt)("inlineCode",{parentName:"p"},"E")," in the error channel, we can flatten it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"E")," type using the ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO#flattenErrorOption")," operator:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\ndef parseInt(input: String): ZIO[Any, Option[String], Int] =\n  if (input.isEmpty)\n    ZIO.fail(Some("empty input"))\n  else\n    try {\n      ZIO.succeed(input.toInt)\n    } catch {\n      case _: NumberFormatException => ZIO.fail(None)\n    }\n\ndef flattenedParseInt(input: String): ZIO[Any, String, Int] =\n  parseInt(input).flattenErrorOption("non-numeric input")\n\nval r1: ZIO[Any, String, Int] = flattenedParseInt("zero")\nval r2: ZIO[Any, String, Int] = flattenedParseInt("")\nval r3: ZIO[Any, String, Int] = flattenedParseInt("123")\n')))}u.isMDXComponent=!0}}]);