"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[23999],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,u=d["".concat(s,".").concat(h)]||d[h]||c[h]||i;return n?a.createElement(u,o(o({ref:t},m),{},{components:n})):a.createElement(u,o({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},84563:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={id:"hash",title:"Hash"},o=void 0,l={unversionedId:"zio-crypto/hash",id:"zio-crypto/hash",title:"Hash",description:"The Hash environment provides basic 1-way hash functions.",source:"@site/docs/zio-crypto/hashing.md",sourceDirName:"zio-crypto",slug:"/zio-crypto/hash",permalink:"/zio-crypto/hash",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-crypto/hashing.md",tags:[],version:"current",frontMatter:{id:"hash",title:"Hash"},sidebar:"ecosystem-sidebar",previous:{title:"Secure Random",permalink:"/zio-crypto/secure-random"},next:{title:"HMAC",permalink:"/zio-crypto/hmac"}},s={},p=[{value:"Algorithms",id:"algorithms",level:2},{value:"API",id:"api",level:2},{value:"Usage",id:"usage",level:2},{value:"Secure",id:"secure",level:3},{value:"String Example",id:"string-example",level:2},{value:"Byte Example",id:"byte-example",level:2}],m={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Hash")," environment provides basic 1-way hash functions."),(0,r.kt)("h2",{id:"algorithms"},"Algorithms"),(0,r.kt)("p",null,"We support MD5, SHA1, SHA256, SHA384, and SHA512."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Function"),(0,r.kt)("th",{parentName:"tr",align:null},"Security (in bits) against collision attacks"),(0,r.kt)("th",{parentName:"tr",align:null},"Dangerous?"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MD5"),(0,r.kt)("td",{parentName:"tr",align:null},"<= 18 (collisions found)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"DANGEROUS"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SHA1"),(0,r.kt)("td",{parentName:"tr",align:null},"< 63 (collisions found)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"DANGEROUS"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SHA256"),(0,r.kt)("td",{parentName:"tr",align:null},"128"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SHA384"),(0,r.kt)("td",{parentName:"tr",align:null},"192"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SHA512"),(0,r.kt)("td",{parentName:"tr",align:null},"256"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("p",null,"There are two basic functions provided: ",(0,r.kt)("inlineCode",{parentName:"p"},"hash")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"verify"),".\nFor any message ",(0,r.kt)("inlineCode",{parentName:"p"},"m"),", we have that ",(0,r.kt)("inlineCode",{parentName:"p"},"verify(m, hash(m)) == true"),",\nand for any two messages ",(0,r.kt)("inlineCode",{parentName:"p"},"m1"),"and ",(0,r.kt)("inlineCode",{parentName:"p"},"m2")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"m1 != m2"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"verify(m1, hash(m2)) == false"),"."),(0,r.kt)("p",null,"Both ",(0,r.kt)("inlineCode",{parentName:"p"},"hash")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"verify")," are implemented in terms of\n",(0,r.kt)("inlineCode",{parentName:"p"},"String")," (provided you specify a ",(0,r.kt)("inlineCode",{parentName:"p"},"Charset"),") and ",(0,r.kt)("inlineCode",{parentName:"p"},"Chunk[Byte]"),"."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"To use the hashing service, simply call the method hash\nwith a type parameter specifying the algorithm you wish\nto use."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.nio.charset.StandardCharsets.US_ASCII\nimport zio.crypto.hash.{Hash, HashAlgorithm}\nHash.hash[HashAlgorithm.SHA256]("hello", US_ASCII)\n')),(0,r.kt)("p",null,"However, we need to take special case when using algorithms\nmarked ",(0,r.kt)("em",{parentName:"p"},"DANGEROUS")," in the table above."),(0,r.kt)("h3",{id:"secure"},"Secure"),(0,r.kt)("p",null,"If you're using ",(0,r.kt)("inlineCode",{parentName:"p"},"MD5")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"SHA1"),", you need to explicitly not recognize that\nthe function you're calling is unsecure. To do so, use the function ",(0,r.kt)("inlineCode",{parentName:"p"},"zio.crypto.unsecure")," as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.crypto.unsecure\nunsecure(implicit s => Hash.hash[HashAlgorithm.MD5]("hello", US_ASCII))\n')),(0,r.kt)("h2",{id:"string-example"},"String Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import java.nio.charset.StandardCharsets.US_ASCII\nimport zio.crypto.hash.{Hash, HashAlgorithm}\n\nobject Example extends zio.App {\n  override def run(args: List[String]) = (for {\n    digest <- Hash.hash[HashAlgorithm.SHA256](\n      m = "hello",\n      charset = US_ASCII\n    )\n    verified <- Hash.verify[HashAlgorithm.SHA256](\n      m = "hello",\n      digest = digest,\n      charset = US_ASCII\n    )\n  } yield verified).exitCode\n    .provideCustomLayer(Hash.live)\n}\n')),(0,r.kt)("h2",{id:"byte-example"},"Byte Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.crypto.hash.{Hash, HashAlgorithm}\nimport zio.crypto.random.SecureRandom\n\nobject Example extends zio.App {\n  override def run(args: List[String]) = (for {\n    m <- SecureRandom.nextBytes(10)\n    digest <- Hash.hash[HashAlgorithm.SHA256](\n      m = m\n    )\n    verified <- Hash.verify[HashAlgorithm.SHA256](\n      m = m,\n      digest = digest\n    )\n  } yield verified).exitCode\n    .provideCustomLayer(Hash.live ++ SecureRandom.live.orDie)\n}\n")))}c.isMDXComponent=!0}}]);